# =================================================================
# PARAM SETTINGS
#
# ** standard.cfg : 
#      sets up the daemon with default params as given
#      in the CosNotification specification.
#
# ** channel.cfg : 
#      sets up daemon with default params which we prefer.
#
# You can choose which one to use, or copy one and edit it
# to suit your needs.
#
# There are only a couple of differences:
#
#                        standard.cfg        channel.cfg
#
#   PacingInterval           0                  1000  (1 second)
#   MaximumBatchSize	     1                   8
#

# =================================================================
#       omniNotify Configuration (Startup) Properties
#                                                   
# You can modify startup properties in one of 3 ways
#
# 1. copy this file to create your own .cfg file and edit it.  Use
#       promp> notifd -i -c myconfig.cfg
#    to start notifd using the config file myconfig.cfg
#
# 2. set an environment variable; this will override any
#    config file settings.  e.g., for tcsh,
#         promp> setenv LocalClockTDF 0
#         promp> notifd -i -c channel.cfg
#    This uses channel.cfg but changes the time zone to GMT
#
# 3. use explicit command-line param definitions
#    these override both the config file and any env variable settings
#         promp> setenv LocalClockTDF 0
#         promp> notifd -i -c channel.cfg -DLocalClockTDF=-60
#    This would set the time zone to 1 hour earlier than GMT
#
# omniNotify manages 3 kinds of properties
#
#   * ServerQOS properties are properties that all channels share;
#     they cannot be changed on a per-channel basis.
#
#   * AdminQoS properties are properties that can only be
#     set at the channel factory / channel level.
#
#   * NotifQoS properties are properties that can be set at
#     many levels: channel factory, channel, admin, proxy;
#     some of these can also be changed on a per-event basis.
#
# The channel factory's AdminQoS and NotifQoS property settings
# are used as defaults: when creating a channel these property
# values are used unless specific overrides are provided in
# with the channel creation request.  Once a channel is created,
# its AdminQoS and NotifQoS properties can be modified; the
# factory's properties can also be modified.  Note that once a 
# channel is created, its properties are independent of the
# factory -- modifications to the channel properties do not affect
# the factory defaults, and modifications to the factory defaults
# do not affect the properties of already-created channels.
#
# The settings specified in config files, environment
# variables and/or command line param definitions are used to
# set the initial values for the server's ServerQoS properties and
# for the channel factory's AdminQoS and NotifQoS
# default properties.  Since the default channel is created on startup,
# it also takes its AdminQoS and NotifQoS properties from
# these initial settings.
#
#==================================================================

#==================================================================
# Misc Startup Properties
#    -- these are essentially ServerQoS properties,
#       but are not currently implemented that way 
#==================================================================

# ChannelFactoryName, DefaultChannelName: Names to be assigned to the channel
# factory and channel created by the notifd channel daemon.

ChannelFactoryName	ChannelFactory
DefaultChannelName	EventChannel

# FactoryIORFileName, ChannelIORFileName: path names of the files used to store
# the string representation of the channel factory IOR and channel object IOR

#FactoryIORFileName	/tmp/rdifact.ior
#ChannelIORFileName	/tmp/rdichan.ior
FactoryIORFileName	./rdifact.ior
ChannelIORFileName	./rdichan.ior

# DebugLogFile: if a file path is given for this parameter, debug info is logged
# to the file.  'stderr' and 'stdout' can be used to direct output to standard
# error / standard output.

DebugLogFile		./NS_debug.log
#DebugLogFile		stderr

# ReportFile: if a file path is given for this parameter, report are logged to
# the file.  'stderr' and 'stdout' can be used to direct output to standard
# error / standard output.

ReportLogFile		./NS_report.log
#ReportLogFile		stdout

# Debug flags: the following flags control how much debug information is output
# to the debug log.
#
# N.B.: If omniNotify is compiled with the -DNO_DEBUG flag, only critical
# messages are logged and the settings for the following flags are ignored.

# debug flags -- 0 is "off", 1 is "on"
DebugDaemon               0
DebugChannelFactory       0
DebugFilter               0
DebugChannel              0
DebugConsumerAdmin        0 
DebugSupplireAdmin        0
DebugConsumerProxy        0
DebugSupplierProxy        0
DebugEventQueue           0
DebugRDIEvent             0
DebugFilterAdmin          0
DebugFilterEval           0
DebugCosConsumerProxies   0
DebugCosSupplierProxies   0
DebugNotifQoS             0
DebugAdminQoS             0
DebugNotifQueue           0

# Report flags: the following flags control how much information is output to
# the report log.

# report flags -- 0 is "off", 1 is "on"
ReportChannelStats        0
ReportQueueSizeStats      0
ReportConnectedConsumers  0 
ReportConnectedSuppliers  0
ReportConnectedFilters    0
ReportUnconnectedFilters  0
ReportEventRejections     0
ReportEventDrops          0
ReportNotifQoS            0
ReportAdminQoS            0
ReportServerQoS           0

#==================================================================
# Initial ServerQoS Properties
#==================================================================

# OutgoingTimeout: Timeout in milliseconds for outgoing calls (such as
# push calls to connected push consumers, or try_pull calls to
# connected pull suppliers).  If the roundtrip time for a call takes
# longer than this time, the call is terminated and the client is
# marked as disconnected by its proxy.  At this point the client must
# connect using a DIFFERENT proxy if it wants to restore push/pull
# activity. (If 0 is specified, then no timeout is used.)
#
# The default of 10000 (10 seconds) may need to be changed to reflect
# your operating environment.  You may, for example, have push
# consumers that take a very long time to consume each event, in which
# case you may need to increase the value, or you may know that all
# calls should complete in less than .5 seconds, in which case you
# might want to set the value to, e.g., 1000 (1 second).
# 
# IncomingTimeout: Timeout in milliseconds for incoming calls (such as
# push calls from push suppliers or pull calls from pull consumers).
# This timeout handles the case where the ORB starts to receive the
# bytes for an incoming request but never gets all of the request, due
# perhaps to a client that crashed or hung in the middle of sending
# the request.  If IncomingTimeout > 0, the ORB will give up after the
# specified timeout and drop the connection.  This connection drop
# occurs entirely in the ORB runtime; notifd does not learn of these
# drops.  Thus, unlike OutgoingTimeout, the client is not marked as
# disconnected, and can continue to attempt to make additional calls
# using its current proxy.  The default is also 10000 (10 seconds).
# 
# Note: for omniORB3, which only does timeouts using seconds, a
# non-zero millisecond value is converted to the closest number of
# non-zero seconds (a non-zero value less than 1 is always rounded to
# 1, never to 0).

OutgoingTimeout		20000
IncomingTimeout		20000

# NumAdminGroups, NumAdminThreads. Each ConsumerAdmin and SupplierAdmin object
# is assigned to an 'admin group' and each admin group is processed by only one
# thread at a time, where there are NumAdminGroups groups and NumAdminThreads
# threads that handle all of the admin groups.  NumAdminThreads must be at least
# 1, and the number of threads should not exceed the number of groups

NumAdminGroups		2
NumAdminThreads		6

# NumProxyThreads.  If NumProxyThreads > 0, notifd splits the filter evaluation
# processing in two stages, where admin-level filters are evaluated in stage one using
# NumAdminThreads threads, and proxy-level filters are evaluated in stage two using
# NumProxyThreads threads.  If NumProxyThreads is zero, the admin-level threads
# do all of the filter evaluation work.

NumProxyThreads		4

# NumPushThreads: the number of threads used to push matched events to
# push-style consumers.  If 0, each push consumer gets its own push thread.
#
# NumPullThreads: the number of threads used to pull events from pull-style
# suppliers.  If 0, each pull supplier gets its own pull thread.

NumPushThreads		12
NumPullThreads		0

# NumOChangeThreads: the number of threads used to notify consumers of offer
# changes (using offer_change).  CAREFUL: setting to zero disables offer_change
# messages.
# NumSChangeThreads: the number of threads used to notify suppliers of
# subscription changed (using subscription_change).  CAREFUL: setting to zero
# disables subscription_change messages.

NumOChangeThreads	0
NumSChangeThreads	10

# PullEventPeriod: the time period (milliseconds) between pulls (for pull-style
# suppliers).  A value of 0 corresponds to continuous pulling

PullEventPeriod		100

# Event queue garbage collection
# ------------------------------
# Each channel has an event queue that stores all events provided to the
# channel.  These events are then filtered and dispatched to push and pull
# consumers.  Once an event has beed filtered and dispatched, it is 'garbage' --
# it can be removed from the event queue.  The current notifd implementation
# uses a separate thread to do this 'event queue garbage collection' step.
# There is one param that controls this collector: QuePeriod is the number of
# seconds between each event queue garbage collection.  The minimum number that
# can be used is 1

QueueGCPeriod		30

# Object Garbage collection
# -------------------------
#
# N.B.: If omniNotify is compiled with -DNO_OBJ_GC, then no object garbage
# collection is performed and the following parameters are not available.
#
# The channel, admin, proxy, and filter objects that are constructed by notifd
# sometimes become garbage: applications stop using them without properly
# destroying them.  E.g., a client could create an admin and a proxy and then
# crash before it has a chance to use or destroy these objects.  Unlike event
# queue garbage collection, it is hard or impossible for the notifd to know that
# an object is garbage: in some application scenarios, an object that is not
# used for more than 10 minutes should be considered garbage, while for other
# applications there might be valid objects that are only used once every 3
# days.  Each channel has an object garbage collection thread that is controlled
# by the following parameters.
#
# ObjectGCPeriod: period in seconds between object garbage collection steps.
#                 Set to 0 to disable.
#
# DeadChanInterval, DeadAdminInterval, DeadConProxyInterval,
# DeadOtherProxyInteral, DeadFilterInterval: if non-zero, these intervals (in
# seconds) specify how much time must pass since the last 'use' of one of these
# types of objects before the object can be considered garbage.  For proxies,
# DeadConProxyInterval specifies the interval to use for connected proxies, and
# DeadOtherProxyInterval specifies the interval to use for other proxies.  A
# proxy is not connected if (a) it has never been connected or (b) there has
# been a communication failure between the proxy and its connected supplier or
# consumer.
# 
# Rules for object garbage collection:
#
#   1. The default channel is never destroyed by the object garbage collector.
#
#   2. The default admins of the default channel are never destroyed by
#      the object garbage collector.
#
#   3. A proxy is destroyed by the object garbage collector
#      if all of the following hold:
#          A. EITHER it is connected and has not been used for more than DeadConProxyInterval seconds
#             OR it is not connected and has not been used for more than DeadOtherProxyInterval seconds.
# 
#          Note: if DeadConProxyInterval is set to zero, no connected proxies will be garbage collected.
#          If DeadOtherProxyInterval is set to zero, no non-connected proxies will be garbage collected.
#
#   4. A non-default admin is destroyed by the object garbage collector
#      if all of the following hold:
#          A. It has not been used for more than DeadAdminInterval seconds.
#          B. It has no connected proxies.
# 
#          Note: if DeadAdminInterval is set to zero, no admins will be garbage collected.
#          Also note that garbage collection of proxies will enable garbage collection
#          of admins, so turning off proxy GC can disable some admin GC.
#
#   5. A non-default channel, together with its default admins, is destroyed
#      by the object garbage collector if all of the following hold:
#          A. The channel has not been used for more than DeadChanInterval seconds.
#          B. Neither default admin has been used for more than DeadAdminInterval seconds.
#          C. Neither default admin has any connected proxies.
#          D. There are no non-default admins.
#
#          Note: if DeadAdminInterval or DeadChanInterval is set to zero, no
#          channels will be garbage collected.  Also note that garbage
#          collection of admins will enable garbage collection of channels, so
#          turning off admin GC can disable some channel GC.
#
#   6. A filter is destroyed by the object garbage collector
#      if all of the following hold:
#          A. It has not been used for more than DeadFilterInterval seconds.
#          B. It is not attached to any proxy or admin objects.
#
#          Note: if DeadFilterInterval is set to zero, no filters will be
#          garbage collected.  Also note that garbage collection of proxies and
#          admins will enable garbage collection of filters, so turning off
#          proxy or admin GC can disable some filter GC.

# Note: 600 below ==>ten minutes, 0 below ==> disabled

#ObjectGCPeriod            600
ObjectGCPeriod            60
DeadChanInterval            0
DeadAdminInterval         450
#DeadConProxyInterval        0
DeadConProxyInterval        180
DeadOtherProxyInterval    600
DeadFilterInterval        300

# ReportingInterval: time period (in seconds) between each
# channel stats 'report'.  The channel may have a built-in minimum,
# e.g, even if you say 3, the channel may choose a 10 second period.
# Use 0 to disable stat reporting.  (default 300 seconds = 5 mins.)

#ReportingInterval	600
ReportingInterval	0

# LocalClockInaccLo/Hi: local clock inaccuracy in units of 100ns
#                       (must fit in 48 bits, 32 for Lo, 16 for Hi)
# LocalClockTDF:   local time zone expressed in minutes west of
#                  greenwhich meridian; 300=Eastern time zone, USA
#
# These values describe the local clock values returned by omnithread::get_time.
# These values are here because we do not know a portable way to get
# the clock accuracy and the time zone across all Unix flavors and
# Windows.  Let us know if you have a portable approach.

LocalClockInaccLo	0
LocalClockInaccHi	0
LocalClockTDF		300

#==================================================================
# Initial Default AdminQoS Properties
#==================================================================

# MaxQueueLength: maximum number of events that will be queued by the Channel
# before before it begins discarding events or rejecting new ones.  A value of 0
# does not place any upper limit.

MaxQueueLength		0

# MaxConsumers: maximum number of Consumers that can be connected to a Channel
# at any given time.  A value of 0 does not place any upper limit.

MaxConsumers		0

# MaxSupplies: maximum number of Suppliers that can be connected to a Channel at
# any given time.  A value of 0 does not place any upper limit.

MaxSuppliers		0

# RejectNewEvents: if 1, newly announced events will be discarded when the
# number of undelivered events in a Channel is equal to 'MaxQueueLength'.  If 0,
# newly announced events cause existing events to be discarded according to the
# 'DiscardPolicy' QoS.

RejectNewEvents		1

#==================================================================
# Initial Default NotifQoS Properties
#==================================================================

# EventReliability and ConnectionReliability can take the values:
# 	0 --> CosNotification::BestEffort
#	1 --> CosNotification::Persistent
# OrderPolicy can take the values: 
# 	0 --> CosNotification::AnyOrder
# 	1 --> CosNotification::FifoOrder
# 	2 --> CosNotification::PriorityOrder
# 	3 --> CosNotification::DeadlineOrder
# DiscardPolicy can take any of the above values and, in addition, 
#	4 --> CosNotification::LifoOrder
# StartTimeSupported and StopTimeSupported are boolean and can take
# the values 
#	0 --> FALSE
#	1 --> TRUE
#
# NOTE: the current notifd implementation does NOT support all QoS 
#       settings. In particular, it only supports the following:
#		EventReliability	0
#		ConnectionReliability	0
#		StartTimeSupported	0
#		StopTimeSupported	0

# Note -- PacingInterval can be set programmatically to any
# TimeBase::TimeT value (units = 100s of nanoseconds).  Here you
# set number of MILLISECONDS, e.g., a value of 1000 means send a batch
# roughly every 1 second (or when MaxBatchSize is reached).

EventReliability	0
ConnectionReliability	0
Priority		0
Timeout			0
StartTimeSupported	0
StopTimeSupported	0
OrderPolicy		1
DiscardPolicy		0
PacingInterval		50
MaxEventsPerConsumer	0

# TD 1933: Workaround for possible bug in omniNotify 2.1.
# TODO LPP: If more than one event is dispatched to a proxy consumer at a time, 
# proxy suppliers will dispatch events in the wrong order (on Windows at least).  
# So we are currently restricted to using a batch size of 1.  This seems to be 
# a bug in OmniNotify 2.1.
#MaximumBatchSize   10    
MaximumBatchSize   	1

