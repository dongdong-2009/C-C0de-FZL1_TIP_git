//
// The source code in this file is the property of
// Ripple Systems and is not for redistribution
// in any form.
//
// Source:   $File$
// @author:  Bart Golab
// @version: $Revision$
//
// Last modification: $DateTime$
// Last modified by:  $Author$
//
// <description>

#include "StdAfx.h"

#ifdef _MSC_VER
  #pragma warning(disable: 4250) // inherits via dominance
#endif // _MSC_VER

#include "PlanManager.h"
#include "PlanFlowchartPage.h"
#include "PlanManagerCommonDefs.h"
#include "PlanAgentAccess.h"
#include "PlanNode.h"
#include <sstream>
#include "core/utilities/src/DebugUtil.h"
#include "core/utilities/src/RunParams.h"

#include "bus/generic_gui/src/TransActiveMessage.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace TA_Base_App;


/////////////////////////////////////////////////////////////////////////////
// CPlanFlowchartPage dialog


CPlanFlowchartPage::CPlanFlowchartPage() :
    CPlanDetailPage(CPlanFlowchartPage::IDD)
{
    FUNCTION_ENTRY( "CPlanFlowchartPage" );

    // {{AFX_DATA_INIT(CPlanFlowchartPage)
        // NOTE: the ClassWizard will add member initialization here
    // }}AFX_DATA_INIT

    FUNCTION_EXIT;
}


CPlanFlowchartPage::~CPlanFlowchartPage()
{
    FUNCTION_ENTRY( "~CPlanFlowchartPage" );
    FUNCTION_EXIT;
}


void CPlanFlowchartPage::DoDataExchange(CDataExchange* pDX)
{
    FUNCTION_ENTRY( "DoDataExchange" );

    CPlanDetailPage::DoDataExchange(pDX);
    // {{AFX_DATA_MAP(CPlanFlowchartPage)
    DDX_Control(pDX, IDC_FLOWCHART_BROWSER, m_flowchartBrowser);
    // }}AFX_DATA_MAP

    FUNCTION_EXIT;
}


BEGIN_MESSAGE_MAP(CPlanFlowchartPage, CPlanDetailPage)
    // {{AFX_MSG_MAP(CPlanFlowchartPage)
    ON_WM_SIZE()
    // }}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CPlanFlowchartPage message handlers

BOOL CPlanFlowchartPage::OnInitDialog()
{
    FUNCTION_ENTRY( "OnInitDialog" );

    CPlanDetailPage::OnInitDialog();

    FUNCTION_EXIT;
    return TRUE;  // return TRUE unless you set the focus to a control
                  // EXCEPTION: OCX Property Pages should return FALSE
}


BOOL CPlanFlowchartPage::OnSetActive()
{
    FUNCTION_ENTRY( "OnSetActive" );

    if (CPlanDetailPage::OnSetActive())
    {
        FUNCTION_EXIT;
        return TRUE;
    }

    FUNCTION_EXIT;
    return FALSE;
}


void CPlanFlowchartPage::SetPlanFilterButtonStates()
{
    FUNCTION_ENTRY( "SetPlanFilterButtonStates" );

    // no need to do anything here

    FUNCTION_EXIT;
}


void CPlanFlowchartPage::OnSize(UINT nType, int cx, int cy)
{
    FUNCTION_ENTRY( "OnSize" );

    CPlanDetailPage::OnSize(nType, cx, cy);

    // TODO: Add your message handler code here
    if (::IsWindow(m_flowchartBrowser.GetSafeHwnd()))
    {
        CRect flowchartRect;
        m_flowchartBrowser.GetWindowRect(flowchartRect);
        ScreenToClient(flowchartRect);
        flowchartRect.right = cx;
        flowchartRect.bottom = cy;
        m_flowchartBrowser.MoveWindow(flowchartRect);
    }

    FUNCTION_EXIT;
}


void CPlanFlowchartPage::ShowRelevantControls()
{
    FUNCTION_ENTRY( "ShowRelevantControls" );
    FUNCTION_EXIT;
}


void CPlanFlowchartPage::RefreshControlContents()
{
    FUNCTION_ENTRY( "RefreshControlContents" );

    std::string file;
    file = TA_Base_Core::RunParams::getInstance().get(TA_Base_App::RPARAM_FLOWCHARTDIR);

	unsigned long ulNodeId = GetPlanNode()->getNodeId();
	try
	{
		file += PlanAgentAccess::getInstance().getNodePath(ulNodeId);
	}
	catch ( ... )
	{
		LOG_GENERIC( SourceInfo, TA_Base_Core::DebugUtil::DebugError, "Failed to get the path of node ID %lu",ulNodeId);
		return;
	}

    CString ext;
    ext.LoadString(IDS_FLOWCHART_EXTENSION);
    file += ext.GetBuffer(0);
    LOG_GENERIC( SourceInfo, TA_Base_Core::DebugUtil::DebugInfo, "Flowchart file: %s", file.c_str() );
    try
    {
        m_flowchartBrowser.Navigate(file.c_str(),0,0,0,0);
    }
    catch (...)
    {
        // as per TD 13166
        // need this catch to prevent additional error messages
        // (appart from the one generated by m_flowchartBrowser)
        // from popping up
    }

    FUNCTION_EXIT;
}


void CPlanFlowchartPage::RefreshActiveInstances()
{
    FUNCTION_ENTRY( "RefreshActiveInstances" );
    FUNCTION_EXIT;
}


void CPlanFlowchartPage::PurgeActiveInstances()
{
    FUNCTION_ENTRY( "PurgeActiveInstances" );
    FUNCTION_EXIT;
}


