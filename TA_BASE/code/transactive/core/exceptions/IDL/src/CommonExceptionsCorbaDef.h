// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __CommonExceptionsCorbaDef_hh__
#define __CommonExceptionsCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

  class AccessDeniedException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline AccessDeniedException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    AccessDeniedException(const AccessDeniedException&);
    AccessDeniedException(const char* i_reason);
    AccessDeniedException& operator=(const AccessDeniedException&);
    virtual ~AccessDeniedException();
    virtual void _raise() const;
    static AccessDeniedException* _downcast(::CORBA::Exception*);
    static const AccessDeniedException* _downcast(const ::CORBA::Exception*);
    static inline AccessDeniedException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AccessDeniedException;

  class OperationNotSupportedException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline OperationNotSupportedException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    OperationNotSupportedException(const OperationNotSupportedException&);
    OperationNotSupportedException(const char* i_reason);
    OperationNotSupportedException& operator=(const OperationNotSupportedException&);
    virtual ~OperationNotSupportedException();
    virtual void _raise() const;
    static OperationNotSupportedException* _downcast(::CORBA::Exception*);
    static const OperationNotSupportedException* _downcast(const ::CORBA::Exception*);
    static inline OperationNotSupportedException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OperationNotSupportedException;

  class BadParameterException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline BadParameterException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    BadParameterException(const BadParameterException&);
    BadParameterException(const char* i_reason);
    BadParameterException& operator=(const BadParameterException&);
    virtual ~BadParameterException();
    virtual void _raise() const;
    static BadParameterException* _downcast(::CORBA::Exception*);
    static const BadParameterException* _downcast(const ::CORBA::Exception*);
    static inline BadParameterException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BadParameterException;

  class NotAvailableException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline NotAvailableException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    NotAvailableException(const NotAvailableException&);
    NotAvailableException(const char* i_reason);
    NotAvailableException& operator=(const NotAvailableException&);
    virtual ~NotAvailableException();
    virtual void _raise() const;
    static NotAvailableException* _downcast(::CORBA::Exception*);
    static const NotAvailableException* _downcast(const ::CORBA::Exception*);
    static inline NotAvailableException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NotAvailableException;

  class DatabaseErrorException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline DatabaseErrorException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    DatabaseErrorException(const DatabaseErrorException&);
    DatabaseErrorException(const char* i_reason);
    DatabaseErrorException& operator=(const DatabaseErrorException&);
    virtual ~DatabaseErrorException();
    virtual void _raise() const;
    static DatabaseErrorException* _downcast(::CORBA::Exception*);
    static const DatabaseErrorException* _downcast(const ::CORBA::Exception*);
    static inline DatabaseErrorException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DatabaseErrorException;

  class OperationModeException : public ::CORBA::UserException {
  public:
    
    ::CORBA::String_member reason;

  

    inline OperationModeException() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    OperationModeException(const OperationModeException&);
    OperationModeException(const char* i_reason);
    OperationModeException& operator=(const OperationModeException&);
    virtual ~OperationModeException();
    virtual void _raise() const;
    static OperationModeException* _downcast(::CORBA::Exception*);
    static const OperationModeException* _downcast(const ::CORBA::Exception*);
    static inline OperationModeException* _narrow(::CORBA::Exception* _e) {
      return _downcast(_e);
    }
    
    void operator>>=(cdrStream&) const ;
    void operator<<=(cdrStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual ::CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;
    static _core_attr const char* _PD_typeId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(cdrStream&) const;
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OperationModeException;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AccessDeniedException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AccessDeniedException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AccessDeniedException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::OperationNotSupportedException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::OperationNotSupportedException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::OperationNotSupportedException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BadParameterException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BadParameterException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::BadParameterException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NotAvailableException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NotAvailableException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NotAvailableException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DatabaseErrorException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DatabaseErrorException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DatabaseErrorException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::OperationModeException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::OperationModeException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::OperationModeException*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CommonExceptionsCorbaDef
#endif

#endif  // __CommonExceptionsCorbaDef_hh__

