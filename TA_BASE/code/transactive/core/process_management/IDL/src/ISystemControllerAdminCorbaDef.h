// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ISystemControllerAdminCorbaDef_hh__
#define __ISystemControllerAdminCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
#endif



#ifndef __ProcessManagementDataDefinitionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ProcessManagementDataDefinitionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ProcessManagementDataDefinitionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

#ifndef __TA__Base__Core_mISystemControllerAdminCorbaDef__
#define __TA__Base__Core_mISystemControllerAdminCorbaDef__

  class ISystemControllerAdminCorbaDef;
  class _objref_ISystemControllerAdminCorbaDef;
  class _impl_ISystemControllerAdminCorbaDef;
  
  typedef _objref_ISystemControllerAdminCorbaDef* ISystemControllerAdminCorbaDef_ptr;
  typedef ISystemControllerAdminCorbaDef_ptr ISystemControllerAdminCorbaDefRef;

  class ISystemControllerAdminCorbaDef_Helper {
  public:
    typedef ISystemControllerAdminCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ISystemControllerAdminCorbaDef, ISystemControllerAdminCorbaDef_Helper> ISystemControllerAdminCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ISystemControllerAdminCorbaDef,ISystemControllerAdminCorbaDef_Helper > ISystemControllerAdminCorbaDef_out;

#endif

  // interface ISystemControllerAdminCorbaDef
  class ISystemControllerAdminCorbaDef {
  public:
    // Declarations for this interface type.
    typedef ISystemControllerAdminCorbaDef_ptr _ptr_type;
    typedef ISystemControllerAdminCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class ModeChangeException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline ModeChangeException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ModeChangeException(const ModeChangeException&);
      ModeChangeException(const char* i_reason);
      ModeChangeException& operator=(const ModeChangeException&);
      virtual ~ModeChangeException();
      virtual void _raise() const;
      static ModeChangeException* _downcast(::CORBA::Exception*);
      static const ModeChangeException* _downcast(const ::CORBA::Exception*);
      static inline ModeChangeException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ModeChangeException;

  
  };

  class _objref_ISystemControllerAdminCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ProcessDataSeq* getProcessData();
    void shutdown(const char* hostname);
    void startProcess(const char* entityName);
    void changeAgentOperationMode(const char* entityName, ::TA_Base_Core::EOperationMode operationMode);
    void stopProcess(const char* entityName);
    void setRunParam(const char* entityName, const ::TA_Base_Core::RunParam& param);
    AgentStatusEnum getAgentsStatus();
    void notifyStandbyAgent(const char* entityName, const char* hostName);

    inline _objref_ISystemControllerAdminCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_ISystemControllerAdminCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ISystemControllerAdminCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ISystemControllerAdminCorbaDef(const _objref_ISystemControllerAdminCorbaDef&);
    _objref_ISystemControllerAdminCorbaDef& operator = (const _objref_ISystemControllerAdminCorbaDef&);
    // not implemented

    friend class ISystemControllerAdminCorbaDef;
  };

  class _pof_ISystemControllerAdminCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ISystemControllerAdminCorbaDef() : _OMNI_NS(proxyObjectFactory)(ISystemControllerAdminCorbaDef::_PD_repoId) {}
    virtual ~_pof_ISystemControllerAdminCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ISystemControllerAdminCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ISystemControllerAdminCorbaDef();

    virtual ProcessDataSeq* getProcessData() = 0;
    virtual void shutdown(const char* hostname) = 0;
    virtual void startProcess(const char* entityName) = 0;
    virtual void changeAgentOperationMode(const char* entityName, ::TA_Base_Core::EOperationMode operationMode) = 0;
    virtual void stopProcess(const char* entityName) = 0;
    virtual void setRunParam(const char* entityName, const ::TA_Base_Core::RunParam& param) = 0;
    virtual AgentStatusEnum getAgentsStatus() = 0;
    virtual void notifyStandbyAgent(const char* entityName, const char* hostName) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ISystemControllerAdminCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

  class ISystemControllerAdminCorbaDef :
    public virtual TA_Base_Core::_impl_ISystemControllerAdminCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ISystemControllerAdminCorbaDef();

    inline ::TA_Base_Core::ISystemControllerAdminCorbaDef_ptr _this() {
      return (::TA_Base_Core::ISystemControllerAdminCorbaDef_ptr) _do_this(::TA_Base_Core::ISystemControllerAdminCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ISystemControllerAdminCorbaDef::ModeChangeException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ISystemControllerAdminCorbaDef::ModeChangeException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ISystemControllerAdminCorbaDef::ModeChangeException*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Core::ISystemControllerAdminCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::ISystemControllerAdminCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ISystemControllerAdminCorbaDef_ptr& _s);



inline void
TA_Base_Core::ISystemControllerAdminCorbaDef::_marshalObjRef(::TA_Base_Core::ISystemControllerAdminCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ISystemControllerAdminCorbaDef
#endif

#endif  // __ISystemControllerAdminCorbaDef_hh__

