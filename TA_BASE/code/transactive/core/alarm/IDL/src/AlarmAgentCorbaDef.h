// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __AlarmAgentCorbaDef_hh__
#define __AlarmAgentCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
#endif



#ifndef __GenericMessageCorbaDef_hh_EXTERNAL_GUARD__
#define __GenericMessageCorbaDef_hh_EXTERNAL_GUARD__
#include <GenericMessageCorbaDef.h>
#endif
#ifndef __AlarmUpdateCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmUpdateCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmUpdateCorbaDef.h>
#endif
#ifndef __AlarmMessageCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmMessageCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmMessageCorbaDef.h>
#endif
#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __AlarmAgentQueueItemCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmAgentQueueItemCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmAgentQueueItemCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _core_attr const char * ALARM_AGENT_NAME;

#ifndef __TA__Base__Core_mAlarmAgentCorbaDef__
#define __TA__Base__Core_mAlarmAgentCorbaDef__

  class AlarmAgentCorbaDef;
  class _objref_AlarmAgentCorbaDef;
  class _impl_AlarmAgentCorbaDef;
  
  typedef _objref_AlarmAgentCorbaDef* AlarmAgentCorbaDef_ptr;
  typedef AlarmAgentCorbaDef_ptr AlarmAgentCorbaDefRef;

  class AlarmAgentCorbaDef_Helper {
  public:
    typedef AlarmAgentCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_AlarmAgentCorbaDef, AlarmAgentCorbaDef_Helper> AlarmAgentCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_AlarmAgentCorbaDef,AlarmAgentCorbaDef_Helper > AlarmAgentCorbaDef_out;

#endif

  // interface AlarmAgentCorbaDef
  class AlarmAgentCorbaDef {
  public:
    // Declarations for this interface type.
    typedef AlarmAgentCorbaDef_ptr _ptr_type;
    typedef AlarmAgentCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class AlarmException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline AlarmException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AlarmException(const AlarmException&);
      AlarmException(const char* i_reason);
      AlarmException& operator=(const AlarmException&);
      virtual ~AlarmException();
      virtual void _raise() const;
      static AlarmException* _downcast(::CORBA::Exception*);
      static const AlarmException* _downcast(const ::CORBA::Exception*);
      static inline AlarmException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmException;

    class NoAlarmException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline NoAlarmException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      NoAlarmException(const NoAlarmException&);
      NoAlarmException(const char* i_reason);
      NoAlarmException& operator=(const NoAlarmException&);
      virtual ~NoAlarmException();
      virtual void _raise() const;
      static NoAlarmException* _downcast(::CORBA::Exception*);
      static const NoAlarmException* _downcast(const ::CORBA::Exception*);
      static inline NoAlarmException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_NoAlarmException;

    class AlarmCapacityExceededException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline AlarmCapacityExceededException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AlarmCapacityExceededException(const AlarmCapacityExceededException&);
      AlarmCapacityExceededException(const char* i_reason);
      AlarmCapacityExceededException& operator=(const AlarmCapacityExceededException&);
      virtual ~AlarmCapacityExceededException();
      virtual void _raise() const;
      static AlarmCapacityExceededException* _downcast(::CORBA::Exception*);
      static const AlarmCapacityExceededException* _downcast(const ::CORBA::Exception*);
      static inline AlarmCapacityExceededException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmCapacityExceededException;

  
  };

  class _objref_AlarmAgentCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void submitAlarm(::CORBA::Boolean p_multipleOccurancesAllowed, const ::TA_Base_Core::AlarmDetailCorbaDef& p_alarm);
    void updateComments(const char* p_description, const char* p_alarmID, const char* p_sessionID);
    void acknowledge(const char* p_alarmID, const char* p_sessionId);
    void acknowledgeSeq(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId);
    void operatorAcknowledgeSeq(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId);
    StringSequence* operatorAcknowledgeSeqEx(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId);
    void closeAlarmById(const char* p_alarmID, const char* p_closeValue, ::CORBA::ULong p_closeTime);
    void closeAlarmByTypeAndKey(::CORBA::ULong p_alarmType, ::CORBA::ULong p_entityKey, const char* p_closeValue, ::CORBA::ULong p_closeTime);
    void operatorCloseAlarm(const char* p_alarmID, const char* p_sessionId);
    void operatorCloseAlarmSequence(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId);
    StringSequence* operatorCloseAlarmSequenceEx(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId);
    AlarmSequence* getAlarms();
    AlarmAgentQueueItemSequence* getQueueUpdates();
    AlarmSequence* getEntityAlarms(::CORBA::ULong p_entityKey);
    AlarmDetailCorbaDef* getMostRecentActiveAlarmForEntity(::CORBA::ULong p_entityKey);
    AlarmDetailCorbaDef* getActiveAlarmForEntityOfType(::CORBA::ULong p_alarmTypeKey, ::CORBA::ULong p_entityKey);
    AlarmDetailCorbaDef* getAlarm(const char* alarmId);
    void setMmsState(const char* p_alarmId, ::TA_Base_Core::MmsStateType p_mmsState);
    void planAssociatedWithAlarmWasRun(const char* p_alarmId, const char* p_sessionID);
    void planAssociatedWithAlarmWasPostponed(const char* p_alarmId, const char* p_sessionID);

    inline _objref_AlarmAgentCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_AlarmAgentCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_AlarmAgentCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_AlarmAgentCorbaDef(const _objref_AlarmAgentCorbaDef&);
    _objref_AlarmAgentCorbaDef& operator = (const _objref_AlarmAgentCorbaDef&);
    // not implemented

    friend class AlarmAgentCorbaDef;
  };

  class _pof_AlarmAgentCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_AlarmAgentCorbaDef() : _OMNI_NS(proxyObjectFactory)(AlarmAgentCorbaDef::_PD_repoId) {}
    virtual ~_pof_AlarmAgentCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_AlarmAgentCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_AlarmAgentCorbaDef();

    virtual void submitAlarm(::CORBA::Boolean p_multipleOccurancesAllowed, const ::TA_Base_Core::AlarmDetailCorbaDef& p_alarm) = 0;
    virtual void updateComments(const char* p_description, const char* p_alarmID, const char* p_sessionID) = 0;
    virtual void acknowledge(const char* p_alarmID, const char* p_sessionId) = 0;
    virtual void acknowledgeSeq(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId) = 0;
    virtual void operatorAcknowledgeSeq(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId) = 0;
    virtual StringSequence* operatorAcknowledgeSeqEx(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId) = 0;
    virtual void closeAlarmById(const char* p_alarmID, const char* p_closeValue, ::CORBA::ULong p_closeTime) = 0;
    virtual void closeAlarmByTypeAndKey(::CORBA::ULong p_alarmType, ::CORBA::ULong p_entityKey, const char* p_closeValue, ::CORBA::ULong p_closeTime) = 0;
    virtual void operatorCloseAlarm(const char* p_alarmID, const char* p_sessionId) = 0;
    virtual void operatorCloseAlarmSequence(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId) = 0;
    virtual StringSequence* operatorCloseAlarmSequenceEx(const ::TA_Base_Core::StringSequence& p_alarms, const char* p_sessionId) = 0;
    virtual AlarmSequence* getAlarms() = 0;
    virtual AlarmAgentQueueItemSequence* getQueueUpdates() = 0;
    virtual AlarmSequence* getEntityAlarms(::CORBA::ULong p_entityKey) = 0;
    virtual AlarmDetailCorbaDef* getMostRecentActiveAlarmForEntity(::CORBA::ULong p_entityKey) = 0;
    virtual AlarmDetailCorbaDef* getActiveAlarmForEntityOfType(::CORBA::ULong p_alarmTypeKey, ::CORBA::ULong p_entityKey) = 0;
    virtual AlarmDetailCorbaDef* getAlarm(const char* alarmId) = 0;
    virtual void setMmsState(const char* p_alarmId, ::TA_Base_Core::MmsStateType p_mmsState) = 0;
    virtual void planAssociatedWithAlarmWasRun(const char* p_alarmId, const char* p_sessionID) = 0;
    virtual void planAssociatedWithAlarmWasPostponed(const char* p_alarmId, const char* p_sessionID) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmAgentCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

  class AlarmAgentCorbaDef :
    public virtual TA_Base_Core::_impl_AlarmAgentCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~AlarmAgentCorbaDef();

    inline ::TA_Base_Core::AlarmAgentCorbaDef_ptr _this() {
      return (::TA_Base_Core::AlarmAgentCorbaDef_ptr) _do_this(::TA_Base_Core::AlarmAgentCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::AlarmException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::AlarmException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::AlarmException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::NoAlarmException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::NoAlarmException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::NoAlarmException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::AlarmCapacityExceededException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::AlarmCapacityExceededException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmAgentCorbaDef::AlarmCapacityExceededException*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmAgentCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmAgentCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmAgentCorbaDef_ptr& _s);



inline void
TA_Base_Core::AlarmAgentCorbaDef::_marshalObjRef(::TA_Base_Core::AlarmAgentCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmAgentCorbaDef
#endif

#endif  // __AlarmAgentCorbaDef_hh__

