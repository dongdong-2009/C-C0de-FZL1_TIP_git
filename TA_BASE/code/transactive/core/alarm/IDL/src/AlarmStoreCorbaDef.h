// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __AlarmStoreCorbaDef_hh__
#define __AlarmStoreCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
#endif



#ifndef __GenericMessageCorbaDef_hh_EXTERNAL_GUARD__
#define __GenericMessageCorbaDef_hh_EXTERNAL_GUARD__
#include <GenericMessageCorbaDef.h>
#endif
#ifndef __AlarmUpdateCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmUpdateCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmUpdateCorbaDef.h>
#endif
#ifndef __AlarmMessageCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmMessageCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmMessageCorbaDef.h>
#endif
#ifndef __AlarmStoreCallbackCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmStoreCallbackCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmStoreCallbackCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

#ifndef __TA__Base__Core_mIAlarmStoreCorbaDef__
#define __TA__Base__Core_mIAlarmStoreCorbaDef__

  class IAlarmStoreCorbaDef;
  class _objref_IAlarmStoreCorbaDef;
  class _impl_IAlarmStoreCorbaDef;
  
  typedef _objref_IAlarmStoreCorbaDef* IAlarmStoreCorbaDef_ptr;
  typedef IAlarmStoreCorbaDef_ptr IAlarmStoreCorbaDefRef;

  class IAlarmStoreCorbaDef_Helper {
  public:
    typedef IAlarmStoreCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IAlarmStoreCorbaDef, IAlarmStoreCorbaDef_Helper> IAlarmStoreCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IAlarmStoreCorbaDef,IAlarmStoreCorbaDef_Helper > IAlarmStoreCorbaDef_out;

#endif

  // interface IAlarmStoreCorbaDef
  class IAlarmStoreCorbaDef {
  public:
    // Declarations for this interface type.
    typedef IAlarmStoreCorbaDef_ptr _ptr_type;
    typedef IAlarmStoreCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _core_attr const ::CORBA::UShort DEFAULT_ALARM_STORE_PORT _init_in_cldecl_( = 7777 );

    static _core_attr const char * DEFAULT_ALARM_STORE_NAME;

    class AlarmNotFoundException : public ::CORBA::UserException {
    public:
      
      

      inline AlarmNotFoundException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AlarmNotFoundException(const AlarmNotFoundException&);
      
      AlarmNotFoundException& operator=(const AlarmNotFoundException&);
      virtual ~AlarmNotFoundException();
      virtual void _raise() const;
      static AlarmNotFoundException* _downcast(::CORBA::Exception*);
      static const AlarmNotFoundException* _downcast(const ::CORBA::Exception*);
      static inline AlarmNotFoundException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmNotFoundException;

    class AlarmIndexNotFoundException : public ::CORBA::UserException {
    public:
      
      

      inline AlarmIndexNotFoundException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AlarmIndexNotFoundException(const AlarmIndexNotFoundException&);
      
      AlarmIndexNotFoundException& operator=(const AlarmIndexNotFoundException&);
      virtual ~AlarmIndexNotFoundException();
      virtual void _raise() const;
      static AlarmIndexNotFoundException* _downcast(::CORBA::Exception*);
      static const AlarmIndexNotFoundException* _downcast(const ::CORBA::Exception*);
      static inline AlarmIndexNotFoundException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmIndexNotFoundException;

    enum FilterType { FILTER_PROFILE, FILTER_ALARM_TYPE, FILTER_ALARM_TIME, FILTER_ALARM_TIME_RANGE, FILTER_ASSOCIATED_ENTITY_KEY, FILTER_ASSOCIATED_ENTITY_NAME, FILTER_LOCATION, FILTER_OPERATOR, FILTER_SEVERITY, FILTER_STATE, FILTER_SUBSYSTEM, FILTER_ASSET_NAME, FILTER_DESCRIPTION, FILTER_OMTYPE, FILTER_SUBSYSTEMTYPE, FILTER_SYSTEMTYPE /*, __max_FilterType=0xffffffff */ };
    typedef FilterType& FilterType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FilterType;

    enum FilterComparison { COMPARE_LESS_THAN, COMPARE_LESS_THAN_EQUAL, COMPARE_EQUAL, COMPARE_GREATER_THAN, COMPARE_GREATER_THAN_EQUAL, COMPARE_NOT_EQUAL, COMPARE_CONTAINS, COMPARE_RANGE_INCLUSIVE, COMPARE_RANGE_EXCLUSIVE /*, __max_FilterComparison=0xffffffff */ };
    typedef FilterComparison& FilterComparison_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FilterComparison;

    enum EAlarmState { STATE_ALL_OPEN, STATE_OPEN_UNACKED, STATE_OPEN_ACKED, STATE_CLOSED, STATE_ALL_UNACKED, STATE_ANY /*, __max_EAlarmState=0xffffffff */ };
    typedef EAlarmState& EAlarmState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EAlarmState;

    enum EAlarmOMType { OMTYPE_OPERATION, OMTYPE_MAINTENANCE, OMTYPE_BOTH, OMTYPE_ALL /*, __max_EAlarmOMType=0xffffffff */ };
    typedef EAlarmOMType& EAlarmOMType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EAlarmOMType;

    struct ParameterDateRange {
      typedef _CORBA_ConstrType_Fix_Var<ParameterDateRange> _var_type;

      
      ::CORBA::ULong paramDate1;

      ::CORBA::ULong paramDate2;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ParameterDateRange::_var_type ParameterDateRange_var;

    typedef ParameterDateRange& ParameterDateRange_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ParameterDateRange;

    class FilterParameters {
    public:

      typedef _CORBA_ConstrType_Variable_Var<FilterParameters> _var_type;

      

      FilterParameters(): _pd__initialised(0) {
        
      }
      
      FilterParameters(const FilterParameters& _value) {
        _pd__initialised = _value._pd__initialised;
        switch(_value._pd__d) {
          case FILTER_PROFILE: paramText(_value._pd_paramText); break;

          case FILTER_ASSOCIATED_ENTITY_NAME: paramText(_value._pd_paramText); break;

          case FILTER_ASSET_NAME: paramText(_value._pd_paramText); break;

          case FILTER_DESCRIPTION: paramText(_value._pd_paramText); break;

          case FILTER_OPERATOR: paramText(_value._pd_paramText); break;

          case FILTER_SUBSYSTEMTYPE: paramText(_value._pd_paramText); break;

          case FILTER_SYSTEMTYPE: paramText(_value._pd_paramText); break;

          case FILTER_SUBSYSTEM: paramULong(_value._pd_paramULong); break;

          case FILTER_ALARM_TIME: paramULong(_value._pd_paramULong); break;

          case FILTER_LOCATION: paramULong(_value._pd_paramULong); break;

          case FILTER_ASSOCIATED_ENTITY_KEY: paramULong(_value._pd_paramULong); break;

          case FILTER_SEVERITY: paramULong(_value._pd_paramULong); break;

          case FILTER_ALARM_TYPE: paramULong(_value._pd_paramULong); break;

          case FILTER_ALARM_TIME_RANGE: paramDateRange(_value._pd_paramDateRange); break;

          case FILTER_STATE: paramState(_value._pd_paramState); break;

          case FILTER_OMTYPE: paramOMType(_value._pd_paramOMType); break;

            default: break;

        
        }
        _pd__d = _value._pd__d;
    
      }

      ~FilterParameters() {}

      FilterParameters& operator=(const FilterParameters& _value) {
        _pd__initialised = _value._pd__initialised;
        switch(_value._pd__d) {
          case FILTER_PROFILE: paramText(_value._pd_paramText); break;

          case FILTER_ASSOCIATED_ENTITY_NAME: paramText(_value._pd_paramText); break;

          case FILTER_ASSET_NAME: paramText(_value._pd_paramText); break;

          case FILTER_DESCRIPTION: paramText(_value._pd_paramText); break;

          case FILTER_OPERATOR: paramText(_value._pd_paramText); break;

          case FILTER_SUBSYSTEMTYPE: paramText(_value._pd_paramText); break;

          case FILTER_SYSTEMTYPE: paramText(_value._pd_paramText); break;

          case FILTER_SUBSYSTEM: paramULong(_value._pd_paramULong); break;

          case FILTER_ALARM_TIME: paramULong(_value._pd_paramULong); break;

          case FILTER_LOCATION: paramULong(_value._pd_paramULong); break;

          case FILTER_ASSOCIATED_ENTITY_KEY: paramULong(_value._pd_paramULong); break;

          case FILTER_SEVERITY: paramULong(_value._pd_paramULong); break;

          case FILTER_ALARM_TYPE: paramULong(_value._pd_paramULong); break;

          case FILTER_ALARM_TIME_RANGE: paramDateRange(_value._pd_paramDateRange); break;

          case FILTER_STATE: paramState(_value._pd_paramState); break;

          case FILTER_OMTYPE: paramOMType(_value._pd_paramOMType); break;

            default: break;

        
        }
        _pd__d = _value._pd__d;
    
        return *this;
      }

      FilterType _d() const { return _pd__d;}
      void _d(FilterType _value){
        // illegal to set discriminator before making a member active
        if (!_pd__initialised)
          OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

        if (_value == _pd__d) return; // no change

        switch (_pd__d){
          case FILTER_PROFILE:
          case FILTER_ASSOCIATED_ENTITY_NAME:
          case FILTER_ASSET_NAME:
          case FILTER_DESCRIPTION:
          case FILTER_OPERATOR:
          case FILTER_SUBSYSTEMTYPE:
          case FILTER_SYSTEMTYPE:
            switch (_value){

              case FILTER_PROFILE: _pd__d = FILTER_PROFILE; return;
              case FILTER_ASSOCIATED_ENTITY_NAME: _pd__d = FILTER_ASSOCIATED_ENTITY_NAME; return;
              case FILTER_ASSET_NAME: _pd__d = FILTER_ASSET_NAME; return;
              case FILTER_DESCRIPTION: _pd__d = FILTER_DESCRIPTION; return;
              case FILTER_OPERATOR: _pd__d = FILTER_OPERATOR; return;
              case FILTER_SUBSYSTEMTYPE: _pd__d = FILTER_SUBSYSTEMTYPE; return;
              case FILTER_SYSTEMTYPE: _pd__d = FILTER_SYSTEMTYPE; return;
              default: goto fail;
            }

          case FILTER_SUBSYSTEM:
          case FILTER_ALARM_TIME:
          case FILTER_LOCATION:
          case FILTER_ASSOCIATED_ENTITY_KEY:
          case FILTER_SEVERITY:
          case FILTER_ALARM_TYPE:
            switch (_value){

              case FILTER_SUBSYSTEM: _pd__d = FILTER_SUBSYSTEM; return;
              case FILTER_ALARM_TIME: _pd__d = FILTER_ALARM_TIME; return;
              case FILTER_LOCATION: _pd__d = FILTER_LOCATION; return;
              case FILTER_ASSOCIATED_ENTITY_KEY: _pd__d = FILTER_ASSOCIATED_ENTITY_KEY; return;
              case FILTER_SEVERITY: _pd__d = FILTER_SEVERITY; return;
              case FILTER_ALARM_TYPE: _pd__d = FILTER_ALARM_TYPE; return;
              default: goto fail;
            }

          case FILTER_ALARM_TIME_RANGE: goto fail;
          case FILTER_STATE: goto fail;
          case FILTER_OMTYPE: goto fail;
          default: goto fail;

        };
        

        fail:
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


    
      }

      

      const char * paramText () const { return (const char*) _pd_paramText; }
      void paramText(char* _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_ASSOCIATED_ENTITY_NAME;
        _pd__default = 0;
        _pd_paramText = _value;
      }
      void paramText(const char*  _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_ASSOCIATED_ENTITY_NAME;
        _pd__default = 0;
        _pd_paramText = _value;
      }
      void paramText(const ::CORBA::String_var& _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_ASSOCIATED_ENTITY_NAME;
        _pd__default = 0;
        _pd_paramText = _value;
      }
      void paramText(const ::CORBA::String_member& _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_ASSOCIATED_ENTITY_NAME;
        _pd__default = 0;
        _pd_paramText = _value;
      }

      ::CORBA::ULong paramULong () const { return _pd_paramULong; }
      void paramULong (::CORBA::ULong  _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_ALARM_TIME;
        _pd__default = 0;
        _pd_paramULong = _value;
      }

      const ParameterDateRange &paramDateRange () const { return _pd_paramDateRange; }
      ParameterDateRange &paramDateRange () { return _pd_paramDateRange; }
      void paramDateRange (const ParameterDateRange& _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_ALARM_TIME_RANGE;
        _pd__default = 0;
        _pd_paramDateRange = _value;
      }

      EAlarmState paramState () const { return _pd_paramState; }
      void paramState (EAlarmState  _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_STATE;
        _pd__default = 0;
        _pd_paramState = _value;
      }

      EAlarmOMType paramOMType () const { return _pd_paramOMType; }
      void paramOMType (EAlarmOMType  _value) {
        _pd__initialised = 1;
        _pd__d = FILTER_OMTYPE;
        _pd__default = 0;
        _pd_paramOMType = _value;
      }

    
      
      void operator>>= (cdrStream&) const;
      void operator<<= (cdrStream&);

    private:
      FilterType _pd__d;
      _CORBA_Boolean _pd__default;
      _CORBA_Boolean _pd__initialised;

      union {
        ::CORBA::ULong _pd_paramULong;

        EAlarmState _pd_paramState;

        EAlarmOMType _pd_paramOMType;


      };

    
      ::CORBA::String_member _pd_paramText;

      ParameterDateRange _pd_paramDateRange;

    
    };

    typedef FilterParameters::_var_type FilterParameters_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< FilterParameters,FilterParameters_var > FilterParameters_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FilterParameters;

    struct FilterEntry {
      typedef _CORBA_ConstrType_Variable_Var<FilterEntry> _var_type;

      
      FilterComparison compareOp;

      FilterParameters parameters;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef FilterEntry::_var_type FilterEntry_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< FilterEntry,FilterEntry_var > FilterEntry_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FilterEntry;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FilterInfo;

    class FilterInfo_var;

    class FilterInfo : public _CORBA_Unbounded_Sequence< FilterEntry >  {
    public:
      typedef FilterInfo_var _var_type;
      inline FilterInfo() {}
      inline FilterInfo(const FilterInfo& _s)
        : _CORBA_Unbounded_Sequence< FilterEntry > (_s) {}

      inline FilterInfo(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< FilterEntry > (_max) {}
      inline FilterInfo(_CORBA_ULong _max, _CORBA_ULong _len, FilterEntry* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< FilterEntry > (_max, _len, _val, _rel) {}

    

      inline FilterInfo& operator = (const FilterInfo& _s) {
        _CORBA_Unbounded_Sequence< FilterEntry > ::operator=(_s);
        return *this;
      }
    };

    class FilterInfo_out;

    class FilterInfo_var {
    public:
      inline FilterInfo_var() : _pd_seq(0) {}
      inline FilterInfo_var(FilterInfo* _s) : _pd_seq(_s) {}
      inline FilterInfo_var(const FilterInfo_var& _s) {
        if( _s._pd_seq )  _pd_seq = new FilterInfo(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~FilterInfo_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline FilterInfo_var& operator = (FilterInfo* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline FilterInfo_var& operator = (const FilterInfo_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new FilterInfo;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline FilterEntry& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline FilterInfo* operator -> () { return _pd_seq; }
      inline const FilterInfo* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator FilterInfo& () const { return *_pd_seq; }
#else
      inline operator const FilterInfo& () const { return *_pd_seq; }
      inline operator FilterInfo& () { return *_pd_seq; }
#endif
        
      inline const FilterInfo& in() const { return *_pd_seq; }
      inline FilterInfo&       inout()    { return *_pd_seq; }
      inline FilterInfo*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline FilterInfo* _retn() { FilterInfo* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class FilterInfo_out;
      
    private:
      FilterInfo* _pd_seq;
    };

    class FilterInfo_out {
    public:
      inline FilterInfo_out(FilterInfo*& _s) : _data(_s) { _data = 0; }
      inline FilterInfo_out(FilterInfo_var& _s)
        : _data(_s._pd_seq) { _s = (FilterInfo*) 0; }
      inline FilterInfo_out(const FilterInfo_out& _s) : _data(_s._data) {}
      inline FilterInfo_out& operator = (const FilterInfo_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline FilterInfo_out& operator = (FilterInfo* _s) {
        _data = _s;
        return *this;
      }
      inline operator FilterInfo*&()  { return _data; }
      inline FilterInfo*& ptr()       { return _data; }
      inline FilterInfo* operator->() { return _data; }

      inline FilterEntry& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      FilterInfo*& _data;

    private:
      FilterInfo_out();
      FilterInfo_out& operator=(const FilterInfo_var&);
    };

    class InvalidFilterException : public ::CORBA::UserException {
    public:
      
      FilterEntry filter;

    

      inline InvalidFilterException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      InvalidFilterException(const InvalidFilterException&);
      InvalidFilterException(const FilterEntry& i_filter);
      InvalidFilterException& operator=(const InvalidFilterException&);
      virtual ~InvalidFilterException();
      virtual void _raise() const;
      static InvalidFilterException* _downcast(::CORBA::Exception*);
      static const InvalidFilterException* _downcast(const ::CORBA::Exception*);
      static inline InvalidFilterException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidFilterException;

    enum SortType { SORT_OPEN_CLOSE, SORT_ACK_NOT_ACK, SORT_ALARM_TYPE, SORT_LOCATION, SORT_TIME, SORT_DESCRIPTION, SORT_ENTITY_NAME, SORT_SUB_SYSTEM_KEY, SORT_ACK_TIME, SORT_ACK_BY, SORT_SEVERITY, SORT_ASSET_NAME, SORT_VALUE, SORT_MMS, SORT_DSS, SORT_AVALANCHE, SORT_COMMENT /*, __max_SortType=0xffffffff */ };
    typedef SortType& SortType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SortType;

    enum SortDirection { SORT_ASCENDING, SORT_DESCENDING /*, __max_SortDirection=0xffffffff */ };
    typedef SortDirection& SortDirection_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SortDirection;

    struct SortEntry {
      typedef _CORBA_ConstrType_Fix_Var<SortEntry> _var_type;

      
      SortType type;

      SortDirection direction;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SortEntry::_var_type SortEntry_var;

    typedef SortEntry& SortEntry_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SortEntry;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SortInfo;

    class SortInfo_var;

    class SortInfo : public _CORBA_Unbounded_Sequence< SortEntry >  {
    public:
      typedef SortInfo_var _var_type;
      inline SortInfo() {}
      inline SortInfo(const SortInfo& _s)
        : _CORBA_Unbounded_Sequence< SortEntry > (_s) {}

      inline SortInfo(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< SortEntry > (_max) {}
      inline SortInfo(_CORBA_ULong _max, _CORBA_ULong _len, SortEntry* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< SortEntry > (_max, _len, _val, _rel) {}

    

      inline SortInfo& operator = (const SortInfo& _s) {
        _CORBA_Unbounded_Sequence< SortEntry > ::operator=(_s);
        return *this;
      }
    };

    class SortInfo_out;

    class SortInfo_var {
    public:
      inline SortInfo_var() : _pd_seq(0) {}
      inline SortInfo_var(SortInfo* _s) : _pd_seq(_s) {}
      inline SortInfo_var(const SortInfo_var& _s) {
        if( _s._pd_seq )  _pd_seq = new SortInfo(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~SortInfo_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline SortInfo_var& operator = (SortInfo* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline SortInfo_var& operator = (const SortInfo_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new SortInfo;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline SortEntry& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline SortInfo* operator -> () { return _pd_seq; }
      inline const SortInfo* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator SortInfo& () const { return *_pd_seq; }
#else
      inline operator const SortInfo& () const { return *_pd_seq; }
      inline operator SortInfo& () { return *_pd_seq; }
#endif
        
      inline const SortInfo& in() const { return *_pd_seq; }
      inline SortInfo&       inout()    { return *_pd_seq; }
      inline SortInfo*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline SortInfo* _retn() { SortInfo* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class SortInfo_out;
      
    private:
      SortInfo* _pd_seq;
    };

    class SortInfo_out {
    public:
      inline SortInfo_out(SortInfo*& _s) : _data(_s) { _data = 0; }
      inline SortInfo_out(SortInfo_var& _s)
        : _data(_s._pd_seq) { _s = (SortInfo*) 0; }
      inline SortInfo_out(const SortInfo_out& _s) : _data(_s._data) {}
      inline SortInfo_out& operator = (const SortInfo_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline SortInfo_out& operator = (SortInfo* _s) {
        _data = _s;
        return *this;
      }
      inline operator SortInfo*&()  { return _data; }
      inline SortInfo*& ptr()       { return _data; }
      inline SortInfo* operator->() { return _data; }

      inline SortEntry& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      SortInfo*& _data;

    private:
      SortInfo_out();
      SortInfo_out& operator=(const SortInfo_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_LocationList;

    class LocationList_var;

    class LocationList : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef LocationList_var _var_type;
      inline LocationList() {}
      inline LocationList(const LocationList& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline LocationList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline LocationList(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline LocationList& operator = (const LocationList& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class LocationList_out;

    class LocationList_var {
    public:
      inline LocationList_var() : _pd_seq(0) {}
      inline LocationList_var(LocationList* _s) : _pd_seq(_s) {}
      inline LocationList_var(const LocationList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new LocationList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~LocationList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline LocationList_var& operator = (LocationList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline LocationList_var& operator = (const LocationList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new LocationList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline LocationList* operator -> () { return _pd_seq; }
      inline const LocationList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator LocationList& () const { return *_pd_seq; }
#else
      inline operator const LocationList& () const { return *_pd_seq; }
      inline operator LocationList& () { return *_pd_seq; }
#endif
        
      inline const LocationList& in() const { return *_pd_seq; }
      inline LocationList&       inout()    { return *_pd_seq; }
      inline LocationList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline LocationList* _retn() { LocationList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class LocationList_out;
      
    private:
      LocationList* _pd_seq;
    };

    class LocationList_out {
    public:
      inline LocationList_out(LocationList*& _s) : _data(_s) { _data = 0; }
      inline LocationList_out(LocationList_var& _s)
        : _data(_s._pd_seq) { _s = (LocationList*) 0; }
      inline LocationList_out(const LocationList_out& _s) : _data(_s._data) {}
      inline LocationList_out& operator = (const LocationList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline LocationList_out& operator = (LocationList* _s) {
        _data = _s;
        return *this;
      }
      inline operator LocationList*&()  { return _data; }
      inline LocationList*& ptr()       { return _data; }
      inline LocationList* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      LocationList*& _data;

    private:
      LocationList_out();
      LocationList_out& operator=(const LocationList_var&);
    };

    struct IndexInfo {
      typedef _CORBA_ConstrType_Fix_Var<IndexInfo> _var_type;

      
      ::CORBA::ULong totalAlarms;

      ::CORBA::ULong unackAlarms;

      ::CORBA::ULong highestSeverity;

      ::CORBA::ULong dutyAlarmVersion;

      MillisecondTime earliestSourceTime;

      MillisecondTime latestSourceTime;

      ::CORBA::Boolean exceededMaxDisplay;

      ::CORBA::Boolean isLoadingAlarms;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef IndexInfo::_var_type IndexInfo_var;

    typedef IndexInfo& IndexInfo_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_IndexInfo;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_IndexReference;

    typedef ::CORBA::Long IndexReference;
    typedef ::CORBA::Long_out IndexReference_out;

  
  };

  class _objref_IAlarmStoreCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void setStoreMonitorAllLocations();
    void setStoreMonitorLocation(::CORBA::ULong location);
    void setStoreMonitorLocations(const ::TA_Base_Core::IAlarmStoreCorbaDef::LocationList& locations);
    void setSessionId(const char* sessionId);
    IAlarmStoreCorbaDef::IndexReference createIndex(const ::TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo& filter, const ::TA_Base_Core::IAlarmStoreCorbaDef::SortInfo& sort, ::CORBA::ULong cs_pos, ::CORBA::Boolean isHighestSeverityNeeded, ::CORBA::Boolean isDefault);
    void setStorePreFilter(const ::TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo& filter);
    void newAlarm(const ::TA_Base_Core::AlarmDetailCorbaDef& alarmDetail);
    void updateAlarm(const ::TA_Base_Core::AlarmUpdateCorbaDef& alarmUpdate);
    ::CORBA::Long getAliveTimeStamp();
    AlarmDetailCorbaDef* getAlarm(const char* alarmID);
    void RemoveAlarms(const ::TA_Base_Core::StringSequence& p_alarms);

    inline _objref_IAlarmStoreCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_IAlarmStoreCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IAlarmStoreCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IAlarmStoreCorbaDef(const _objref_IAlarmStoreCorbaDef&);
    _objref_IAlarmStoreCorbaDef& operator = (const _objref_IAlarmStoreCorbaDef&);
    // not implemented

    friend class IAlarmStoreCorbaDef;
  };

  class _pof_IAlarmStoreCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IAlarmStoreCorbaDef() : _OMNI_NS(proxyObjectFactory)(IAlarmStoreCorbaDef::_PD_repoId) {}
    virtual ~_pof_IAlarmStoreCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IAlarmStoreCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IAlarmStoreCorbaDef();

    virtual void setStoreMonitorAllLocations() = 0;
    virtual void setStoreMonitorLocation(::CORBA::ULong location) = 0;
    virtual void setStoreMonitorLocations(const ::TA_Base_Core::IAlarmStoreCorbaDef::LocationList& locations) = 0;
    virtual void setSessionId(const char* sessionId) = 0;
    virtual IAlarmStoreCorbaDef::IndexReference createIndex(const ::TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo& filter, const ::TA_Base_Core::IAlarmStoreCorbaDef::SortInfo& sort, ::CORBA::ULong cs_pos, ::CORBA::Boolean isHighestSeverityNeeded, ::CORBA::Boolean isDefault) = 0;
    virtual void setStorePreFilter(const ::TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo& filter) = 0;
    virtual void newAlarm(const ::TA_Base_Core::AlarmDetailCorbaDef& alarmDetail) = 0;
    virtual void updateAlarm(const ::TA_Base_Core::AlarmUpdateCorbaDef& alarmUpdate) = 0;
    virtual ::CORBA::Long getAliveTimeStamp() = 0;
    virtual AlarmDetailCorbaDef* getAlarm(const char* alarmID) = 0;
    virtual void RemoveAlarms(const ::TA_Base_Core::StringSequence& p_alarms) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IAlarmStoreCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

  class IAlarmStoreCorbaDef :
    public virtual TA_Base_Core::_impl_IAlarmStoreCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IAlarmStoreCorbaDef();

    inline ::TA_Base_Core::IAlarmStoreCorbaDef_ptr _this() {
      return (::TA_Base_Core::IAlarmStoreCorbaDef_ptr) _do_this(::TA_Base_Core::IAlarmStoreCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::AlarmNotFoundException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::AlarmNotFoundException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::AlarmNotFoundException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::AlarmIndexNotFoundException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::AlarmIndexNotFoundException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::AlarmIndexNotFoundException*& _sp);

inline void operator >>=(TA_Base_Core::IAlarmStoreCorbaDef::FilterType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::IAlarmStoreCorbaDef::FilterType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::IAlarmStoreCorbaDef::FILTER_SYSTEMTYPE) {
    _e = (TA_Base_Core::IAlarmStoreCorbaDef::FilterType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterType& _s);

inline void operator >>=(TA_Base_Core::IAlarmStoreCorbaDef::FilterComparison _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::IAlarmStoreCorbaDef::FilterComparison& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::IAlarmStoreCorbaDef::COMPARE_RANGE_EXCLUSIVE) {
    _e = (TA_Base_Core::IAlarmStoreCorbaDef::FilterComparison) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterComparison _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterComparison& _s);

inline void operator >>=(TA_Base_Core::IAlarmStoreCorbaDef::EAlarmState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::IAlarmStoreCorbaDef::EAlarmState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::IAlarmStoreCorbaDef::STATE_ANY) {
    _e = (TA_Base_Core::IAlarmStoreCorbaDef::EAlarmState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::EAlarmState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::EAlarmState& _s);

inline void operator >>=(TA_Base_Core::IAlarmStoreCorbaDef::EAlarmOMType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::IAlarmStoreCorbaDef::EAlarmOMType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::IAlarmStoreCorbaDef::OMTYPE_ALL) {
    _e = (TA_Base_Core::IAlarmStoreCorbaDef::EAlarmOMType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::EAlarmOMType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::EAlarmOMType& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::ParameterDateRange& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::ParameterDateRange* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::ParameterDateRange*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::ParameterDateRange*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::FilterParameters& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterParameters* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::FilterParameters*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::FilterEntry& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterEntry* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterEntry*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::FilterEntry*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::FilterInfo*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::InvalidFilterException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::InvalidFilterException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::InvalidFilterException*& _sp);

inline void operator >>=(TA_Base_Core::IAlarmStoreCorbaDef::SortType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::IAlarmStoreCorbaDef::SortType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::IAlarmStoreCorbaDef::SORT_COMMENT) {
    _e = (TA_Base_Core::IAlarmStoreCorbaDef::SortType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortType& _s);

inline void operator >>=(TA_Base_Core::IAlarmStoreCorbaDef::SortDirection _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::IAlarmStoreCorbaDef::SortDirection& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::IAlarmStoreCorbaDef::SORT_DESCENDING) {
    _e = (TA_Base_Core::IAlarmStoreCorbaDef::SortDirection) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortDirection _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortDirection& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::SortEntry& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortEntry* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortEntry*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::SortEntry*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::SortInfo& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortInfo* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::SortInfo*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::SortInfo*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::LocationList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::LocationList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::LocationList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::LocationList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::IndexInfo& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::IndexInfo* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef::IndexInfo*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::IAlarmStoreCorbaDef::IndexInfo*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::IAlarmStoreCorbaDef_ptr& _s);



inline void
TA_Base_Core::IAlarmStoreCorbaDef::_marshalObjRef(::TA_Base_Core::IAlarmStoreCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmStoreCorbaDef
#endif

#endif  // __AlarmStoreCorbaDef_hh__

