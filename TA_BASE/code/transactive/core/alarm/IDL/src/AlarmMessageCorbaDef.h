// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __AlarmMessageCorbaDef_hh__
#define __AlarmMessageCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
#endif



#ifndef __GenericMessageCorbaDef_hh_EXTERNAL_GUARD__
#define __GenericMessageCorbaDef_hh_EXTERNAL_GUARD__
#include <GenericMessageCorbaDef.h>
#endif
#ifndef __AlarmUpdateCorbaDef_hh_EXTERNAL_GUARD__
#define __AlarmUpdateCorbaDef_hh_EXTERNAL_GUARD__
#include <AlarmUpdateCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

  enum AlarmMessageType { NewAlarm, UpdateAlarm, AlarmsLoadedNotificationMessage /*, __max_AlarmMessageType=0xffffffff */ };
  typedef AlarmMessageType& AlarmMessageType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmMessageType;

  enum AlarmState { AlarmClosed, AlarmOpen, AlarmSuppressed /*, __max_AlarmState=0xffffffff */ };
  typedef AlarmState& AlarmState_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmState;

  struct AlarmDetailCorbaDef {
    typedef _CORBA_ConstrType_Variable_Var<AlarmDetailCorbaDef> _var_type;

    
    MillisecondTime sourceTime;

    MillisecondTime transactiveTime;

    DateTime ackTime;

    DateTime closeTime;

    MillisecondTime displayTime;

    ::CORBA::ULong messageTypeKey;

    ::CORBA::String_member messageContext;

    ::CORBA::ULong assocEntityKey;

    ::CORBA::ULong assocEntityTypeKey;

    ::CORBA::String_member assetName;

    ::CORBA::String_member alarmID;

    ::CORBA::ULong alarmSeverity;

    ::CORBA::String_member alarmDescription;

    ::CORBA::String_member alarmParameterList;

    ::CORBA::String_member alarmAcknowledgedBy;

    ::CORBA::String_member alarmAcknowledgedSession;

    AlarmState state;

    ::CORBA::String_member alarmComments;

    ::CORBA::String_member entityName;

    ::CORBA::ULong locationKey;

    ::CORBA::ULong subsystemKey;

    ::CORBA::String_member parentAlarmID;

    ::CORBA::String_member avalancheHeadID;

    ::CORBA::Boolean isHeadOfAvalanche;

    ::CORBA::Boolean isChildOfAvalanche;

    ::CORBA::Boolean isUniqueAlarm;

    DecisionSupportStateType decisionSupportState;

    MmsStateType mmsState;

    ::CORBA::ULong messageSequenceNumber;

    ::CORBA::String_member alarmValue;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AlarmDetailCorbaDef::_var_type AlarmDetailCorbaDef_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AlarmDetailCorbaDef,AlarmDetailCorbaDef_var > AlarmDetailCorbaDef_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmDetailCorbaDef;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmsLoadedNotification;

  typedef ::CORBA::Boolean AlarmsLoadedNotification;
  typedef ::CORBA::Boolean_out AlarmsLoadedNotification_out;

  class AlarmMessageCorbaDef {
  public:

    typedef _CORBA_ConstrType_Variable_Var<AlarmMessageCorbaDef> _var_type;

    

    AlarmMessageCorbaDef(): _pd__initialised(0) {
      
    }
    
    AlarmMessageCorbaDef(const AlarmMessageCorbaDef& _value) {
      _pd__initialised = _value._pd__initialised;
      switch(_value._pd__d) {
        case NewAlarm: alarm(_value._pd_alarm); break;

        case UpdateAlarm: update(_value._pd_update); break;

        case AlarmsLoadedNotificationMessage: notification(_value._pd_notification); break;

          default: break;

      
      }
      _pd__d = _value._pd__d;
  
    }

    ~AlarmMessageCorbaDef() {}

    AlarmMessageCorbaDef& operator=(const AlarmMessageCorbaDef& _value) {
      _pd__initialised = _value._pd__initialised;
      switch(_value._pd__d) {
        case NewAlarm: alarm(_value._pd_alarm); break;

        case UpdateAlarm: update(_value._pd_update); break;

        case AlarmsLoadedNotificationMessage: notification(_value._pd_notification); break;

          default: break;

      
      }
      _pd__d = _value._pd__d;
  
      return *this;
    }

    AlarmMessageType _d() const { return _pd__d;}
    void _d(AlarmMessageType _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case NewAlarm: goto fail;
        case UpdateAlarm: goto fail;
        case AlarmsLoadedNotificationMessage: goto fail;
        default: goto fail;

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    

    const AlarmDetailCorbaDef &alarm () const { return _pd_alarm; }
    AlarmDetailCorbaDef &alarm () { return _pd_alarm; }
    void alarm (const AlarmDetailCorbaDef& _value) {
      _pd__initialised = 1;
      _pd__d = NewAlarm;
      _pd__default = 0;
      _pd_alarm = _value;
    }

    const AlarmUpdateCorbaDef &update () const { return _pd_update; }
    AlarmUpdateCorbaDef &update () { return _pd_update; }
    void update (const AlarmUpdateCorbaDef& _value) {
      _pd__initialised = 1;
      _pd__d = UpdateAlarm;
      _pd__default = 0;
      _pd_update = _value;
    }

    AlarmsLoadedNotification notification () const { return _pd_notification; }
    void notification (AlarmsLoadedNotification  _value) {
      _pd__initialised = 1;
      _pd__d = AlarmsLoadedNotificationMessage;
      _pd__default = 0;
      _pd_notification = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    AlarmMessageType _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      AlarmsLoadedNotification _pd_notification;


    };

  
    AlarmDetailCorbaDef _pd_alarm;

    AlarmUpdateCorbaDef _pd_update;

  
  };

  typedef AlarmMessageCorbaDef::_var_type AlarmMessageCorbaDef_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AlarmMessageCorbaDef,AlarmMessageCorbaDef_var > AlarmMessageCorbaDef_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmMessageCorbaDef;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmSequence;

  class AlarmSequence_var;

  class AlarmSequence : public _CORBA_Unbounded_Sequence< AlarmDetailCorbaDef >  {
  public:
    typedef AlarmSequence_var _var_type;
    inline AlarmSequence() {}
    inline AlarmSequence(const AlarmSequence& _s)
      : _CORBA_Unbounded_Sequence< AlarmDetailCorbaDef > (_s) {}

    inline AlarmSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AlarmDetailCorbaDef > (_max) {}
    inline AlarmSequence(_CORBA_ULong _max, _CORBA_ULong _len, AlarmDetailCorbaDef* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AlarmDetailCorbaDef > (_max, _len, _val, _rel) {}

  

    inline AlarmSequence& operator = (const AlarmSequence& _s) {
      _CORBA_Unbounded_Sequence< AlarmDetailCorbaDef > ::operator=(_s);
      return *this;
    }
  };

  class AlarmSequence_out;

  class AlarmSequence_var {
  public:
    inline AlarmSequence_var() : _pd_seq(0) {}
    inline AlarmSequence_var(AlarmSequence* _s) : _pd_seq(_s) {}
    inline AlarmSequence_var(const AlarmSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AlarmSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AlarmSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AlarmSequence_var& operator = (AlarmSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AlarmSequence_var& operator = (const AlarmSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AlarmSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AlarmDetailCorbaDef& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AlarmSequence* operator -> () { return _pd_seq; }
    inline const AlarmSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AlarmSequence& () const { return *_pd_seq; }
#else
    inline operator const AlarmSequence& () const { return *_pd_seq; }
    inline operator AlarmSequence& () { return *_pd_seq; }
#endif
      
    inline const AlarmSequence& in() const { return *_pd_seq; }
    inline AlarmSequence&       inout()    { return *_pd_seq; }
    inline AlarmSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AlarmSequence* _retn() { AlarmSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AlarmSequence_out;
    
  private:
    AlarmSequence* _pd_seq;
  };

  class AlarmSequence_out {
  public:
    inline AlarmSequence_out(AlarmSequence*& _s) : _data(_s) { _data = 0; }
    inline AlarmSequence_out(AlarmSequence_var& _s)
      : _data(_s._pd_seq) { _s = (AlarmSequence*) 0; }
    inline AlarmSequence_out(const AlarmSequence_out& _s) : _data(_s._data) {}
    inline AlarmSequence_out& operator = (const AlarmSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AlarmSequence_out& operator = (AlarmSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator AlarmSequence*&()  { return _data; }
    inline AlarmSequence*& ptr()       { return _data; }
    inline AlarmSequence* operator->() { return _data; }

    inline AlarmDetailCorbaDef& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AlarmSequence*& _data;

  private:
    AlarmSequence_out();
    AlarmSequence_out& operator=(const AlarmSequence_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AlarmMsgSequence;

  class AlarmMsgSequence_var;

  class AlarmMsgSequence : public _CORBA_Unbounded_Sequence< AlarmMessageCorbaDef >  {
  public:
    typedef AlarmMsgSequence_var _var_type;
    inline AlarmMsgSequence() {}
    inline AlarmMsgSequence(const AlarmMsgSequence& _s)
      : _CORBA_Unbounded_Sequence< AlarmMessageCorbaDef > (_s) {}

    inline AlarmMsgSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AlarmMessageCorbaDef > (_max) {}
    inline AlarmMsgSequence(_CORBA_ULong _max, _CORBA_ULong _len, AlarmMessageCorbaDef* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AlarmMessageCorbaDef > (_max, _len, _val, _rel) {}

  

    inline AlarmMsgSequence& operator = (const AlarmMsgSequence& _s) {
      _CORBA_Unbounded_Sequence< AlarmMessageCorbaDef > ::operator=(_s);
      return *this;
    }
  };

  class AlarmMsgSequence_out;

  class AlarmMsgSequence_var {
  public:
    inline AlarmMsgSequence_var() : _pd_seq(0) {}
    inline AlarmMsgSequence_var(AlarmMsgSequence* _s) : _pd_seq(_s) {}
    inline AlarmMsgSequence_var(const AlarmMsgSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AlarmMsgSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AlarmMsgSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AlarmMsgSequence_var& operator = (AlarmMsgSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AlarmMsgSequence_var& operator = (const AlarmMsgSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AlarmMsgSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AlarmMessageCorbaDef& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AlarmMsgSequence* operator -> () { return _pd_seq; }
    inline const AlarmMsgSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AlarmMsgSequence& () const { return *_pd_seq; }
#else
    inline operator const AlarmMsgSequence& () const { return *_pd_seq; }
    inline operator AlarmMsgSequence& () { return *_pd_seq; }
#endif
      
    inline const AlarmMsgSequence& in() const { return *_pd_seq; }
    inline AlarmMsgSequence&       inout()    { return *_pd_seq; }
    inline AlarmMsgSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AlarmMsgSequence* _retn() { AlarmMsgSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AlarmMsgSequence_out;
    
  private:
    AlarmMsgSequence* _pd_seq;
  };

  class AlarmMsgSequence_out {
  public:
    inline AlarmMsgSequence_out(AlarmMsgSequence*& _s) : _data(_s) { _data = 0; }
    inline AlarmMsgSequence_out(AlarmMsgSequence_var& _s)
      : _data(_s._pd_seq) { _s = (AlarmMsgSequence*) 0; }
    inline AlarmMsgSequence_out(const AlarmMsgSequence_out& _s) : _data(_s._data) {}
    inline AlarmMsgSequence_out& operator = (const AlarmMsgSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AlarmMsgSequence_out& operator = (AlarmMsgSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator AlarmMsgSequence*&()  { return _data; }
    inline AlarmMsgSequence*& ptr()       { return _data; }
    inline AlarmMsgSequence* operator->() { return _data; }

    inline AlarmMessageCorbaDef& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AlarmMsgSequence*& _data;

  private:
    AlarmMsgSequence_out();
    AlarmMsgSequence_out& operator=(const AlarmMsgSequence_var&);
  };

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Core::AlarmMessageType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::AlarmMessageType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::AlarmsLoadedNotificationMessage) {
    _e = (TA_Base_Core::AlarmMessageType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmMessageType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmMessageType& _s);

inline void operator >>=(TA_Base_Core::AlarmState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::AlarmState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::AlarmSuppressed) {
    _e = (TA_Base_Core::AlarmState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmState& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmDetailCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmDetailCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmDetailCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmDetailCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmMessageCorbaDef& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmMessageCorbaDef* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmMessageCorbaDef*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmMessageCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AlarmMsgSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::AlarmMsgSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AlarmMsgSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AlarmMsgSequence*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_AlarmMessageCorbaDef
#endif

#endif  // __AlarmMessageCorbaDef_hh__

