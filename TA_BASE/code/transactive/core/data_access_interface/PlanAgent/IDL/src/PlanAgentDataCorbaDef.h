// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __PlanAgentDataCorbaDef_hh__
#define __PlanAgentDataCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mIPlanManagerCorbaDef__
#define __TA__Base__Bus_mIPlanManagerCorbaDef__

  class IPlanManagerCorbaDef;
  class _objref_IPlanManagerCorbaDef;
  class _impl_IPlanManagerCorbaDef;
  
  typedef _objref_IPlanManagerCorbaDef* IPlanManagerCorbaDef_ptr;
  typedef IPlanManagerCorbaDef_ptr IPlanManagerCorbaDefRef;

  class IPlanManagerCorbaDef_Helper {
  public:
    typedef IPlanManagerCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IPlanManagerCorbaDef, IPlanManagerCorbaDef_Helper> IPlanManagerCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IPlanManagerCorbaDef,IPlanManagerCorbaDef_Helper > IPlanManagerCorbaDef_out;

#endif

_CORBA_MODULE_END

_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ParameterNumber;

  typedef ::CORBA::ULong ParameterNumber;
  typedef ::CORBA::ULong_out ParameterNumber_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepNumber;

  typedef ::CORBA::ULong StepNumber;
  typedef ::CORBA::ULong_out StepNumber_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepId;

  typedef ::CORBA::ULong StepId;
  typedef ::CORBA::ULong_out StepId_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Seconds;

  typedef ::CORBA::ULong Seconds;
  typedef ::CORBA::ULong_out Seconds_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Minutes;

  typedef ::CORBA::ULong Minutes;
  typedef ::CORBA::ULong_out Minutes_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UpdateId;

  typedef ::CORBA::ULong UpdateId;
  typedef ::CORBA::ULong_out UpdateId_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionId;

  typedef char* SessionId;
  typedef ::CORBA::String_var SessionId_var;
  typedef ::CORBA::String_out SessionId_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanManagerId;

  typedef char* PlanManagerId;
  typedef ::CORBA::String_var PlanManagerId_var;
  typedef ::CORBA::String_out PlanManagerId_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NodeId;

  typedef ::CORBA::ULong NodeId;
  typedef ::CORBA::ULong_out NodeId_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NodeIds;

  class NodeIds_var;

  class NodeIds : public _CORBA_Unbounded_Sequence_w_FixSizeElement< NodeId, 4, 4 >  {
  public:
    typedef NodeIds_var _var_type;
    inline NodeIds() {}
    inline NodeIds(const NodeIds& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< NodeId, 4, 4 > (_s) {}

    inline NodeIds(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< NodeId, 4, 4 > (_max) {}
    inline NodeIds(_CORBA_ULong _max, _CORBA_ULong _len, NodeId* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< NodeId, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline NodeIds& operator = (const NodeIds& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< NodeId, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class NodeIds_out;

  class NodeIds_var {
  public:
    inline NodeIds_var() : _pd_seq(0) {}
    inline NodeIds_var(NodeIds* _s) : _pd_seq(_s) {}
    inline NodeIds_var(const NodeIds_var& _s) {
      if( _s._pd_seq )  _pd_seq = new NodeIds(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~NodeIds_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline NodeIds_var& operator = (NodeIds* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline NodeIds_var& operator = (const NodeIds_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new NodeIds;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline NodeId& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline NodeIds* operator -> () { return _pd_seq; }
    inline const NodeIds* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator NodeIds& () const { return *_pd_seq; }
#else
    inline operator const NodeIds& () const { return *_pd_seq; }
    inline operator NodeIds& () { return *_pd_seq; }
#endif
      
    inline const NodeIds& in() const { return *_pd_seq; }
    inline NodeIds&       inout()    { return *_pd_seq; }
    inline NodeIds*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline NodeIds* _retn() { NodeIds* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class NodeIds_out;
    
  private:
    NodeIds* _pd_seq;
  };

  class NodeIds_out {
  public:
    inline NodeIds_out(NodeIds*& _s) : _data(_s) { _data = 0; }
    inline NodeIds_out(NodeIds_var& _s)
      : _data(_s._pd_seq) { _s = (NodeIds*) 0; }
    inline NodeIds_out(const NodeIds_out& _s) : _data(_s._data) {}
    inline NodeIds_out& operator = (const NodeIds_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline NodeIds_out& operator = (NodeIds* _s) {
      _data = _s;
      return *this;
    }
    inline operator NodeIds*&()  { return _data; }
    inline NodeIds*& ptr()       { return _data; }
    inline NodeIds* operator->() { return _data; }

    inline NodeId& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    NodeIds*& _data;

  private:
    NodeIds_out();
    NodeIds_out& operator=(const NodeIds_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NodePath;

  typedef char* NodePath;
  typedef ::CORBA::String_var NodePath_var;
  typedef ::CORBA::String_out NodePath_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepNames;

  class StepNames_var;

  class StepNames : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef StepNames_var _var_type;
    inline StepNames() {}
    inline StepNames(const StepNames& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline StepNames(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline StepNames(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline StepNames& operator = (const StepNames& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class StepNames_out;

  class StepNames_var {
  public:
    inline StepNames_var() : _pd_seq(0) {}
    inline StepNames_var(StepNames* _s) : _pd_seq(_s) {}
    inline StepNames_var(const StepNames_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StepNames(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StepNames_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StepNames_var& operator = (StepNames* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StepNames_var& operator = (const StepNames_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StepNames;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StepNames* operator -> () { return _pd_seq; }
    inline const StepNames* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StepNames& () const { return *_pd_seq; }
#else
    inline operator const StepNames& () const { return *_pd_seq; }
    inline operator StepNames& () { return *_pd_seq; }
#endif
      
    inline const StepNames& in() const { return *_pd_seq; }
    inline StepNames&       inout()    { return *_pd_seq; }
    inline StepNames*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StepNames* _retn() { StepNames* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StepNames_out;
    
  private:
    StepNames* _pd_seq;
  };

  class StepNames_out {
  public:
    inline StepNames_out(StepNames*& _s) : _data(_s) { _data = 0; }
    inline StepNames_out(StepNames_var& _s)
      : _data(_s._pd_seq) { _s = (StepNames*) 0; }
    inline StepNames_out(const StepNames_out& _s) : _data(_s._data) {}
    inline StepNames_out& operator = (const StepNames_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StepNames_out& operator = (StepNames* _s) {
      _data = _s;
      return *this;
    }
    inline operator StepNames*&()  { return _data; }
    inline StepNames*& ptr()       { return _data; }
    inline StepNames* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StepNames*& _data;

  private:
    StepNames_out();
    StepNames_out& operator=(const StepNames_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ParameterNames;

  class ParameterNames_var;

  class ParameterNames : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef ParameterNames_var _var_type;
    inline ParameterNames() {}
    inline ParameterNames(const ParameterNames& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline ParameterNames(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline ParameterNames(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline ParameterNames& operator = (const ParameterNames& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class ParameterNames_out;

  class ParameterNames_var {
  public:
    inline ParameterNames_var() : _pd_seq(0) {}
    inline ParameterNames_var(ParameterNames* _s) : _pd_seq(_s) {}
    inline ParameterNames_var(const ParameterNames_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ParameterNames(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ParameterNames_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ParameterNames_var& operator = (ParameterNames* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ParameterNames_var& operator = (const ParameterNames_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ParameterNames;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ParameterNames* operator -> () { return _pd_seq; }
    inline const ParameterNames* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ParameterNames& () const { return *_pd_seq; }
#else
    inline operator const ParameterNames& () const { return *_pd_seq; }
    inline operator ParameterNames& () { return *_pd_seq; }
#endif
      
    inline const ParameterNames& in() const { return *_pd_seq; }
    inline ParameterNames&       inout()    { return *_pd_seq; }
    inline ParameterNames*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ParameterNames* _retn() { ParameterNames* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ParameterNames_out;
    
  private:
    ParameterNames* _pd_seq;
  };

  class ParameterNames_out {
  public:
    inline ParameterNames_out(ParameterNames*& _s) : _data(_s) { _data = 0; }
    inline ParameterNames_out(ParameterNames_var& _s)
      : _data(_s._pd_seq) { _s = (ParameterNames*) 0; }
    inline ParameterNames_out(const ParameterNames_out& _s) : _data(_s._data) {}
    inline ParameterNames_out& operator = (const ParameterNames_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ParameterNames_out& operator = (ParameterNames* _s) {
      _data = _s;
      return *this;
    }
    inline operator ParameterNames*&()  { return _data; }
    inline ParameterNames*& ptr()       { return _data; }
    inline ParameterNames* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ParameterNames*& _data;

  private:
    ParameterNames_out();
    ParameterNames_out& operator=(const ParameterNames_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraName;

  typedef char* CameraName;
  typedef ::CORBA::String_var CameraName_var;
  typedef ::CORBA::String_out CameraName_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraPreset;

  typedef ::CORBA::ULong CameraPreset;
  typedef ::CORBA::ULong_out CameraPreset_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraMode;

  typedef ::CORBA::ULong CameraMode;
  typedef ::CORBA::ULong_out CameraMode_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MonitorName;

  typedef char* MonitorName;
  typedef ::CORBA::String_var MonitorName_var;
  typedef ::CORBA::String_out MonitorName_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RecordingUnitName;

  typedef char* RecordingUnitName;
  typedef ::CORBA::String_var RecordingUnitName_var;
  typedef ::CORBA::String_out RecordingUnitName_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataPointName;

  typedef char* DataPointName;
  typedef ::CORBA::String_var DataPointName_var;
  typedef ::CORBA::String_out DataPointName_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ParameterKey;

  typedef ::CORBA::ULong ParameterKey;
  typedef ::CORBA::ULong_out ParameterKey_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VmsSign;

  typedef char* VmsSign;
  typedef ::CORBA::String_var VmsSign_var;
  typedef ::CORBA::String_out VmsSign_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VmsScene;

  typedef ::CORBA::ULong VmsScene;
  typedef ::CORBA::ULong_out VmsScene_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AppType;

  typedef ::CORBA::ULong AppType;
  typedef ::CORBA::ULong_out AppType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CommandLine;

  typedef char* CommandLine;
  typedef ::CORBA::String_var CommandLine_var;
  typedef ::CORBA::String_out CommandLine_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SchematicName;

  typedef char* SchematicName;
  typedef ::CORBA::String_var SchematicName_var;
  typedef ::CORBA::String_out SchematicName_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ExpressionValue;

  typedef char* ExpressionValue;
  typedef ::CORBA::String_var ExpressionValue_var;
  typedef ::CORBA::String_out ExpressionValue_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TISPidList;

  class TISPidList_var;

  class TISPidList : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef TISPidList_var _var_type;
    inline TISPidList() {}
    inline TISPidList(const TISPidList& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline TISPidList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline TISPidList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline TISPidList& operator = (const TISPidList& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class TISPidList_out;

  class TISPidList_var {
  public:
    inline TISPidList_var() : _pd_seq(0) {}
    inline TISPidList_var(TISPidList* _s) : _pd_seq(_s) {}
    inline TISPidList_var(const TISPidList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new TISPidList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~TISPidList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline TISPidList_var& operator = (TISPidList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline TISPidList_var& operator = (const TISPidList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new TISPidList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline TISPidList* operator -> () { return _pd_seq; }
    inline const TISPidList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator TISPidList& () const { return *_pd_seq; }
#else
    inline operator const TISPidList& () const { return *_pd_seq; }
    inline operator TISPidList& () { return *_pd_seq; }
#endif
      
    inline const TISPidList& in() const { return *_pd_seq; }
    inline TISPidList&       inout()    { return *_pd_seq; }
    inline TISPidList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline TISPidList* _retn() { TISPidList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class TISPidList_out;
    
  private:
    TISPidList* _pd_seq;
  };

  class TISPidList_out {
  public:
    inline TISPidList_out(TISPidList*& _s) : _data(_s) { _data = 0; }
    inline TISPidList_out(TISPidList_var& _s)
      : _data(_s._pd_seq) { _s = (TISPidList*) 0; }
    inline TISPidList_out(const TISPidList_out& _s) : _data(_s._data) {}
    inline TISPidList_out& operator = (const TISPidList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline TISPidList_out& operator = (TISPidList* _s) {
      _data = _s;
      return *this;
    }
    inline operator TISPidList*&()  { return _data; }
    inline TISPidList*& ptr()       { return _data; }
    inline TISPidList* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    TISPidList*& _data;

  private:
    TISPidList_out();
    TISPidList_out& operator=(const TISPidList_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProfileNumber;

  typedef ::CORBA::ULong ProfileNumber;
  typedef ::CORBA::ULong_out ProfileNumber_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActionType;

  typedef ::CORBA::ULong ActionType;
  typedef ::CORBA::ULong_out ActionType_out;

  _CORBA_MODULE_VARINT const ::CORBA::ULong ROOT_NODE_ID _init_in_decl_( = 1U );

  _CORBA_MODULE_VARINT const ::CORBA::ULong MAX_UPDATE_ID _init_in_decl_( = 4294967295U );

  _CORBA_MODULE_VARINT const ::CORBA::ULong MIN_UPDATE_ID _init_in_decl_( = 1U );

  _CORBA_MODULE_VARINT const ::CORBA::UShort TIS_UNDEFINED_MESSAGE_ID _init_in_decl_( = 65535 );

  _CORBA_MODULE_VARINT const ::CORBA::UShort TIS_UNDEFINED_TRAIN_ID _init_in_decl_( = 65535 );

  _CORBA_MODULE_VARINT const ::CORBA::ULong PA_UNDEFINED_MESSAGE_ID _init_in_decl_( = 0U );

  enum ENode { PLAN_NODE, CATEGORY_NODE, UNDEFINED_NODE /*, __max_ENode=0xffffffff */ };
  typedef ENode& ENode_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ENode;

  enum EApprovalState { APPROVED_APPROVAL_STATE, UNAPPROVED_APPROVAL_STATE, UNDEFINED_APPROVAL_STATE /*, __max_EApprovalState=0xffffffff */ };
  typedef EApprovalState& EApprovalState_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EApprovalState;

  enum EPlanType { UNDEFINED_TYPE, VISIBLE_TYPE, INVISIBLE_TYPE /*, __max_EPlanType=0xffffffff */ };
  typedef EPlanType& EPlanType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanType;

  enum EStep { END_STEP, ABORT_STEP, ACTIVE_PLAN_CHECK_STEP, ASSIGN_CAMERA_TO_MONITOR_STEP, DATA_POINT_CHECK_STEP, DATA_POINT_SET_STEP, DECISION_STEP, JUMP_STEP, LOG_STEP, ACTIVATE_CAMERA_PRESET_STEP, PROMPT_STEP, RUN_PLAN_STEP, TERMINATE_PLAN_STEP, STATION_TRAVELLER_INFO_SYSTEM_STEP, VMS_SET_SCENE_STEP, LAUNCH_GUI_APP_STEP, VMS_BLANKOUT_STEP, VMS_RESTORE_SCHEDULE_STEP, VIDEO_WALL_STEP, STATION_PUBLIC_ADDRESS_STEP, TRAIN_PUBLIC_ADDRESS_STEP, MITSIM_GENERATE_INCIDENT_IMAGES_STEP, GENERATE_REPORT_STEP, LIVE_PROPERTY_CHECK_STEP, LAUNCH_MAP_VIEWER_STEP, START_RECORDING_STEP, STOP_RECORDING_STEP, ASSIGN_VIDEO_INPUT_TO_RECORDING_UNIT_STEP, CLEAR_VIDEO_WALL_STEP, SEND_SMS_MESSAGE_STEP, LAUNCH_SCHEMATIC_STEP, EVALUATE_EXPRESSION_STEP, TRAIN_TRAVELLER_INFO_SYSTEM_STEP, FAILURE_SUMMARY_STEP, PLAN_CHECK_TIMER_STEP, PLAN_SET_TIMER_STEP, EXECUTE_SCRIPT_STEP, DATA_POINT_TIME_CHECK_STEP, POPUP_MFT_MESSAGE_STEP, SHUTDOWN_SYSTEM_STEP, STATION_PUBLIC_ADDRESS_STEP_BY_ALARM, BACKGROUND_LAUNCH_SCHEMATIC_STEP, BACKGROUND_LAUNCH_GUI_APP_STEP, BACKGROUND_DECISION_STEP, BACKGROUND_LOG_STEP, BACKGROUND_PROMPT_STEP, UNDEFINED_STEP /*, __max_EStep=0xffffffff */ };
  typedef EStep& EStep_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EStep;

  enum EActivePlanState { EXECUTING_ACTIVE_PLAN_STATE, PAUSED_ACTIVE_PLAN_STATE, DELAYED_ACTIVE_PLAN_STATE, STOPPED_ACTIVE_PLAN_STATE, COMPLETED_ACTIVE_PLAN_STATE, ABORTED_ACTIVE_PLAN_STATE, FAILED_ACTIVE_PLAN_STATE, PENDING_ACTIVE_PLAN_STATE, UNDEFINED_ACTIVE_PLAN_STATE, OPERATOR_PAUSED_ACTIVE_PLAN_STATE, EXPIRED_ACTIVE_PLAN_STATE, NEW_OWNER_ACTIVE_PLAN_STATE /*, __max_EActivePlanState=0xffffffff */ };
  typedef EActivePlanState& EActivePlanState_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EActivePlanState;

  enum EActiveStepState { EXECUTED_ACTIVE_STEP_STATE, SKIPPED_ACTIVE_STEP_STATE, UNEXECUTED_ACTIVE_STEP_STATE, FAILED_ACTIVE_STEP_STATE, LOADED_ACTIVE_STEP_STATE, PAUSED_ACTIVE_STEP_STATE, DELAYED_ACTIVE_STEP_STATE, UNDEFINED_ACTIVE_STEP_STATE /*, __max_EActiveStepState=0xffffffff */ };
  typedef EActiveStepState& EActiveStepState_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EActiveStepState;

  enum EDataPoint { BOOLEAN_DATA_POINT, NUMERIC_DATA_POINT, TEXT_DATA_POINT, UNDEFINED_DATA_POINT /*, __max_EDataPoint=0xffffffff */ };
  typedef EDataPoint& EDataPoint_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EDataPoint;

  enum EDataPointTest { EQUAL_TO_TEST, NOT_EQUAL_TO_TEST, LESS_THAN_TEST, GREATER_THAN_TEST, LESS_THAN_OR_EQUAL_TO_TEST, GREATER_THAN_OR_EQUAL_TO_TEST, UNDEFINED_TEST /*, __max_EDataPointTest=0xffffffff */ };
  typedef EDataPointTest& EDataPointTest_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EDataPointTest;

  enum ETrainGroup { TG_INBOUND_TRAINS, TG_OUTBOUND_TRAINS, TG_ALL_TRAINS, TG_UNDEFINED /*, __max_ETrainGroup=0xffffffff */ };
  typedef ETrainGroup& ETrainGroup_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ETrainGroup;

  enum EPlanStepCompletionStatus { PSCS_FAILURE, PSCS_SUCCESS, PSCS_TIMEOUT, PSCS_ACKNOWLEDGEMENT, PSCS_YES_RESPONSE, PSCS_NO_RESPONSE, PSCS_PAUSE_RESPONSE, PSCS_ABORT_RESPONSE, PSCS_RETRY_RESPONSE, PSCS_IGNORE_RESPONSE, PSCS_OK_RESPONSE, PSCS_CANCEL_RESPONSE, PSCS_UNDEFINED /*, __max_EPlanStepCompletionStatus=0xffffffff */ };
  typedef EPlanStepCompletionStatus& EPlanStepCompletionStatus_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanStepCompletionStatus;

  enum EPlanConfigUpdateType { PCUT_APPROVAL_STATE, PCUT_UPDATE_CATEGORY, PCUT_INSERT_CATEGORY, PCUT_INSERT_CATEGORY_INTO_ROOT, PCUT_DELETE_CATEGORY, PCUT_UPDATE_PLAN, PCUT_INSERT_PLAN, PCUT_INSERT_PLAN_INTO_ROOT, PCUT_DELETE_PLANS, PCUT_MOVE_PLAN, PCUT_COPY_PLAN, PCUT_COPY_PLAN_TO_ROOT, PCUT_MOVE_PLAN_TO_ROOT, PCUT_MOVE_PLAN_FROM_ROOT, PCUT_DELETE_CATEGORY_FROM_ROOT, PCUT_DELETE_PLANS_FROM_ROOT, PCUT_PLAN_TYPE /*, __max_EPlanConfigUpdateType=0xffffffff */ };
  typedef EPlanConfigUpdateType& EPlanConfigUpdateType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanConfigUpdateType;

  enum EPlanAgentStateUpdateType { PASUT_PLAN_EXECUTION_HISTORY, PASUT_PLAN_CUSTOMISATION_HISTORY, PASUT_REGISTERED_PLAN_MANAGER, PASUT_DEREGISTERED_PLAN_MANAGER, PASUT_RUN_PLAN, PASUT_CUSTOMISE_PLAN, PASUT_TAKE_CONTROL, PASUT_PAUSE_PLAN, PASUT_RESUME_PLAN, PASUT_STOP_PLAN, PASUT_CUSTOMISE_STEP, PASUT_GET_EDIT_PLAN_LOCK, PASUT_RELEASE_EDIT_PLAN_LOCK, PASUT_ACTIVE_PLAN_UPDATE, PASUT_PAUSED_FOR_OPERATOR_UPDATE, PASUT_ACTIVE_PLANS, PASUT_UPDATE_ID, PASUT_ACTIVE_STEP_COMPLETION_STATUS_UPDATE, PASUT_MAX /*, __max_EPlanAgentStateUpdateType=0xffffffff */ };
  typedef EPlanAgentStateUpdateType& EPlanAgentStateUpdateType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanAgentStateUpdateType;

  enum EPlanStepDetailType { PSDT_NAME, PSDT_TYPE, PSDT_SKIP, PSDT_POSITION, PSDT_PLAN_PATH, PSDT_YES, PSDT_NO, PSDT_DATA_POINT_NAME, PSDT_DATA_POINT_VALUE, PSDT_DATA_POINT_TEST_TYPE, PSDT_SUCCESS, PSDT_FAILURE, PSDT_DECISION_MESSAGE, PSDT_JUMP, PSDT_PROMPT_MESSAGE, PSDT_APPLICATION, PSDT_WIDTH, PSDT_HEIGHT, PSDT_CAMERA_NAME, PSDT_MONITOR_NAME, PSDT_CAMERA_PRESET, PSDT_VMS_SIGN, PSDT_VMS_SCENE, PSDT_WALLBOARD, PSDT_VIDEO_LAYOUT, PSDT_SMS_RECIPIENT, PSDT_SMS_MESSAGE, PSDT_SCHEMATIC_NAME, PSDT_SCREEN_NUMBER, PSDT_EXPRESSION_VALUE, PSDT_STATION_NAME, PSDT_STATION_MESSAGE, PSDT_STATION_ZONE, PSDT_TRAIN_ID, PSDT_TIS_MESSAGE, PSDT_TIS_PRIORITY, PSDT_TIS_DURATION, PSDT_YES_LABEL, PSDT_NO_LABEL, PSDT_PAUSE_LABEL, PSDT_FAILURE_SUMMARY, PSDT_TIME, PSDT_STATION_DESITINATIONLIST, PSDT_STATION_MESSAGECONTENT, PSDT_PROFILE, PSDT_MAX /*, __max_EPlanStepDetailType=0xffffffff */ };
  typedef EPlanStepDetailType& EPlanStepDetailType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanStepDetailType;

  enum EPlanStepDetailError { PSDE_UNSPECIFIED, PSDE_INVALID /*, __max_EPlanStepDetailError=0xffffffff */ };
  typedef EPlanStepDetailError& EPlanStepDetailError_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanStepDetailError;

  enum EPlanAgentError { PAE_EDIT_LOCKED_BY_OPERATOR, PAE_CANNOT_RELEASE_EDIT_LOCK, PAE_NO_PLAN_NAME, PAE_INVALID_PLAN_NAME, PAE_NAME_NOT_UNIQUE, PAE_CANNOT_SAVE_APPROVED_PLAN, PAE_CANNOT_DELETE_APPROVED_PLAN, PAE_CANNOT_OVERWRITE_APPROVED_PLAN, PAE_CANNOT_OVERWRITE_EDITED_PLAN, PAE_CANNOT_OVERWRITE_CATEGORY, PAE_NOT_APPROVED, PAE_CANNOT_SKIP_UNSKIPPABLE, PAE_NOT_PLAN, PAE_NOT_CATEGORY, PAE_PARENT_NOT_CATEGORY, PAE_EXCEED_MAX_CATAGORY_LEVEL, PAE_CANNOT_DELETE_NON_EMPTY_CATAGORY, PAE_PLAN_HAS_ACTIVE_INSTANCE, PAE_CANNOT_CREATE_PLAN, PAE_CANNOT_DELETE_REFERENCED_PLAN, PAE_DATABASE_ERROR, PAE_DATA_ERROR, PAE_WRONG_STATE_TO_CUSTOMISE_ACTIVE_PLAN, PAE_INITIALISATION_FAILURE, PAE_NO_RESOURCE, PAE_STEP_TYPE_AND_PARAMETER_MISMATCH, PAE_UNKNOWN_ERROR, PAE_EXCEEDED_RUNNING_PLANS_FOR_ENTITY, PAE_PLAN_PAUSE_ERROR, PAE_PLAN_RESUME_ERROR, PAE_PLAN_STOP_ERROR, PAE_PLAN_UNAPPROVE_ERROR, PAE_PLAN_EXEC_ERROR, PAE_PLAN_APPROVE_ERROR /*, __max_EPlanAgentError=0xffffffff */ };
  typedef EPlanAgentError& EPlanAgentError_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanAgentError;

  enum EPlanNotFoundError { PNFE_FAIL_FETCH_ACTIVE_LIST_STEP, PNFE_INSTANCE_NOT_IN_BULLETIN_BOARD, PNFE_INSTANCE_NOT_FOUND, PNFE_MESSAGE_FOR_UNKNOWN_PLAN_DISCARDED, PNFE_NODE_NOT_EXIST /*, __max_EPlanNotFoundError=0xffffffff */ };
  typedef EPlanNotFoundError& EPlanNotFoundError_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPlanNotFoundError;

  struct NumericDataPoint {
    typedef _CORBA_ConstrType_Fix_Var<NumericDataPoint> _var_type;

    
    ::CORBA::Double value;

    ::CORBA::ULong precision;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef NumericDataPoint::_var_type NumericDataPoint_var;

  typedef NumericDataPoint& NumericDataPoint_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NumericDataPoint;

  class DataPointValue {
  public:

    typedef _CORBA_ConstrType_Variable_Var<DataPointValue> _var_type;

    

    DataPointValue(): _pd__initialised(0) {
      _default();

  
    }
    
    DataPointValue(const DataPointValue& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case BOOLEAN_DATA_POINT: booleanValue(_value._pd_booleanValue); break;

          case NUMERIC_DATA_POINT: numericValue(_value._pd_numericValue); break;

          case TEXT_DATA_POINT: textValue(_value._pd_textValue); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
    }

    ~DataPointValue() {}

    DataPointValue& operator=(const DataPointValue& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case BOOLEAN_DATA_POINT: booleanValue(_value._pd_booleanValue); break;

          case NUMERIC_DATA_POINT: numericValue(_value._pd_numericValue); break;

          case TEXT_DATA_POINT: textValue(_value._pd_textValue); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
      return *this;
    }

    EDataPoint _d() const { return _pd__d;}
    void _d(EDataPoint _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case BOOLEAN_DATA_POINT: goto fail;
        case NUMERIC_DATA_POINT: goto fail;
        case TEXT_DATA_POINT: goto fail;
        default:
        switch (_value){
          case BOOLEAN_DATA_POINT: goto fail;
          case NUMERIC_DATA_POINT: goto fail;
          case TEXT_DATA_POINT: goto fail;
          default: _pd__d = _value; return;
        }

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    void _default()
    {
      _pd__initialised = 1;
      _pd__d = UNDEFINED_DATA_POINT;
      _pd__default = 1;
    }

  

    ::CORBA::Boolean booleanValue () const { return _pd_booleanValue; }
    void booleanValue (::CORBA::Boolean  _value) {
      _pd__initialised = 1;
      _pd__d = BOOLEAN_DATA_POINT;
      _pd__default = 0;
      _pd_booleanValue = _value;
    }

    const NumericDataPoint &numericValue () const { return _pd_numericValue; }
    NumericDataPoint &numericValue () { return _pd_numericValue; }
    void numericValue (const NumericDataPoint& _value) {
      _pd__initialised = 1;
      _pd__d = NUMERIC_DATA_POINT;
      _pd__default = 0;
      _pd_numericValue = _value;
    }

    const char * textValue () const { return (const char*) _pd_textValue; }
    void textValue(char* _value) {
      _pd__initialised = 1;
      _pd__d = TEXT_DATA_POINT;
      _pd__default = 0;
      _pd_textValue = _value;
    }
    void textValue(const char*  _value) {
      _pd__initialised = 1;
      _pd__d = TEXT_DATA_POINT;
      _pd__default = 0;
      _pd_textValue = _value;
    }
    void textValue(const ::CORBA::String_var& _value) {
      _pd__initialised = 1;
      _pd__d = TEXT_DATA_POINT;
      _pd__default = 0;
      _pd_textValue = _value;
    }
    void textValue(const ::CORBA::String_member& _value) {
      _pd__initialised = 1;
      _pd__d = TEXT_DATA_POINT;
      _pd__default = 0;
      _pd_textValue = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    EDataPoint _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      ::CORBA::Boolean _pd_booleanValue;


    };

  
    NumericDataPoint _pd_numericValue;

    ::CORBA::String_member _pd_textValue;

  
  };

  typedef DataPointValue::_var_type DataPointValue_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DataPointValue,DataPointValue_var > DataPointValue_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataPointValue;

  struct NodeSummary {
    typedef _CORBA_ConstrType_Variable_Var<NodeSummary> _var_type;

    
    NodeId node;

    NodeId parent;

    ::CORBA::String_member name;

    ENode type;

    EApprovalState approvalState;

    ::CORBA::Boolean hasChildren;

    ::CORBA::Boolean hasApprovedDescendant;

    ::CORBA::Boolean hasUnapprovedDescendant;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef NodeSummary::_var_type NodeSummary_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< NodeSummary,NodeSummary_var > NodeSummary_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NodeSummary;

  struct PlanDetail {
    typedef _CORBA_ConstrType_Variable_Var<PlanDetail> _var_type;

    
    NodeId parent;

    NodeId plan;

    ::CORBA::String_member name;

    ::CORBA::String_member description;

    EApprovalState approvalState;

    ::CORBA::String_member modifiedBy;

    ::CORBA::String_member modifiedTime;

    ::CORBA::String_member approvalChangedBy;

    ::CORBA::String_member approvalChangedTime;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanDetail::_var_type PlanDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PlanDetail,PlanDetail_var > PlanDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanDetail;

  struct CategoryDetail {
    typedef _CORBA_ConstrType_Variable_Var<CategoryDetail> _var_type;

    
    NodeId parent;

    NodeId category;

    ::CORBA::String_member name;

    ::CORBA::String_member description;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CategoryDetail::_var_type CategoryDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CategoryDetail,CategoryDetail_var > CategoryDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CategoryDetail;

  class NodeDetail {
  public:

    typedef _CORBA_ConstrType_Variable_Var<NodeDetail> _var_type;

    

    NodeDetail(): _pd__initialised(0) {
      _default();

  
    }
    
    NodeDetail(const NodeDetail& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case PLAN_NODE: plan(_value._pd_plan); break;

          case CATEGORY_NODE: category(_value._pd_category); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
    }

    ~NodeDetail() {}

    NodeDetail& operator=(const NodeDetail& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case PLAN_NODE: plan(_value._pd_plan); break;

          case CATEGORY_NODE: category(_value._pd_category); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
      return *this;
    }

    ENode _d() const { return _pd__d;}
    void _d(ENode _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case PLAN_NODE: goto fail;
        case CATEGORY_NODE: goto fail;
        default:
        switch (_value){
          case PLAN_NODE: goto fail;
          case CATEGORY_NODE: goto fail;
          default: _pd__d = _value; return;
        }

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    void _default()
    {
      _pd__initialised = 1;
      _pd__d = UNDEFINED_NODE;
      _pd__default = 1;
    }

  

    const PlanDetail &plan () const { return _pd_plan; }
    PlanDetail &plan () { return _pd_plan; }
    void plan (const PlanDetail& _value) {
      _pd__initialised = 1;
      _pd__d = PLAN_NODE;
      _pd__default = 0;
      _pd_plan = _value;
    }

    const CategoryDetail &category () const { return _pd_category; }
    CategoryDetail &category () { return _pd_category; }
    void category (const CategoryDetail& _value) {
      _pd__initialised = 1;
      _pd__d = CATEGORY_NODE;
      _pd__default = 0;
      _pd_category = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    ENode _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    
    PlanDetail _pd_plan;

    CategoryDetail _pd_category;

  
  };

  typedef NodeDetail::_var_type NodeDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< NodeDetail,NodeDetail_var > NodeDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NodeDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SiblingNodes;

  class SiblingNodes_var;

  class SiblingNodes : public _CORBA_Unbounded_Sequence< NodeSummary >  {
  public:
    typedef SiblingNodes_var _var_type;
    inline SiblingNodes() {}
    inline SiblingNodes(const SiblingNodes& _s)
      : _CORBA_Unbounded_Sequence< NodeSummary > (_s) {}

    inline SiblingNodes(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< NodeSummary > (_max) {}
    inline SiblingNodes(_CORBA_ULong _max, _CORBA_ULong _len, NodeSummary* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< NodeSummary > (_max, _len, _val, _rel) {}

  

    inline SiblingNodes& operator = (const SiblingNodes& _s) {
      _CORBA_Unbounded_Sequence< NodeSummary > ::operator=(_s);
      return *this;
    }
  };

  class SiblingNodes_out;

  class SiblingNodes_var {
  public:
    inline SiblingNodes_var() : _pd_seq(0) {}
    inline SiblingNodes_var(SiblingNodes* _s) : _pd_seq(_s) {}
    inline SiblingNodes_var(const SiblingNodes_var& _s) {
      if( _s._pd_seq )  _pd_seq = new SiblingNodes(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~SiblingNodes_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline SiblingNodes_var& operator = (SiblingNodes* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline SiblingNodes_var& operator = (const SiblingNodes_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new SiblingNodes;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline NodeSummary& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline SiblingNodes* operator -> () { return _pd_seq; }
    inline const SiblingNodes* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator SiblingNodes& () const { return *_pd_seq; }
#else
    inline operator const SiblingNodes& () const { return *_pd_seq; }
    inline operator SiblingNodes& () { return *_pd_seq; }
#endif
      
    inline const SiblingNodes& in() const { return *_pd_seq; }
    inline SiblingNodes&       inout()    { return *_pd_seq; }
    inline SiblingNodes*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline SiblingNodes* _retn() { SiblingNodes* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class SiblingNodes_out;
    
  private:
    SiblingNodes* _pd_seq;
  };

  class SiblingNodes_out {
  public:
    inline SiblingNodes_out(SiblingNodes*& _s) : _data(_s) { _data = 0; }
    inline SiblingNodes_out(SiblingNodes_var& _s)
      : _data(_s._pd_seq) { _s = (SiblingNodes*) 0; }
    inline SiblingNodes_out(const SiblingNodes_out& _s) : _data(_s._data) {}
    inline SiblingNodes_out& operator = (const SiblingNodes_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline SiblingNodes_out& operator = (SiblingNodes* _s) {
      _data = _s;
      return *this;
    }
    inline operator SiblingNodes*&()  { return _data; }
    inline SiblingNodes*& ptr()       { return _data; }
    inline SiblingNodes* operator->() { return _data; }

    inline NodeSummary& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    SiblingNodes*& _data;

  private:
    SiblingNodes_out();
    SiblingNodes_out& operator=(const SiblingNodes_var&);
  };

  struct ActiveStepDetail {
    typedef _CORBA_ConstrType_Variable_Var<ActiveStepDetail> _var_type;

    
    StepNumber position;

    EActiveStepState state;

    ::CORBA::String_member name;

    ::CORBA::String_member remark;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ActiveStepDetail::_var_type ActiveStepDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ActiveStepDetail,ActiveStepDetail_var > ActiveStepDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActiveStepDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActiveStepDetails;

  class ActiveStepDetails_var;

  class ActiveStepDetails : public _CORBA_Unbounded_Sequence< ActiveStepDetail >  {
  public:
    typedef ActiveStepDetails_var _var_type;
    inline ActiveStepDetails() {}
    inline ActiveStepDetails(const ActiveStepDetails& _s)
      : _CORBA_Unbounded_Sequence< ActiveStepDetail > (_s) {}

    inline ActiveStepDetails(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ActiveStepDetail > (_max) {}
    inline ActiveStepDetails(_CORBA_ULong _max, _CORBA_ULong _len, ActiveStepDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ActiveStepDetail > (_max, _len, _val, _rel) {}

  

    inline ActiveStepDetails& operator = (const ActiveStepDetails& _s) {
      _CORBA_Unbounded_Sequence< ActiveStepDetail > ::operator=(_s);
      return *this;
    }
  };

  class ActiveStepDetails_out;

  class ActiveStepDetails_var {
  public:
    inline ActiveStepDetails_var() : _pd_seq(0) {}
    inline ActiveStepDetails_var(ActiveStepDetails* _s) : _pd_seq(_s) {}
    inline ActiveStepDetails_var(const ActiveStepDetails_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ActiveStepDetails(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ActiveStepDetails_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ActiveStepDetails_var& operator = (ActiveStepDetails* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ActiveStepDetails_var& operator = (const ActiveStepDetails_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ActiveStepDetails;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ActiveStepDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ActiveStepDetails* operator -> () { return _pd_seq; }
    inline const ActiveStepDetails* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ActiveStepDetails& () const { return *_pd_seq; }
#else
    inline operator const ActiveStepDetails& () const { return *_pd_seq; }
    inline operator ActiveStepDetails& () { return *_pd_seq; }
#endif
      
    inline const ActiveStepDetails& in() const { return *_pd_seq; }
    inline ActiveStepDetails&       inout()    { return *_pd_seq; }
    inline ActiveStepDetails*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ActiveStepDetails* _retn() { ActiveStepDetails* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ActiveStepDetails_out;
    
  private:
    ActiveStepDetails* _pd_seq;
  };

  class ActiveStepDetails_out {
  public:
    inline ActiveStepDetails_out(ActiveStepDetails*& _s) : _data(_s) { _data = 0; }
    inline ActiveStepDetails_out(ActiveStepDetails_var& _s)
      : _data(_s._pd_seq) { _s = (ActiveStepDetails*) 0; }
    inline ActiveStepDetails_out(const ActiveStepDetails_out& _s) : _data(_s._data) {}
    inline ActiveStepDetails_out& operator = (const ActiveStepDetails_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ActiveStepDetails_out& operator = (ActiveStepDetails* _s) {
      _data = _s;
      return *this;
    }
    inline operator ActiveStepDetails*&()  { return _data; }
    inline ActiveStepDetails*& ptr()       { return _data; }
    inline ActiveStepDetails* operator->() { return _data; }

    inline ActiveStepDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ActiveStepDetails*& _data;

  private:
    ActiveStepDetails_out();
    ActiveStepDetails_out& operator=(const ActiveStepDetails_var&);
  };

  struct ExecutionHistory {
    typedef _CORBA_ConstrType_Variable_Var<ExecutionHistory> _var_type;

    
    UpdateId activeUpdateId;

    ActiveStepDetails details;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ExecutionHistory::_var_type ExecutionHistory_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ExecutionHistory,ExecutionHistory_var > ExecutionHistory_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ExecutionHistory;

  struct StepCustomisableDetail {
    typedef _CORBA_ConstrType_Fix_Var<StepCustomisableDetail> _var_type;

    
    StepNumber position;

    ::CORBA::Boolean skip;

    ::CORBA::Boolean ignoreFailure;

    ::CORBA::Boolean nowait;

    Seconds delay;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef StepCustomisableDetail::_var_type StepCustomisableDetail_var;

  typedef StepCustomisableDetail& StepCustomisableDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepCustomisableDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepCustomisableDetails;

  class StepCustomisableDetails_var;

  class StepCustomisableDetails : public _CORBA_Unbounded_Sequence< StepCustomisableDetail >  {
  public:
    typedef StepCustomisableDetails_var _var_type;
    inline StepCustomisableDetails() {}
    inline StepCustomisableDetails(const StepCustomisableDetails& _s)
      : _CORBA_Unbounded_Sequence< StepCustomisableDetail > (_s) {}

    inline StepCustomisableDetails(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< StepCustomisableDetail > (_max) {}
    inline StepCustomisableDetails(_CORBA_ULong _max, _CORBA_ULong _len, StepCustomisableDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< StepCustomisableDetail > (_max, _len, _val, _rel) {}

  

    inline StepCustomisableDetails& operator = (const StepCustomisableDetails& _s) {
      _CORBA_Unbounded_Sequence< StepCustomisableDetail > ::operator=(_s);
      return *this;
    }
  };

  class StepCustomisableDetails_out;

  class StepCustomisableDetails_var {
  public:
    inline StepCustomisableDetails_var() : _pd_seq(0) {}
    inline StepCustomisableDetails_var(StepCustomisableDetails* _s) : _pd_seq(_s) {}
    inline StepCustomisableDetails_var(const StepCustomisableDetails_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StepCustomisableDetails(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StepCustomisableDetails_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StepCustomisableDetails_var& operator = (StepCustomisableDetails* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StepCustomisableDetails_var& operator = (const StepCustomisableDetails_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StepCustomisableDetails;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline StepCustomisableDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StepCustomisableDetails* operator -> () { return _pd_seq; }
    inline const StepCustomisableDetails* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StepCustomisableDetails& () const { return *_pd_seq; }
#else
    inline operator const StepCustomisableDetails& () const { return *_pd_seq; }
    inline operator StepCustomisableDetails& () { return *_pd_seq; }
#endif
      
    inline const StepCustomisableDetails& in() const { return *_pd_seq; }
    inline StepCustomisableDetails&       inout()    { return *_pd_seq; }
    inline StepCustomisableDetails*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StepCustomisableDetails* _retn() { StepCustomisableDetails* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StepCustomisableDetails_out;
    
  private:
    StepCustomisableDetails* _pd_seq;
  };

  class StepCustomisableDetails_out {
  public:
    inline StepCustomisableDetails_out(StepCustomisableDetails*& _s) : _data(_s) { _data = 0; }
    inline StepCustomisableDetails_out(StepCustomisableDetails_var& _s)
      : _data(_s._pd_seq) { _s = (StepCustomisableDetails*) 0; }
    inline StepCustomisableDetails_out(const StepCustomisableDetails_out& _s) : _data(_s._data) {}
    inline StepCustomisableDetails_out& operator = (const StepCustomisableDetails_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StepCustomisableDetails_out& operator = (StepCustomisableDetails* _s) {
      _data = _s;
      return *this;
    }
    inline operator StepCustomisableDetails*&()  { return _data; }
    inline StepCustomisableDetails*& ptr()       { return _data; }
    inline StepCustomisableDetails* operator->() { return _data; }

    inline StepCustomisableDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StepCustomisableDetails*& _data;

  private:
    StepCustomisableDetails_out();
    StepCustomisableDetails_out& operator=(const StepCustomisableDetails_var&);
  };

  struct CustomisationHistory {
    typedef _CORBA_ConstrType_Variable_Var<CustomisationHistory> _var_type;

    
    UpdateId customUpdateId;

    StepCustomisableDetails details;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CustomisationHistory::_var_type CustomisationHistory_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CustomisationHistory,CustomisationHistory_var > CustomisationHistory_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CustomisationHistory;

  struct StepDetail {
    typedef _CORBA_ConstrType_Variable_Var<StepDetail> _var_type;

    
    StepNumber position;

    StepId step;

    ::CORBA::String_member name;

    ::CORBA::String_member description;

    EStep type;

    ::CORBA::Boolean skip;

    ::CORBA::Boolean skippable;

    ::CORBA::Boolean ignoreFailure;

    ::CORBA::Boolean nowait;

    Seconds delay;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef StepDetail::_var_type StepDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< StepDetail,StepDetail_var > StepDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepDetails;

  class StepDetails_var;

  class StepDetails : public _CORBA_Unbounded_Sequence< StepDetail >  {
  public:
    typedef StepDetails_var _var_type;
    inline StepDetails() {}
    inline StepDetails(const StepDetails& _s)
      : _CORBA_Unbounded_Sequence< StepDetail > (_s) {}

    inline StepDetails(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< StepDetail > (_max) {}
    inline StepDetails(_CORBA_ULong _max, _CORBA_ULong _len, StepDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< StepDetail > (_max, _len, _val, _rel) {}

  

    inline StepDetails& operator = (const StepDetails& _s) {
      _CORBA_Unbounded_Sequence< StepDetail > ::operator=(_s);
      return *this;
    }
  };

  class StepDetails_out;

  class StepDetails_var {
  public:
    inline StepDetails_var() : _pd_seq(0) {}
    inline StepDetails_var(StepDetails* _s) : _pd_seq(_s) {}
    inline StepDetails_var(const StepDetails_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StepDetails(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StepDetails_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StepDetails_var& operator = (StepDetails* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StepDetails_var& operator = (const StepDetails_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StepDetails;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline StepDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StepDetails* operator -> () { return _pd_seq; }
    inline const StepDetails* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StepDetails& () const { return *_pd_seq; }
#else
    inline operator const StepDetails& () const { return *_pd_seq; }
    inline operator StepDetails& () { return *_pd_seq; }
#endif
      
    inline const StepDetails& in() const { return *_pd_seq; }
    inline StepDetails&       inout()    { return *_pd_seq; }
    inline StepDetails*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StepDetails* _retn() { StepDetails* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StepDetails_out;
    
  private:
    StepDetails* _pd_seq;
  };

  class StepDetails_out {
  public:
    inline StepDetails_out(StepDetails*& _s) : _data(_s) { _data = 0; }
    inline StepDetails_out(StepDetails_var& _s)
      : _data(_s._pd_seq) { _s = (StepDetails*) 0; }
    inline StepDetails_out(const StepDetails_out& _s) : _data(_s._data) {}
    inline StepDetails_out& operator = (const StepDetails_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StepDetails_out& operator = (StepDetails* _s) {
      _data = _s;
      return *this;
    }
    inline operator StepDetails*&()  { return _data; }
    inline StepDetails*& ptr()       { return _data; }
    inline StepDetails* operator->() { return _data; }

    inline StepDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StepDetails*& _data;

  private:
    StepDetails_out();
    StepDetails_out& operator=(const StepDetails_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepNumbers;

  class StepNumbers_var;

  class StepNumbers : public _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 >  {
  public:
    typedef StepNumbers_var _var_type;
    inline StepNumbers() {}
    inline StepNumbers(const StepNumbers& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > (_s) {}

    inline StepNumbers(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > (_max) {}
    inline StepNumbers(_CORBA_ULong _max, _CORBA_ULong _len, StepNumber* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline StepNumbers& operator = (const StepNumbers& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class StepNumbers_out;

  class StepNumbers_var {
  public:
    inline StepNumbers_var() : _pd_seq(0) {}
    inline StepNumbers_var(StepNumbers* _s) : _pd_seq(_s) {}
    inline StepNumbers_var(const StepNumbers_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StepNumbers(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StepNumbers_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StepNumbers_var& operator = (StepNumbers* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StepNumbers_var& operator = (const StepNumbers_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StepNumbers;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline StepNumber& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StepNumbers* operator -> () { return _pd_seq; }
    inline const StepNumbers* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StepNumbers& () const { return *_pd_seq; }
#else
    inline operator const StepNumbers& () const { return *_pd_seq; }
    inline operator StepNumbers& () { return *_pd_seq; }
#endif
      
    inline const StepNumbers& in() const { return *_pd_seq; }
    inline StepNumbers&       inout()    { return *_pd_seq; }
    inline StepNumbers*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StepNumbers* _retn() { StepNumbers* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StepNumbers_out;
    
  private:
    StepNumbers* _pd_seq;
  };

  class StepNumbers_out {
  public:
    inline StepNumbers_out(StepNumbers*& _s) : _data(_s) { _data = 0; }
    inline StepNumbers_out(StepNumbers_var& _s)
      : _data(_s._pd_seq) { _s = (StepNumbers*) 0; }
    inline StepNumbers_out(const StepNumbers_out& _s) : _data(_s._data) {}
    inline StepNumbers_out& operator = (const StepNumbers_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StepNumbers_out& operator = (StepNumbers* _s) {
      _data = _s;
      return *this;
    }
    inline operator StepNumbers*&()  { return _data; }
    inline StepNumbers*& ptr()       { return _data; }
    inline StepNumbers* operator->() { return _data; }

    inline StepNumber& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StepNumbers*& _data;

  private:
    StepNumbers_out();
    StepNumbers_out& operator=(const StepNumbers_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepIds;

  class StepIds_var;

  class StepIds : public _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 >  {
  public:
    typedef StepIds_var _var_type;
    inline StepIds() {}
    inline StepIds(const StepIds& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > (_s) {}

    inline StepIds(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > (_max) {}
    inline StepIds(_CORBA_ULong _max, _CORBA_ULong _len, StepNumber* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline StepIds& operator = (const StepIds& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< StepNumber, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class StepIds_out;

  class StepIds_var {
  public:
    inline StepIds_var() : _pd_seq(0) {}
    inline StepIds_var(StepIds* _s) : _pd_seq(_s) {}
    inline StepIds_var(const StepIds_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StepIds(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StepIds_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StepIds_var& operator = (StepIds* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StepIds_var& operator = (const StepIds_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StepIds;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline StepNumber& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StepIds* operator -> () { return _pd_seq; }
    inline const StepIds* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StepIds& () const { return *_pd_seq; }
#else
    inline operator const StepIds& () const { return *_pd_seq; }
    inline operator StepIds& () { return *_pd_seq; }
#endif
      
    inline const StepIds& in() const { return *_pd_seq; }
    inline StepIds&       inout()    { return *_pd_seq; }
    inline StepIds*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StepIds* _retn() { StepIds* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StepIds_out;
    
  private:
    StepIds* _pd_seq;
  };

  class StepIds_out {
  public:
    inline StepIds_out(StepIds*& _s) : _data(_s) { _data = 0; }
    inline StepIds_out(StepIds_var& _s)
      : _data(_s._pd_seq) { _s = (StepIds*) 0; }
    inline StepIds_out(const StepIds_out& _s) : _data(_s._data) {}
    inline StepIds_out& operator = (const StepIds_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StepIds_out& operator = (StepIds* _s) {
      _data = _s;
      return *this;
    }
    inline operator StepIds*&()  { return _data; }
    inline StepIds*& ptr()       { return _data; }
    inline StepIds* operator->() { return _data; }

    inline StepNumber& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StepIds*& _data;

  private:
    StepIds_out();
    StepIds_out& operator=(const StepIds_var&);
  };

  struct ActivePlanId {
    typedef _CORBA_ConstrType_Fix_Var<ActivePlanId> _var_type;

    
    NodeId plan;

    ::CORBA::ULong instance;

    ::CORBA::ULong location;

    ::CORBA::ULong triggerEntity;

    ::CORBA::ULong entitykey;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ActivePlanId::_var_type ActivePlanId_var;

  typedef ActivePlanId& ActivePlanId_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActivePlanId;

  struct PlanCustomisationUpdate {
    typedef _CORBA_ConstrType_Fix_Var<PlanCustomisationUpdate> _var_type;

    
    ActivePlanId plan;

    UpdateId customUpdateId;

    StepCustomisableDetail detail;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanCustomisationUpdate::_var_type PlanCustomisationUpdate_var;

  typedef PlanCustomisationUpdate& PlanCustomisationUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanCustomisationUpdate;

  struct ActivePlanDetail {
    typedef _CORBA_ConstrType_Variable_Var<ActivePlanDetail> _var_type;

    
    ActivePlanId plan;

    ::CORBA::String_member path;

    EActivePlanState activePlanState;

    ActiveStepDetail currentStepDetail;

    UpdateId activeUpdateId;

    ::CORBA::Boolean manuallyExecuted;

    ::CORBA::ULong timer;

    ::CORBA::ULong lastStateTransitionTime;

    ::CORBA::ULong instantiationTime;

    ::CORBA::String_member remark;

    ::CORBA::String_member owner;

    ::CORBA::String_member assocAlarmId;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ActivePlanDetail::_var_type ActivePlanDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ActivePlanDetail,ActivePlanDetail_var > ActivePlanDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActivePlanDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActivePlanDetails;

  class ActivePlanDetails_var;

  class ActivePlanDetails : public _CORBA_Unbounded_Sequence< ActivePlanDetail >  {
  public:
    typedef ActivePlanDetails_var _var_type;
    inline ActivePlanDetails() {}
    inline ActivePlanDetails(const ActivePlanDetails& _s)
      : _CORBA_Unbounded_Sequence< ActivePlanDetail > (_s) {}

    inline ActivePlanDetails(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ActivePlanDetail > (_max) {}
    inline ActivePlanDetails(_CORBA_ULong _max, _CORBA_ULong _len, ActivePlanDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ActivePlanDetail > (_max, _len, _val, _rel) {}

  

    inline ActivePlanDetails& operator = (const ActivePlanDetails& _s) {
      _CORBA_Unbounded_Sequence< ActivePlanDetail > ::operator=(_s);
      return *this;
    }
  };

  class ActivePlanDetails_out;

  class ActivePlanDetails_var {
  public:
    inline ActivePlanDetails_var() : _pd_seq(0) {}
    inline ActivePlanDetails_var(ActivePlanDetails* _s) : _pd_seq(_s) {}
    inline ActivePlanDetails_var(const ActivePlanDetails_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ActivePlanDetails(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ActivePlanDetails_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ActivePlanDetails_var& operator = (ActivePlanDetails* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ActivePlanDetails_var& operator = (const ActivePlanDetails_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ActivePlanDetails;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ActivePlanDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ActivePlanDetails* operator -> () { return _pd_seq; }
    inline const ActivePlanDetails* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ActivePlanDetails& () const { return *_pd_seq; }
#else
    inline operator const ActivePlanDetails& () const { return *_pd_seq; }
    inline operator ActivePlanDetails& () { return *_pd_seq; }
#endif
      
    inline const ActivePlanDetails& in() const { return *_pd_seq; }
    inline ActivePlanDetails&       inout()    { return *_pd_seq; }
    inline ActivePlanDetails*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ActivePlanDetails* _retn() { ActivePlanDetails* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ActivePlanDetails_out;
    
  private:
    ActivePlanDetails* _pd_seq;
  };

  class ActivePlanDetails_out {
  public:
    inline ActivePlanDetails_out(ActivePlanDetails*& _s) : _data(_s) { _data = 0; }
    inline ActivePlanDetails_out(ActivePlanDetails_var& _s)
      : _data(_s._pd_seq) { _s = (ActivePlanDetails*) 0; }
    inline ActivePlanDetails_out(const ActivePlanDetails_out& _s) : _data(_s._data) {}
    inline ActivePlanDetails_out& operator = (const ActivePlanDetails_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ActivePlanDetails_out& operator = (ActivePlanDetails* _s) {
      _data = _s;
      return *this;
    }
    inline operator ActivePlanDetails*&()  { return _data; }
    inline ActivePlanDetails*& ptr()       { return _data; }
    inline ActivePlanDetails* operator->() { return _data; }

    inline ActivePlanDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ActivePlanDetails*& _data;

  private:
    ActivePlanDetails_out();
    ActivePlanDetails_out& operator=(const ActivePlanDetails_var&);
  };

  struct ActiveStepCompletionStatus {
    typedef _CORBA_ConstrType_Fix_Var<ActiveStepCompletionStatus> _var_type;

    
    NodeId plan;

    ::CORBA::ULong instance;

    StepNumber stepPosition;

    EPlanStepCompletionStatus completionStatus;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ActiveStepCompletionStatus::_var_type ActiveStepCompletionStatus_var;

  typedef ActiveStepCompletionStatus& ActiveStepCompletionStatus_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActiveStepCompletionStatus;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActiveStepCompletionStatusSeq;

  class ActiveStepCompletionStatusSeq_var;

  class ActiveStepCompletionStatusSeq : public _CORBA_Unbounded_Sequence< ActiveStepCompletionStatus >  {
  public:
    typedef ActiveStepCompletionStatusSeq_var _var_type;
    inline ActiveStepCompletionStatusSeq() {}
    inline ActiveStepCompletionStatusSeq(const ActiveStepCompletionStatusSeq& _s)
      : _CORBA_Unbounded_Sequence< ActiveStepCompletionStatus > (_s) {}

    inline ActiveStepCompletionStatusSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< ActiveStepCompletionStatus > (_max) {}
    inline ActiveStepCompletionStatusSeq(_CORBA_ULong _max, _CORBA_ULong _len, ActiveStepCompletionStatus* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< ActiveStepCompletionStatus > (_max, _len, _val, _rel) {}

  

    inline ActiveStepCompletionStatusSeq& operator = (const ActiveStepCompletionStatusSeq& _s) {
      _CORBA_Unbounded_Sequence< ActiveStepCompletionStatus > ::operator=(_s);
      return *this;
    }
  };

  class ActiveStepCompletionStatusSeq_out;

  class ActiveStepCompletionStatusSeq_var {
  public:
    inline ActiveStepCompletionStatusSeq_var() : _pd_seq(0) {}
    inline ActiveStepCompletionStatusSeq_var(ActiveStepCompletionStatusSeq* _s) : _pd_seq(_s) {}
    inline ActiveStepCompletionStatusSeq_var(const ActiveStepCompletionStatusSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ActiveStepCompletionStatusSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ActiveStepCompletionStatusSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ActiveStepCompletionStatusSeq_var& operator = (ActiveStepCompletionStatusSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ActiveStepCompletionStatusSeq_var& operator = (const ActiveStepCompletionStatusSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ActiveStepCompletionStatusSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ActiveStepCompletionStatus& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ActiveStepCompletionStatusSeq* operator -> () { return _pd_seq; }
    inline const ActiveStepCompletionStatusSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ActiveStepCompletionStatusSeq& () const { return *_pd_seq; }
#else
    inline operator const ActiveStepCompletionStatusSeq& () const { return *_pd_seq; }
    inline operator ActiveStepCompletionStatusSeq& () { return *_pd_seq; }
#endif
      
    inline const ActiveStepCompletionStatusSeq& in() const { return *_pd_seq; }
    inline ActiveStepCompletionStatusSeq&       inout()    { return *_pd_seq; }
    inline ActiveStepCompletionStatusSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ActiveStepCompletionStatusSeq* _retn() { ActiveStepCompletionStatusSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ActiveStepCompletionStatusSeq_out;
    
  private:
    ActiveStepCompletionStatusSeq* _pd_seq;
  };

  class ActiveStepCompletionStatusSeq_out {
  public:
    inline ActiveStepCompletionStatusSeq_out(ActiveStepCompletionStatusSeq*& _s) : _data(_s) { _data = 0; }
    inline ActiveStepCompletionStatusSeq_out(ActiveStepCompletionStatusSeq_var& _s)
      : _data(_s._pd_seq) { _s = (ActiveStepCompletionStatusSeq*) 0; }
    inline ActiveStepCompletionStatusSeq_out(const ActiveStepCompletionStatusSeq_out& _s) : _data(_s._data) {}
    inline ActiveStepCompletionStatusSeq_out& operator = (const ActiveStepCompletionStatusSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ActiveStepCompletionStatusSeq_out& operator = (ActiveStepCompletionStatusSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator ActiveStepCompletionStatusSeq*&()  { return _data; }
    inline ActiveStepCompletionStatusSeq*& ptr()       { return _data; }
    inline ActiveStepCompletionStatusSeq* operator->() { return _data; }

    inline ActiveStepCompletionStatus& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ActiveStepCompletionStatusSeq*& _data;

  private:
    ActiveStepCompletionStatusSeq_out();
    ActiveStepCompletionStatusSeq_out& operator=(const ActiveStepCompletionStatusSeq_var&);
  };

  struct AuxStepParam {
    typedef _CORBA_ConstrType_Variable_Var<AuxStepParam> _var_type;

    
    ParameterNumber position;

    ::CORBA::String_member value;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AuxStepParam::_var_type AuxStepParam_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AuxStepParam,AuxStepParam_var > AuxStepParam_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuxStepParam;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuxStepParameters;

  class AuxStepParameters_var;

  class AuxStepParameters : public _CORBA_Unbounded_Sequence< AuxStepParam >  {
  public:
    typedef AuxStepParameters_var _var_type;
    inline AuxStepParameters() {}
    inline AuxStepParameters(const AuxStepParameters& _s)
      : _CORBA_Unbounded_Sequence< AuxStepParam > (_s) {}

    inline AuxStepParameters(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AuxStepParam > (_max) {}
    inline AuxStepParameters(_CORBA_ULong _max, _CORBA_ULong _len, AuxStepParam* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AuxStepParam > (_max, _len, _val, _rel) {}

  

    inline AuxStepParameters& operator = (const AuxStepParameters& _s) {
      _CORBA_Unbounded_Sequence< AuxStepParam > ::operator=(_s);
      return *this;
    }
  };

  class AuxStepParameters_out;

  class AuxStepParameters_var {
  public:
    inline AuxStepParameters_var() : _pd_seq(0) {}
    inline AuxStepParameters_var(AuxStepParameters* _s) : _pd_seq(_s) {}
    inline AuxStepParameters_var(const AuxStepParameters_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AuxStepParameters(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AuxStepParameters_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AuxStepParameters_var& operator = (AuxStepParameters* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AuxStepParameters_var& operator = (const AuxStepParameters_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AuxStepParameters;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AuxStepParam& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AuxStepParameters* operator -> () { return _pd_seq; }
    inline const AuxStepParameters* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AuxStepParameters& () const { return *_pd_seq; }
#else
    inline operator const AuxStepParameters& () const { return *_pd_seq; }
    inline operator AuxStepParameters& () { return *_pd_seq; }
#endif
      
    inline const AuxStepParameters& in() const { return *_pd_seq; }
    inline AuxStepParameters&       inout()    { return *_pd_seq; }
    inline AuxStepParameters*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AuxStepParameters* _retn() { AuxStepParameters* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AuxStepParameters_out;
    
  private:
    AuxStepParameters* _pd_seq;
  };

  class AuxStepParameters_out {
  public:
    inline AuxStepParameters_out(AuxStepParameters*& _s) : _data(_s) { _data = 0; }
    inline AuxStepParameters_out(AuxStepParameters_var& _s)
      : _data(_s._pd_seq) { _s = (AuxStepParameters*) 0; }
    inline AuxStepParameters_out(const AuxStepParameters_out& _s) : _data(_s._data) {}
    inline AuxStepParameters_out& operator = (const AuxStepParameters_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AuxStepParameters_out& operator = (AuxStepParameters* _s) {
      _data = _s;
      return *this;
    }
    inline operator AuxStepParameters*&()  { return _data; }
    inline AuxStepParameters*& ptr()       { return _data; }
    inline AuxStepParameters* operator->() { return _data; }

    inline AuxStepParam& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AuxStepParameters*& _data;

  private:
    AuxStepParameters_out();
    AuxStepParameters_out& operator=(const AuxStepParameters_var&);
  };

  struct AuxStepDetail {
    typedef _CORBA_ConstrType_Variable_Var<AuxStepDetail> _var_type;

    
    ::CORBA::String_member name;

    EStep type;

    ::CORBA::String_member description;

    StepNumber position;

    ::CORBA::Boolean skip;

    ::CORBA::Boolean skippable;

    ::CORBA::Boolean ignoreFailure;

    ::CORBA::Boolean nowait;

    Seconds delay;

    AuxStepParameters stepParams;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AuxStepDetail::_var_type AuxStepDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AuxStepDetail,AuxStepDetail_var > AuxStepDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuxStepDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuxSteps;

  class AuxSteps_var;

  class AuxSteps : public _CORBA_Unbounded_Sequence< AuxStepDetail >  {
  public:
    typedef AuxSteps_var _var_type;
    inline AuxSteps() {}
    inline AuxSteps(const AuxSteps& _s)
      : _CORBA_Unbounded_Sequence< AuxStepDetail > (_s) {}

    inline AuxSteps(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AuxStepDetail > (_max) {}
    inline AuxSteps(_CORBA_ULong _max, _CORBA_ULong _len, AuxStepDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AuxStepDetail > (_max, _len, _val, _rel) {}

  

    inline AuxSteps& operator = (const AuxSteps& _s) {
      _CORBA_Unbounded_Sequence< AuxStepDetail > ::operator=(_s);
      return *this;
    }
  };

  class AuxSteps_out;

  class AuxSteps_var {
  public:
    inline AuxSteps_var() : _pd_seq(0) {}
    inline AuxSteps_var(AuxSteps* _s) : _pd_seq(_s) {}
    inline AuxSteps_var(const AuxSteps_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AuxSteps(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AuxSteps_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AuxSteps_var& operator = (AuxSteps* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AuxSteps_var& operator = (const AuxSteps_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AuxSteps;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AuxStepDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AuxSteps* operator -> () { return _pd_seq; }
    inline const AuxSteps* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AuxSteps& () const { return *_pd_seq; }
#else
    inline operator const AuxSteps& () const { return *_pd_seq; }
    inline operator AuxSteps& () { return *_pd_seq; }
#endif
      
    inline const AuxSteps& in() const { return *_pd_seq; }
    inline AuxSteps&       inout()    { return *_pd_seq; }
    inline AuxSteps*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AuxSteps* _retn() { AuxSteps* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AuxSteps_out;
    
  private:
    AuxSteps* _pd_seq;
  };

  class AuxSteps_out {
  public:
    inline AuxSteps_out(AuxSteps*& _s) : _data(_s) { _data = 0; }
    inline AuxSteps_out(AuxSteps_var& _s)
      : _data(_s._pd_seq) { _s = (AuxSteps*) 0; }
    inline AuxSteps_out(const AuxSteps_out& _s) : _data(_s._data) {}
    inline AuxSteps_out& operator = (const AuxSteps_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AuxSteps_out& operator = (AuxSteps* _s) {
      _data = _s;
      return *this;
    }
    inline operator AuxSteps*&()  { return _data; }
    inline AuxSteps*& ptr()       { return _data; }
    inline AuxSteps* operator->() { return _data; }

    inline AuxStepDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AuxSteps*& _data;

  private:
    AuxSteps_out();
    AuxSteps_out& operator=(const AuxSteps_var&);
  };

  struct AuxPlanDetail {
    typedef _CORBA_ConstrType_Variable_Var<AuxPlanDetail> _var_type;

    
    ::CORBA::String_member name;

    ::CORBA::String_member description;

    AuxSteps steps;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AuxPlanDetail::_var_type AuxPlanDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AuxPlanDetail,AuxPlanDetail_var > AuxPlanDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuxPlanDetail;

  struct FailedStepDetail {
    typedef _CORBA_ConstrType_Variable_Var<FailedStepDetail> _var_type;

    
    StepNumber position;

    ::CORBA::String_member name;

    ::CORBA::String_member error;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef FailedStepDetail::_var_type FailedStepDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< FailedStepDetail,FailedStepDetail_var > FailedStepDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FailedStepDetail;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FailedStepDetails;

  class FailedStepDetails_var;

  class FailedStepDetails : public _CORBA_Unbounded_Sequence< FailedStepDetail >  {
  public:
    typedef FailedStepDetails_var _var_type;
    inline FailedStepDetails() {}
    inline FailedStepDetails(const FailedStepDetails& _s)
      : _CORBA_Unbounded_Sequence< FailedStepDetail > (_s) {}

    inline FailedStepDetails(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< FailedStepDetail > (_max) {}
    inline FailedStepDetails(_CORBA_ULong _max, _CORBA_ULong _len, FailedStepDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< FailedStepDetail > (_max, _len, _val, _rel) {}

  

    inline FailedStepDetails& operator = (const FailedStepDetails& _s) {
      _CORBA_Unbounded_Sequence< FailedStepDetail > ::operator=(_s);
      return *this;
    }
  };

  class FailedStepDetails_out;

  class FailedStepDetails_var {
  public:
    inline FailedStepDetails_var() : _pd_seq(0) {}
    inline FailedStepDetails_var(FailedStepDetails* _s) : _pd_seq(_s) {}
    inline FailedStepDetails_var(const FailedStepDetails_var& _s) {
      if( _s._pd_seq )  _pd_seq = new FailedStepDetails(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~FailedStepDetails_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline FailedStepDetails_var& operator = (FailedStepDetails* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline FailedStepDetails_var& operator = (const FailedStepDetails_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new FailedStepDetails;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline FailedStepDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline FailedStepDetails* operator -> () { return _pd_seq; }
    inline const FailedStepDetails* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator FailedStepDetails& () const { return *_pd_seq; }
#else
    inline operator const FailedStepDetails& () const { return *_pd_seq; }
    inline operator FailedStepDetails& () { return *_pd_seq; }
#endif
      
    inline const FailedStepDetails& in() const { return *_pd_seq; }
    inline FailedStepDetails&       inout()    { return *_pd_seq; }
    inline FailedStepDetails*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline FailedStepDetails* _retn() { FailedStepDetails* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class FailedStepDetails_out;
    
  private:
    FailedStepDetails* _pd_seq;
  };

  class FailedStepDetails_out {
  public:
    inline FailedStepDetails_out(FailedStepDetails*& _s) : _data(_s) { _data = 0; }
    inline FailedStepDetails_out(FailedStepDetails_var& _s)
      : _data(_s._pd_seq) { _s = (FailedStepDetails*) 0; }
    inline FailedStepDetails_out(const FailedStepDetails_out& _s) : _data(_s._data) {}
    inline FailedStepDetails_out& operator = (const FailedStepDetails_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline FailedStepDetails_out& operator = (FailedStepDetails* _s) {
      _data = _s;
      return *this;
    }
    inline operator FailedStepDetails*&()  { return _data; }
    inline FailedStepDetails*& ptr()       { return _data; }
    inline FailedStepDetails* operator->() { return _data; }

    inline FailedStepDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    FailedStepDetails*& _data;

  private:
    FailedStepDetails_out();
    FailedStepDetails_out& operator=(const FailedStepDetails_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EndParameters;

  typedef ::CORBA::ULong EndParameters;
  typedef ::CORBA::ULong_out EndParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AbortParameters;

  typedef ::CORBA::ULong AbortParameters;
  typedef ::CORBA::ULong_out AbortParameters_out;

  struct ActivePlanCheckParameters {
    typedef _CORBA_ConstrType_Fix_Var<ActivePlanCheckParameters> _var_type;

    
    NodeId plan;

    StepId yesStep;

    StepId noStep;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ActivePlanCheckParameters::_var_type ActivePlanCheckParameters_var;

  typedef ActivePlanCheckParameters& ActivePlanCheckParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActivePlanCheckParameters;

  struct AssignCameraToMonitorParameters {
    typedef _CORBA_ConstrType_Fix_Var<AssignCameraToMonitorParameters> _var_type;

    
    ParameterKey camera;

    ParameterKey monitor;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AssignCameraToMonitorParameters::_var_type AssignCameraToMonitorParameters_var;

  typedef AssignCameraToMonitorParameters& AssignCameraToMonitorParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AssignCameraToMonitorParameters;

  struct ActivateCameraPresetParameters {
    typedef _CORBA_ConstrType_Fix_Var<ActivateCameraPresetParameters> _var_type;

    
    ParameterKey camera;

    ParameterKey preset;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ActivateCameraPresetParameters::_var_type ActivateCameraPresetParameters_var;

  typedef ActivateCameraPresetParameters& ActivateCameraPresetParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ActivateCameraPresetParameters;

  struct DataPointCheckParameters {
    typedef _CORBA_ConstrType_Variable_Var<DataPointCheckParameters> _var_type;

    
    ::CORBA::String_member dataPoint;

    DataPointValue value;

    EDataPointTest testType;

    StepId successStep;

    StepId failureStep;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DataPointCheckParameters::_var_type DataPointCheckParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DataPointCheckParameters,DataPointCheckParameters_var > DataPointCheckParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataPointCheckParameters;

  struct DataPointSetParameters {
    typedef _CORBA_ConstrType_Variable_Var<DataPointSetParameters> _var_type;

    
    ::CORBA::String_member dataPoint;

    DataPointValue newValue;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DataPointSetParameters::_var_type DataPointSetParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DataPointSetParameters,DataPointSetParameters_var > DataPointSetParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataPointSetParameters;

  struct DecisionParameters {
    typedef _CORBA_ConstrType_Variable_Var<DecisionParameters> _var_type;

    
    ::CORBA::String_member decisionMessage;

    Seconds responseTimeout;

    StepId yesStep;

    StepId noStep;

    ::CORBA::String_member yesButtonLabel;

    ::CORBA::String_member noButtonLabel;

    ::CORBA::String_member pauseButtonLabel;

    ::CORBA::Boolean noButtonEnabled;

    ::CORBA::Boolean pauseButtonEnabled;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DecisionParameters::_var_type DecisionParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DecisionParameters,DecisionParameters_var > DecisionParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DecisionParameters;

  struct JumpParameters {
    typedef _CORBA_ConstrType_Fix_Var<JumpParameters> _var_type;

    
    StepId step;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef JumpParameters::_var_type JumpParameters_var;

  typedef JumpParameters& JumpParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_JumpParameters;

  struct LogParameters {
    typedef _CORBA_ConstrType_Variable_Var<LogParameters> _var_type;

    
    ::CORBA::String_member message;

    ::CORBA::Boolean logRequired;

    Seconds responseTimeout;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LogParameters::_var_type LogParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< LogParameters,LogParameters_var > LogParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LogParameters;

  struct PromptParameters {
    typedef _CORBA_ConstrType_Variable_Var<PromptParameters> _var_type;

    
    ::CORBA::String_member message;

    Seconds dismissTimeout;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PromptParameters::_var_type PromptParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PromptParameters,PromptParameters_var > PromptParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PromptParameters;

  struct RunPlanParameters {
    typedef _CORBA_ConstrType_Fix_Var<RunPlanParameters> _var_type;

    
    NodeId plan;

    ::CORBA::Boolean manualLaunch;

    ::CORBA::Boolean waitForCompletion;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef RunPlanParameters::_var_type RunPlanParameters_var;

  typedef RunPlanParameters& RunPlanParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RunPlanParameters;

  struct TerminatePlanParameters {
    typedef _CORBA_ConstrType_Fix_Var<TerminatePlanParameters> _var_type;

    
    NodeId plan;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TerminatePlanParameters::_var_type TerminatePlanParameters_var;

  typedef TerminatePlanParameters& TerminatePlanParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TerminatePlanParameters;

  struct VmsSetSceneParameters {
    typedef _CORBA_ConstrType_Fix_Var<VmsSetSceneParameters> _var_type;

    
    ParameterKey vmsSign;

    ParameterKey scene;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef VmsSetSceneParameters::_var_type VmsSetSceneParameters_var;

  typedef VmsSetSceneParameters& VmsSetSceneParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VmsSetSceneParameters;

  struct VmsRestoreScheduleParameters {
    typedef _CORBA_ConstrType_Fix_Var<VmsRestoreScheduleParameters> _var_type;

    
    ParameterKey vmsSign;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef VmsRestoreScheduleParameters::_var_type VmsRestoreScheduleParameters_var;

  typedef VmsRestoreScheduleParameters& VmsRestoreScheduleParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VmsRestoreScheduleParameters;

  struct VmsBlankoutParameters {
    typedef _CORBA_ConstrType_Fix_Var<VmsBlankoutParameters> _var_type;

    
    ParameterKey vmsSign;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef VmsBlankoutParameters::_var_type VmsBlankoutParameters_var;

  typedef VmsBlankoutParameters& VmsBlankoutParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VmsBlankoutParameters;

  struct WindowPosition {
    typedef _CORBA_ConstrType_Fix_Var<WindowPosition> _var_type;

    
    ::CORBA::ULong top;

    ::CORBA::ULong left;

    ::CORBA::ULong width;

    ::CORBA::ULong height;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef WindowPosition::_var_type WindowPosition_var;

  typedef WindowPosition& WindowPosition_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_WindowPosition;

  struct LaunchGuiAppParameters {
    typedef _CORBA_ConstrType_Variable_Var<LaunchGuiAppParameters> _var_type;

    
    AppType app;

    ::CORBA::String_member args;

    WindowPosition pos;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LaunchGuiAppParameters::_var_type LaunchGuiAppParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< LaunchGuiAppParameters,LaunchGuiAppParameters_var > LaunchGuiAppParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LaunchGuiAppParameters;

  struct VideoWallParameters {
    typedef _CORBA_ConstrType_Fix_Var<VideoWallParameters> _var_type;

    
    ParameterKey wallBoard;

    ParameterKey layout;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef VideoWallParameters::_var_type VideoWallParameters_var;

  typedef VideoWallParameters& VideoWallParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoWallParameters;

  struct PlanCheckTimerParameters {
    typedef _CORBA_ConstrType_Fix_Var<PlanCheckTimerParameters> _var_type;

    
    Seconds timeSpan;

    StepId successStep;

    StepId failureStep;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanCheckTimerParameters::_var_type PlanCheckTimerParameters_var;

  typedef PlanCheckTimerParameters& PlanCheckTimerParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanCheckTimerParameters;

  struct PlanSetTimerParameters {
    typedef _CORBA_ConstrType_Fix_Var<PlanSetTimerParameters> _var_type;

    
    Seconds time;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanSetTimerParameters::_var_type PlanSetTimerParameters_var;

  typedef PlanSetTimerParameters& PlanSetTimerParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanSetTimerParameters;

  struct ExecuteScriptParameters {
    typedef _CORBA_ConstrType_Variable_Var<ExecuteScriptParameters> _var_type;

    
    ::CORBA::String_member commands;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ExecuteScriptParameters::_var_type ExecuteScriptParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ExecuteScriptParameters,ExecuteScriptParameters_var > ExecuteScriptParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ExecuteScriptParameters;

  struct DataPointTimeCheckParameters {
    typedef _CORBA_ConstrType_Variable_Var<DataPointTimeCheckParameters> _var_type;

    
    ::CORBA::String_member dataPoint;

    Seconds timeSpan;

    StepId successStep;

    StepId failureStep;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DataPointTimeCheckParameters::_var_type DataPointTimeCheckParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DataPointTimeCheckParameters,DataPointTimeCheckParameters_var > DataPointTimeCheckParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataPointTimeCheckParameters;

  struct PopupMFTMessageParameters {
    typedef _CORBA_ConstrType_Variable_Var<PopupMFTMessageParameters> _var_type;

    
    ::CORBA::String_member decisionMessage;

    ::CORBA::ULong messageBoxType;

    StepId abortStep;

    StepId retryStep;

    StepId ignoreStep;

    StepId okStep;

    StepId cancelStep;

    StepId yesStep;

    StepId noStep;

    StepId pendingStep;

    ProfileNumber operatorProfileNumber;

    ::CORBA::ULong timeSpan;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PopupMFTMessageParameters::_var_type PopupMFTMessageParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PopupMFTMessageParameters,PopupMFTMessageParameters_var > PopupMFTMessageParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PopupMFTMessageParameters;

  struct ShutdownSystemParameters {
    typedef _CORBA_ConstrType_Fix_Var<ShutdownSystemParameters> _var_type;

    
    ::CORBA::Boolean notifyPeer;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ShutdownSystemParameters::_var_type ShutdownSystemParameters_var;

  typedef ShutdownSystemParameters& ShutdownSystemParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ShutdownSystemParameters;

  struct StationDestination {
    typedef _CORBA_ConstrType_Variable_Var<StationDestination> _var_type;

    
    ::CORBA::ULong locationKey;

    ::CORBA::String_member station;

    ::CORBA::Boolean allStations;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef StationDestination::_var_type StationDestination_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< StationDestination,StationDestination_var > StationDestination_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationDestination;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationZones;

  class StationZones_var;

  class StationZones : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
  public:
    typedef StationZones_var _var_type;
    inline StationZones() {}
    inline StationZones(const StationZones& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

    inline StationZones(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
    inline StationZones(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

  

    inline StationZones& operator = (const StationZones& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
      return *this;
    }
  };

  class StationZones_out;

  class StationZones_var {
  public:
    inline StationZones_var() : _pd_seq(0) {}
    inline StationZones_var(StationZones* _s) : _pd_seq(_s) {}
    inline StationZones_var(const StationZones_var& _s) {
      if( _s._pd_seq )  _pd_seq = new StationZones(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~StationZones_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline StationZones_var& operator = (StationZones* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StationZones_var& operator = (const StationZones_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new StationZones;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StationZones* operator -> () { return _pd_seq; }
    inline const StationZones* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StationZones& () const { return *_pd_seq; }
#else
    inline operator const StationZones& () const { return *_pd_seq; }
    inline operator StationZones& () { return *_pd_seq; }
#endif
      
    inline const StationZones& in() const { return *_pd_seq; }
    inline StationZones&       inout()    { return *_pd_seq; }
    inline StationZones*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StationZones* _retn() { StationZones* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StationZones_out;
    
  private:
    StationZones* _pd_seq;
  };

  class StationZones_out {
  public:
    inline StationZones_out(StationZones*& _s) : _data(_s) { _data = 0; }
    inline StationZones_out(StationZones_var& _s)
      : _data(_s._pd_seq) { _s = (StationZones*) 0; }
    inline StationZones_out(const StationZones_out& _s) : _data(_s._data) {}
    inline StationZones_out& operator = (const StationZones_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StationZones_out& operator = (StationZones* _s) {
      _data = _s;
      return *this;
    }
    inline operator StationZones*&()  { return _data; }
    inline StationZones*& ptr()       { return _data; }
    inline StationZones* operator->() { return _data; }

    inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StationZones*& _data;

  private:
    StationZones_out();
    StationZones_out& operator=(const StationZones_var&);
  };

  struct PAMessage {
    typedef _CORBA_ConstrType_Fix_Var<PAMessage> _var_type;

    
    ::CORBA::UShort libVersion;

    ::CORBA::UShort libSection;

    ::CORBA::ULong messageId;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PAMessage::_var_type PAMessage_var;

  typedef PAMessage& PAMessage_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PAMessage;

  struct StationPublicAddressParameters {
    typedef _CORBA_ConstrType_Variable_Var<StationPublicAddressParameters> _var_type;

    
    StationDestination station;

    StationZones zones;

    PAMessage message;

    ::CORBA::Boolean chime;

    ::CORBA::Boolean cyclic;

    ::CORBA::Boolean TISSynch;

    Seconds duration;

    Seconds interval;

    ::CORBA::ULong cyclicTimes;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef StationPublicAddressParameters::_var_type StationPublicAddressParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< StationPublicAddressParameters,StationPublicAddressParameters_var > StationPublicAddressParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationPublicAddressParameters;

  struct SendSmsMessageParameters {
    typedef _CORBA_ConstrType_Variable_Var<SendSmsMessageParameters> _var_type;

    
    ::CORBA::String_member recipientIdentifier;

    ::CORBA::String_member textMessage;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef SendSmsMessageParameters::_var_type SendSmsMessageParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< SendSmsMessageParameters,SendSmsMessageParameters_var > SendSmsMessageParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SendSmsMessageParameters;

  struct LaunchSchematicParameters {
    typedef _CORBA_ConstrType_Variable_Var<LaunchSchematicParameters> _var_type;

    
    ::CORBA::String_member schematic;

    ::CORBA::ULong screen;

    ::CORBA::String_member commands;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LaunchSchematicParameters::_var_type LaunchSchematicParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< LaunchSchematicParameters,LaunchSchematicParameters_var > LaunchSchematicParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LaunchSchematicParameters;

  struct BackgroundLaunchSchematicParameters {
    typedef _CORBA_ConstrType_Variable_Var<BackgroundLaunchSchematicParameters> _var_type;

    
    ::CORBA::String_member schematic;

    ::CORBA::ULong screen;

    ::CORBA::String_member commands;

    ActionType actionTypeKey;

    ::CORBA::ULong dataPoint;

    ::CORBA::ULong profile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BackgroundLaunchSchematicParameters::_var_type BackgroundLaunchSchematicParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< BackgroundLaunchSchematicParameters,BackgroundLaunchSchematicParameters_var > BackgroundLaunchSchematicParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BackgroundLaunchSchematicParameters;

  struct BackgroundLaunchGuiAppParameters {
    typedef _CORBA_ConstrType_Variable_Var<BackgroundLaunchGuiAppParameters> _var_type;

    
    AppType app;

    ::CORBA::String_member args;

    WindowPosition pos;

    ::CORBA::Boolean bAddTriggerEntity;

    ActionType actionTypeKey;

    ::CORBA::ULong dataPoint;

    ::CORBA::Boolean bTriggerEntityCheckAction;

    ::CORBA::ULong profile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BackgroundLaunchGuiAppParameters::_var_type BackgroundLaunchGuiAppParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< BackgroundLaunchGuiAppParameters,BackgroundLaunchGuiAppParameters_var > BackgroundLaunchGuiAppParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BackgroundLaunchGuiAppParameters;

  struct BackgroundDecisionParameters {
    typedef _CORBA_ConstrType_Variable_Var<BackgroundDecisionParameters> _var_type;

    
    ::CORBA::String_member decisionMessage;

    Seconds responseTimeout;

    StepId yesStep;

    StepId noStep;

    ::CORBA::String_member yesButtonLabel;

    ::CORBA::String_member noButtonLabel;

    ::CORBA::String_member pauseButtonLabel;

    ::CORBA::Boolean noButtonEnabled;

    ::CORBA::Boolean pauseButtonEnabled;

    ::CORBA::ULong profile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BackgroundDecisionParameters::_var_type BackgroundDecisionParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< BackgroundDecisionParameters,BackgroundDecisionParameters_var > BackgroundDecisionParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BackgroundDecisionParameters;

  struct BackgroundLogParameters {
    typedef _CORBA_ConstrType_Variable_Var<BackgroundLogParameters> _var_type;

    
    ::CORBA::String_member message;

    ::CORBA::Boolean logRequired;

    Seconds responseTimeout;

    ::CORBA::ULong profile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BackgroundLogParameters::_var_type BackgroundLogParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< BackgroundLogParameters,BackgroundLogParameters_var > BackgroundLogParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BackgroundLogParameters;

  struct BackgroundPromptParameters {
    typedef _CORBA_ConstrType_Variable_Var<BackgroundPromptParameters> _var_type;

    
    ::CORBA::String_member message;

    Seconds dismissTimeout;

    ::CORBA::ULong profile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BackgroundPromptParameters::_var_type BackgroundPromptParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< BackgroundPromptParameters,BackgroundPromptParameters_var > BackgroundPromptParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BackgroundPromptParameters;

  struct TrainDestination {
    typedef _CORBA_ConstrType_Fix_Var<TrainDestination> _var_type;

    
    ::CORBA::UShort trainId;

    ETrainGroup trainGroup;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TrainDestination::_var_type TrainDestination_var;

  typedef TrainDestination& TrainDestination_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainDestination;

  struct TISMessage {
    typedef _CORBA_ConstrType_Fix_Var<TISMessage> _var_type;

    
    ::CORBA::UShort libraryVersion;

    ::CORBA::UShort librarySection;

    ::CORBA::UShort messageId;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TISMessage::_var_type TISMessage_var;

  typedef TISMessage& TISMessage_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TISMessage;

  struct EvaluateExpressionParameters {
    typedef _CORBA_ConstrType_Variable_Var<EvaluateExpressionParameters> _var_type;

    
    ::CORBA::String_member expression;

    StepId successStep;

    StepId failureStep;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef EvaluateExpressionParameters::_var_type EvaluateExpressionParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< EvaluateExpressionParameters,EvaluateExpressionParameters_var > EvaluateExpressionParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EvaluateExpressionParameters;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PidsMessage;

  class PidsMessage_var;

  class PidsMessage : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef PidsMessage_var _var_type;
    inline PidsMessage() {}
    inline PidsMessage(const PidsMessage& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline PidsMessage(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline PidsMessage(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline PidsMessage& operator = (const PidsMessage& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class PidsMessage_out;

  class PidsMessage_var {
  public:
    inline PidsMessage_var() : _pd_seq(0) {}
    inline PidsMessage_var(PidsMessage* _s) : _pd_seq(_s) {}
    inline PidsMessage_var(const PidsMessage_var& _s) {
      if( _s._pd_seq )  _pd_seq = new PidsMessage(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~PidsMessage_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline PidsMessage_var& operator = (PidsMessage* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline PidsMessage_var& operator = (const PidsMessage_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new PidsMessage;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline PidsMessage* operator -> () { return _pd_seq; }
    inline const PidsMessage* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator PidsMessage& () const { return *_pd_seq; }
#else
    inline operator const PidsMessage& () const { return *_pd_seq; }
    inline operator PidsMessage& () { return *_pd_seq; }
#endif
      
    inline const PidsMessage& in() const { return *_pd_seq; }
    inline PidsMessage&       inout()    { return *_pd_seq; }
    inline PidsMessage*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline PidsMessage* _retn() { PidsMessage* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class PidsMessage_out;
    
  private:
    PidsMessage* _pd_seq;
  };

  class PidsMessage_out {
  public:
    inline PidsMessage_out(PidsMessage*& _s) : _data(_s) { _data = 0; }
    inline PidsMessage_out(PidsMessage_var& _s)
      : _data(_s._pd_seq) { _s = (PidsMessage*) 0; }
    inline PidsMessage_out(const PidsMessage_out& _s) : _data(_s._data) {}
    inline PidsMessage_out& operator = (const PidsMessage_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline PidsMessage_out& operator = (PidsMessage* _s) {
      _data = _s;
      return *this;
    }
    inline operator PidsMessage*&()  { return _data; }
    inline PidsMessage*& ptr()       { return _data; }
    inline PidsMessage* operator->() { return _data; }

    inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    PidsMessage*& _data;

  private:
    PidsMessage_out();
    PidsMessage_out& operator=(const PidsMessage_var&);
  };

  struct PidsDestination {
    typedef _CORBA_ConstrType_Fix_Var<PidsDestination> _var_type;

    
    ::CORBA::Short station;

    ::CORBA::Boolean gateway;

    ::CORBA::Boolean downTrack;

    ::CORBA::Boolean upTrack;

    ::CORBA::Boolean concourse;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PidsDestination::_var_type PidsDestination_var;

  typedef PidsDestination& PidsDestination_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PidsDestination;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PidsDestinationList;

  class PidsDestinationList_var;

  class PidsDestinationList : public _CORBA_Unbounded_Sequence< PidsDestination >  {
  public:
    typedef PidsDestinationList_var _var_type;
    inline PidsDestinationList() {}
    inline PidsDestinationList(const PidsDestinationList& _s)
      : _CORBA_Unbounded_Sequence< PidsDestination > (_s) {}

    inline PidsDestinationList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< PidsDestination > (_max) {}
    inline PidsDestinationList(_CORBA_ULong _max, _CORBA_ULong _len, PidsDestination* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< PidsDestination > (_max, _len, _val, _rel) {}

  

    inline PidsDestinationList& operator = (const PidsDestinationList& _s) {
      _CORBA_Unbounded_Sequence< PidsDestination > ::operator=(_s);
      return *this;
    }
  };

  class PidsDestinationList_out;

  class PidsDestinationList_var {
  public:
    inline PidsDestinationList_var() : _pd_seq(0) {}
    inline PidsDestinationList_var(PidsDestinationList* _s) : _pd_seq(_s) {}
    inline PidsDestinationList_var(const PidsDestinationList_var& _s) {
      if( _s._pd_seq )  _pd_seq = new PidsDestinationList(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~PidsDestinationList_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline PidsDestinationList_var& operator = (PidsDestinationList* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline PidsDestinationList_var& operator = (const PidsDestinationList_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new PidsDestinationList;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline PidsDestination& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline PidsDestinationList* operator -> () { return _pd_seq; }
    inline const PidsDestinationList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator PidsDestinationList& () const { return *_pd_seq; }
#else
    inline operator const PidsDestinationList& () const { return *_pd_seq; }
    inline operator PidsDestinationList& () { return *_pd_seq; }
#endif
      
    inline const PidsDestinationList& in() const { return *_pd_seq; }
    inline PidsDestinationList&       inout()    { return *_pd_seq; }
    inline PidsDestinationList*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline PidsDestinationList* _retn() { PidsDestinationList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class PidsDestinationList_out;
    
  private:
    PidsDestinationList* _pd_seq;
  };

  class PidsDestinationList_out {
  public:
    inline PidsDestinationList_out(PidsDestinationList*& _s) : _data(_s) { _data = 0; }
    inline PidsDestinationList_out(PidsDestinationList_var& _s)
      : _data(_s._pd_seq) { _s = (PidsDestinationList*) 0; }
    inline PidsDestinationList_out(const PidsDestinationList_out& _s) : _data(_s._data) {}
    inline PidsDestinationList_out& operator = (const PidsDestinationList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline PidsDestinationList_out& operator = (PidsDestinationList* _s) {
      _data = _s;
      return *this;
    }
    inline operator PidsDestinationList*&()  { return _data; }
    inline PidsDestinationList*& ptr()       { return _data; }
    inline PidsDestinationList* operator->() { return _data; }

    inline PidsDestination& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    PidsDestinationList*& _data;

  private:
    PidsDestinationList_out();
    PidsDestinationList_out& operator=(const PidsDestinationList_var&);
  };

  struct MessageTime {
    typedef _CORBA_ConstrType_Fix_Var<MessageTime> _var_type;

    
    ::CORBA::Long year;

    ::CORBA::Long month;

    ::CORBA::Long day;

    ::CORBA::Long hour;

    ::CORBA::Long minute;

    ::CORBA::Long second;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef MessageTime::_var_type MessageTime_var;

  typedef MessageTime& MessageTime_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MessageTime;

  struct StationTravellerInfoSystemParameters {
    typedef _CORBA_ConstrType_Variable_Var<StationTravellerInfoSystemParameters> _var_type;

    
    TISPidList pidList;

    PidsDestinationList destinationList;

    PidsMessage messageContent;

    ::CORBA::Boolean msgType;

    ::CORBA::Boolean showType;

    ::CORBA::Boolean isTrain;

    MessageTime startTime;

    MessageTime endTime;

    ::CORBA::Long interval;

    ::CORBA::Boolean isCyclic;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef StationTravellerInfoSystemParameters::_var_type StationTravellerInfoSystemParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< StationTravellerInfoSystemParameters,StationTravellerInfoSystemParameters_var > StationTravellerInfoSystemParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationTravellerInfoSystemParameters;

  struct TrainTravellerInfoSystemParameters {
    typedef _CORBA_ConstrType_Fix_Var<TrainTravellerInfoSystemParameters> _var_type;

    
    TrainDestination destination;

    TISMessage message;

    ::CORBA::UShort priority;

    Minutes duration;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TrainTravellerInfoSystemParameters::_var_type TrainTravellerInfoSystemParameters_var;

  typedef TrainTravellerInfoSystemParameters& TrainTravellerInfoSystemParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainTravellerInfoSystemParameters;

  struct TrainPublicAddressParameters {
    typedef _CORBA_ConstrType_Fix_Var<TrainPublicAddressParameters> _var_type;

    
    TrainDestination destination;

    PAMessage message;

    ::CORBA::Boolean cyclic;

    Minutes duration;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TrainPublicAddressParameters::_var_type TrainPublicAddressParameters_var;

  typedef TrainPublicAddressParameters& TrainPublicAddressParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainPublicAddressParameters;

  enum EStepFailureCategory { SFC_ALL_STEPS, SFC_SET_DATA_POINT_STEPS, SFC_UNDEFINED /*, __max_EStepFailureCategory=0xffffffff */ };
  typedef EStepFailureCategory& EStepFailureCategory_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EStepFailureCategory;

  struct FailureSummaryParameters {
    typedef _CORBA_ConstrType_Fix_Var<FailureSummaryParameters> _var_type;

    
    EStepFailureCategory failureCategory;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef FailureSummaryParameters::_var_type FailureSummaryParameters_var;

  typedef FailureSummaryParameters& FailureSummaryParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FailureSummaryParameters;

  struct StationPublicAddressByAlarmParameters {
    typedef _CORBA_ConstrType_Variable_Var<StationPublicAddressByAlarmParameters> _var_type;

    
    ::CORBA::String_member message;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef StationPublicAddressByAlarmParameters::_var_type StationPublicAddressByAlarmParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< StationPublicAddressByAlarmParameters,StationPublicAddressByAlarmParameters_var > StationPublicAddressByAlarmParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationPublicAddressByAlarmParameters;

  class StepParameters {
  public:

    typedef _CORBA_ConstrType_Variable_Var<StepParameters> _var_type;

    

    StepParameters(): _pd__initialised(0) {
      _default();

  
    }
    
    StepParameters(const StepParameters& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case END_STEP: end(_value._pd_end); break;

          case ABORT_STEP: abort(_value._pd_abort); break;

          case ACTIVE_PLAN_CHECK_STEP: activePlanCheck(_value._pd_activePlanCheck); break;

          case ASSIGN_CAMERA_TO_MONITOR_STEP: cameraMonitor(_value._pd_cameraMonitor); break;

          case ACTIVATE_CAMERA_PRESET_STEP: cameraPreset(_value._pd_cameraPreset); break;

          case DATA_POINT_CHECK_STEP: dataPointCheck(_value._pd_dataPointCheck); break;

          case DATA_POINT_SET_STEP: dataPointSet(_value._pd_dataPointSet); break;

          case DECISION_STEP: decision(_value._pd_decision); break;

          case JUMP_STEP: jump(_value._pd_jump); break;

          case LOG_STEP: log(_value._pd_log); break;

          case PROMPT_STEP: prompt(_value._pd_prompt); break;

          case RUN_PLAN_STEP: runPlan(_value._pd_runPlan); break;

          case TERMINATE_PLAN_STEP: terminatePlan(_value._pd_terminatePlan); break;

          case VMS_SET_SCENE_STEP: vmsSetScene(_value._pd_vmsSetScene); break;

          case LAUNCH_GUI_APP_STEP: guiAppParameters(_value._pd_guiAppParameters); break;

          case VMS_BLANKOUT_STEP: vmsBlankout(_value._pd_vmsBlankout); break;

          case VMS_RESTORE_SCHEDULE_STEP: vmsRestoreSchedule(_value._pd_vmsRestoreSchedule); break;

          case VIDEO_WALL_STEP: videoWallParams(_value._pd_videoWallParams); break;

          case STATION_PUBLIC_ADDRESS_STEP: stationPublicAddress(_value._pd_stationPublicAddress); break;

          case TRAIN_PUBLIC_ADDRESS_STEP: trainPublicAddress(_value._pd_trainPublicAddress); break;

          case SEND_SMS_MESSAGE_STEP: sendSmsMessage(_value._pd_sendSmsMessage); break;

          case LAUNCH_SCHEMATIC_STEP: launchSchematic(_value._pd_launchSchematic); break;

          case EVALUATE_EXPRESSION_STEP: evaluateExpression(_value._pd_evaluateExpression); break;

          case STATION_TRAVELLER_INFO_SYSTEM_STEP: stationTravellerInfoSystem(_value._pd_stationTravellerInfoSystem); break;

          case TRAIN_TRAVELLER_INFO_SYSTEM_STEP: trainTravellerInfoSystem(_value._pd_trainTravellerInfoSystem); break;

          case FAILURE_SUMMARY_STEP: failureSummary(_value._pd_failureSummary); break;

          case PLAN_CHECK_TIMER_STEP: planCheckTimer(_value._pd_planCheckTimer); break;

          case PLAN_SET_TIMER_STEP: planSetTimer(_value._pd_planSetTimer); break;

          case EXECUTE_SCRIPT_STEP: executeScript(_value._pd_executeScript); break;

          case DATA_POINT_TIME_CHECK_STEP: dataPointTimeCheck(_value._pd_dataPointTimeCheck); break;

          case POPUP_MFT_MESSAGE_STEP: popupMFTMessage(_value._pd_popupMFTMessage); break;

          case SHUTDOWN_SYSTEM_STEP: shutdownSystem(_value._pd_shutdownSystem); break;

          case STATION_PUBLIC_ADDRESS_STEP_BY_ALARM: stationPublicAddrssByAlarm(_value._pd_stationPublicAddrssByAlarm); break;

          case BACKGROUND_LAUNCH_SCHEMATIC_STEP: bgLaunchSchematic(_value._pd_bgLaunchSchematic); break;

          case BACKGROUND_LAUNCH_GUI_APP_STEP: bgLaunchGuiApp(_value._pd_bgLaunchGuiApp); break;

          case BACKGROUND_DECISION_STEP: bgDecision(_value._pd_bgDecision); break;

          case BACKGROUND_LOG_STEP: bgLog(_value._pd_bgLog); break;

          case BACKGROUND_PROMPT_STEP: bgPrompt(_value._pd_bgPrompt); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
    }

    ~StepParameters() {}

    StepParameters& operator=(const StepParameters& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case END_STEP: end(_value._pd_end); break;

          case ABORT_STEP: abort(_value._pd_abort); break;

          case ACTIVE_PLAN_CHECK_STEP: activePlanCheck(_value._pd_activePlanCheck); break;

          case ASSIGN_CAMERA_TO_MONITOR_STEP: cameraMonitor(_value._pd_cameraMonitor); break;

          case ACTIVATE_CAMERA_PRESET_STEP: cameraPreset(_value._pd_cameraPreset); break;

          case DATA_POINT_CHECK_STEP: dataPointCheck(_value._pd_dataPointCheck); break;

          case DATA_POINT_SET_STEP: dataPointSet(_value._pd_dataPointSet); break;

          case DECISION_STEP: decision(_value._pd_decision); break;

          case JUMP_STEP: jump(_value._pd_jump); break;

          case LOG_STEP: log(_value._pd_log); break;

          case PROMPT_STEP: prompt(_value._pd_prompt); break;

          case RUN_PLAN_STEP: runPlan(_value._pd_runPlan); break;

          case TERMINATE_PLAN_STEP: terminatePlan(_value._pd_terminatePlan); break;

          case VMS_SET_SCENE_STEP: vmsSetScene(_value._pd_vmsSetScene); break;

          case LAUNCH_GUI_APP_STEP: guiAppParameters(_value._pd_guiAppParameters); break;

          case VMS_BLANKOUT_STEP: vmsBlankout(_value._pd_vmsBlankout); break;

          case VMS_RESTORE_SCHEDULE_STEP: vmsRestoreSchedule(_value._pd_vmsRestoreSchedule); break;

          case VIDEO_WALL_STEP: videoWallParams(_value._pd_videoWallParams); break;

          case STATION_PUBLIC_ADDRESS_STEP: stationPublicAddress(_value._pd_stationPublicAddress); break;

          case TRAIN_PUBLIC_ADDRESS_STEP: trainPublicAddress(_value._pd_trainPublicAddress); break;

          case SEND_SMS_MESSAGE_STEP: sendSmsMessage(_value._pd_sendSmsMessage); break;

          case LAUNCH_SCHEMATIC_STEP: launchSchematic(_value._pd_launchSchematic); break;

          case EVALUATE_EXPRESSION_STEP: evaluateExpression(_value._pd_evaluateExpression); break;

          case STATION_TRAVELLER_INFO_SYSTEM_STEP: stationTravellerInfoSystem(_value._pd_stationTravellerInfoSystem); break;

          case TRAIN_TRAVELLER_INFO_SYSTEM_STEP: trainTravellerInfoSystem(_value._pd_trainTravellerInfoSystem); break;

          case FAILURE_SUMMARY_STEP: failureSummary(_value._pd_failureSummary); break;

          case PLAN_CHECK_TIMER_STEP: planCheckTimer(_value._pd_planCheckTimer); break;

          case PLAN_SET_TIMER_STEP: planSetTimer(_value._pd_planSetTimer); break;

          case EXECUTE_SCRIPT_STEP: executeScript(_value._pd_executeScript); break;

          case DATA_POINT_TIME_CHECK_STEP: dataPointTimeCheck(_value._pd_dataPointTimeCheck); break;

          case POPUP_MFT_MESSAGE_STEP: popupMFTMessage(_value._pd_popupMFTMessage); break;

          case SHUTDOWN_SYSTEM_STEP: shutdownSystem(_value._pd_shutdownSystem); break;

          case STATION_PUBLIC_ADDRESS_STEP_BY_ALARM: stationPublicAddrssByAlarm(_value._pd_stationPublicAddrssByAlarm); break;

          case BACKGROUND_LAUNCH_SCHEMATIC_STEP: bgLaunchSchematic(_value._pd_bgLaunchSchematic); break;

          case BACKGROUND_LAUNCH_GUI_APP_STEP: bgLaunchGuiApp(_value._pd_bgLaunchGuiApp); break;

          case BACKGROUND_DECISION_STEP: bgDecision(_value._pd_bgDecision); break;

          case BACKGROUND_LOG_STEP: bgLog(_value._pd_bgLog); break;

          case BACKGROUND_PROMPT_STEP: bgPrompt(_value._pd_bgPrompt); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
      return *this;
    }

    EStep _d() const { return _pd__d;}
    void _d(EStep _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case END_STEP: goto fail;
        case ABORT_STEP: goto fail;
        case ACTIVE_PLAN_CHECK_STEP: goto fail;
        case ASSIGN_CAMERA_TO_MONITOR_STEP: goto fail;
        case ACTIVATE_CAMERA_PRESET_STEP: goto fail;
        case DATA_POINT_CHECK_STEP: goto fail;
        case DATA_POINT_SET_STEP: goto fail;
        case DECISION_STEP: goto fail;
        case JUMP_STEP: goto fail;
        case LOG_STEP: goto fail;
        case PROMPT_STEP: goto fail;
        case RUN_PLAN_STEP: goto fail;
        case TERMINATE_PLAN_STEP: goto fail;
        case VMS_SET_SCENE_STEP: goto fail;
        case LAUNCH_GUI_APP_STEP: goto fail;
        case VMS_BLANKOUT_STEP: goto fail;
        case VMS_RESTORE_SCHEDULE_STEP: goto fail;
        case VIDEO_WALL_STEP: goto fail;
        case STATION_PUBLIC_ADDRESS_STEP: goto fail;
        case TRAIN_PUBLIC_ADDRESS_STEP: goto fail;
        case SEND_SMS_MESSAGE_STEP: goto fail;
        case LAUNCH_SCHEMATIC_STEP: goto fail;
        case EVALUATE_EXPRESSION_STEP: goto fail;
        case STATION_TRAVELLER_INFO_SYSTEM_STEP: goto fail;
        case TRAIN_TRAVELLER_INFO_SYSTEM_STEP: goto fail;
        case FAILURE_SUMMARY_STEP: goto fail;
        case PLAN_CHECK_TIMER_STEP: goto fail;
        case PLAN_SET_TIMER_STEP: goto fail;
        case EXECUTE_SCRIPT_STEP: goto fail;
        case DATA_POINT_TIME_CHECK_STEP: goto fail;
        case POPUP_MFT_MESSAGE_STEP: goto fail;
        case SHUTDOWN_SYSTEM_STEP: goto fail;
        case STATION_PUBLIC_ADDRESS_STEP_BY_ALARM: goto fail;
        case BACKGROUND_LAUNCH_SCHEMATIC_STEP: goto fail;
        case BACKGROUND_LAUNCH_GUI_APP_STEP: goto fail;
        case BACKGROUND_DECISION_STEP: goto fail;
        case BACKGROUND_LOG_STEP: goto fail;
        case BACKGROUND_PROMPT_STEP: goto fail;
        default:
        switch (_value){
          case END_STEP: goto fail;
          case ABORT_STEP: goto fail;
          case ACTIVE_PLAN_CHECK_STEP: goto fail;
          case ASSIGN_CAMERA_TO_MONITOR_STEP: goto fail;
          case ACTIVATE_CAMERA_PRESET_STEP: goto fail;
          case DATA_POINT_CHECK_STEP: goto fail;
          case DATA_POINT_SET_STEP: goto fail;
          case DECISION_STEP: goto fail;
          case JUMP_STEP: goto fail;
          case LOG_STEP: goto fail;
          case PROMPT_STEP: goto fail;
          case RUN_PLAN_STEP: goto fail;
          case TERMINATE_PLAN_STEP: goto fail;
          case VMS_SET_SCENE_STEP: goto fail;
          case LAUNCH_GUI_APP_STEP: goto fail;
          case VMS_BLANKOUT_STEP: goto fail;
          case VMS_RESTORE_SCHEDULE_STEP: goto fail;
          case VIDEO_WALL_STEP: goto fail;
          case STATION_PUBLIC_ADDRESS_STEP: goto fail;
          case TRAIN_PUBLIC_ADDRESS_STEP: goto fail;
          case SEND_SMS_MESSAGE_STEP: goto fail;
          case LAUNCH_SCHEMATIC_STEP: goto fail;
          case EVALUATE_EXPRESSION_STEP: goto fail;
          case STATION_TRAVELLER_INFO_SYSTEM_STEP: goto fail;
          case TRAIN_TRAVELLER_INFO_SYSTEM_STEP: goto fail;
          case FAILURE_SUMMARY_STEP: goto fail;
          case PLAN_CHECK_TIMER_STEP: goto fail;
          case PLAN_SET_TIMER_STEP: goto fail;
          case EXECUTE_SCRIPT_STEP: goto fail;
          case DATA_POINT_TIME_CHECK_STEP: goto fail;
          case POPUP_MFT_MESSAGE_STEP: goto fail;
          case SHUTDOWN_SYSTEM_STEP: goto fail;
          case STATION_PUBLIC_ADDRESS_STEP_BY_ALARM: goto fail;
          case BACKGROUND_LAUNCH_SCHEMATIC_STEP: goto fail;
          case BACKGROUND_LAUNCH_GUI_APP_STEP: goto fail;
          case BACKGROUND_DECISION_STEP: goto fail;
          case BACKGROUND_LOG_STEP: goto fail;
          case BACKGROUND_PROMPT_STEP: goto fail;
          default: _pd__d = _value; return;
        }

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    void _default()
    {
      _pd__initialised = 1;
      _pd__d = MITSIM_GENERATE_INCIDENT_IMAGES_STEP;
      _pd__default = 1;
    }

  

    EndParameters end () const { return _pd_end; }
    void end (EndParameters  _value) {
      _pd__initialised = 1;
      _pd__d = END_STEP;
      _pd__default = 0;
      _pd_end = _value;
    }

    AbortParameters abort () const { return _pd_abort; }
    void abort (AbortParameters  _value) {
      _pd__initialised = 1;
      _pd__d = ABORT_STEP;
      _pd__default = 0;
      _pd_abort = _value;
    }

    const ActivePlanCheckParameters &activePlanCheck () const { return _pd_activePlanCheck; }
    ActivePlanCheckParameters &activePlanCheck () { return _pd_activePlanCheck; }
    void activePlanCheck (const ActivePlanCheckParameters& _value) {
      _pd__initialised = 1;
      _pd__d = ACTIVE_PLAN_CHECK_STEP;
      _pd__default = 0;
      _pd_activePlanCheck = _value;
    }

    const AssignCameraToMonitorParameters &cameraMonitor () const { return _pd_cameraMonitor; }
    AssignCameraToMonitorParameters &cameraMonitor () { return _pd_cameraMonitor; }
    void cameraMonitor (const AssignCameraToMonitorParameters& _value) {
      _pd__initialised = 1;
      _pd__d = ASSIGN_CAMERA_TO_MONITOR_STEP;
      _pd__default = 0;
      _pd_cameraMonitor = _value;
    }

    const ActivateCameraPresetParameters &cameraPreset () const { return _pd_cameraPreset; }
    ActivateCameraPresetParameters &cameraPreset () { return _pd_cameraPreset; }
    void cameraPreset (const ActivateCameraPresetParameters& _value) {
      _pd__initialised = 1;
      _pd__d = ACTIVATE_CAMERA_PRESET_STEP;
      _pd__default = 0;
      _pd_cameraPreset = _value;
    }

    const DataPointCheckParameters &dataPointCheck () const { return _pd_dataPointCheck; }
    DataPointCheckParameters &dataPointCheck () { return _pd_dataPointCheck; }
    void dataPointCheck (const DataPointCheckParameters& _value) {
      _pd__initialised = 1;
      _pd__d = DATA_POINT_CHECK_STEP;
      _pd__default = 0;
      _pd_dataPointCheck = _value;
    }

    const DataPointSetParameters &dataPointSet () const { return _pd_dataPointSet; }
    DataPointSetParameters &dataPointSet () { return _pd_dataPointSet; }
    void dataPointSet (const DataPointSetParameters& _value) {
      _pd__initialised = 1;
      _pd__d = DATA_POINT_SET_STEP;
      _pd__default = 0;
      _pd_dataPointSet = _value;
    }

    const DecisionParameters &decision () const { return _pd_decision; }
    DecisionParameters &decision () { return _pd_decision; }
    void decision (const DecisionParameters& _value) {
      _pd__initialised = 1;
      _pd__d = DECISION_STEP;
      _pd__default = 0;
      _pd_decision = _value;
    }

    const JumpParameters &jump () const { return _pd_jump; }
    JumpParameters &jump () { return _pd_jump; }
    void jump (const JumpParameters& _value) {
      _pd__initialised = 1;
      _pd__d = JUMP_STEP;
      _pd__default = 0;
      _pd_jump = _value;
    }

    const LogParameters &log () const { return _pd_log; }
    LogParameters &log () { return _pd_log; }
    void log (const LogParameters& _value) {
      _pd__initialised = 1;
      _pd__d = LOG_STEP;
      _pd__default = 0;
      _pd_log = _value;
    }

    const PromptParameters &prompt () const { return _pd_prompt; }
    PromptParameters &prompt () { return _pd_prompt; }
    void prompt (const PromptParameters& _value) {
      _pd__initialised = 1;
      _pd__d = PROMPT_STEP;
      _pd__default = 0;
      _pd_prompt = _value;
    }

    const RunPlanParameters &runPlan () const { return _pd_runPlan; }
    RunPlanParameters &runPlan () { return _pd_runPlan; }
    void runPlan (const RunPlanParameters& _value) {
      _pd__initialised = 1;
      _pd__d = RUN_PLAN_STEP;
      _pd__default = 0;
      _pd_runPlan = _value;
    }

    const TerminatePlanParameters &terminatePlan () const { return _pd_terminatePlan; }
    TerminatePlanParameters &terminatePlan () { return _pd_terminatePlan; }
    void terminatePlan (const TerminatePlanParameters& _value) {
      _pd__initialised = 1;
      _pd__d = TERMINATE_PLAN_STEP;
      _pd__default = 0;
      _pd_terminatePlan = _value;
    }

    const VmsSetSceneParameters &vmsSetScene () const { return _pd_vmsSetScene; }
    VmsSetSceneParameters &vmsSetScene () { return _pd_vmsSetScene; }
    void vmsSetScene (const VmsSetSceneParameters& _value) {
      _pd__initialised = 1;
      _pd__d = VMS_SET_SCENE_STEP;
      _pd__default = 0;
      _pd_vmsSetScene = _value;
    }

    const LaunchGuiAppParameters &guiAppParameters () const { return _pd_guiAppParameters; }
    LaunchGuiAppParameters &guiAppParameters () { return _pd_guiAppParameters; }
    void guiAppParameters (const LaunchGuiAppParameters& _value) {
      _pd__initialised = 1;
      _pd__d = LAUNCH_GUI_APP_STEP;
      _pd__default = 0;
      _pd_guiAppParameters = _value;
    }

    const VmsBlankoutParameters &vmsBlankout () const { return _pd_vmsBlankout; }
    VmsBlankoutParameters &vmsBlankout () { return _pd_vmsBlankout; }
    void vmsBlankout (const VmsBlankoutParameters& _value) {
      _pd__initialised = 1;
      _pd__d = VMS_BLANKOUT_STEP;
      _pd__default = 0;
      _pd_vmsBlankout = _value;
    }

    const VmsRestoreScheduleParameters &vmsRestoreSchedule () const { return _pd_vmsRestoreSchedule; }
    VmsRestoreScheduleParameters &vmsRestoreSchedule () { return _pd_vmsRestoreSchedule; }
    void vmsRestoreSchedule (const VmsRestoreScheduleParameters& _value) {
      _pd__initialised = 1;
      _pd__d = VMS_RESTORE_SCHEDULE_STEP;
      _pd__default = 0;
      _pd_vmsRestoreSchedule = _value;
    }

    const VideoWallParameters &videoWallParams () const { return _pd_videoWallParams; }
    VideoWallParameters &videoWallParams () { return _pd_videoWallParams; }
    void videoWallParams (const VideoWallParameters& _value) {
      _pd__initialised = 1;
      _pd__d = VIDEO_WALL_STEP;
      _pd__default = 0;
      _pd_videoWallParams = _value;
    }

    const StationPublicAddressParameters &stationPublicAddress () const { return _pd_stationPublicAddress; }
    StationPublicAddressParameters &stationPublicAddress () { return _pd_stationPublicAddress; }
    void stationPublicAddress (const StationPublicAddressParameters& _value) {
      _pd__initialised = 1;
      _pd__d = STATION_PUBLIC_ADDRESS_STEP;
      _pd__default = 0;
      _pd_stationPublicAddress = _value;
    }

    const TrainPublicAddressParameters &trainPublicAddress () const { return _pd_trainPublicAddress; }
    TrainPublicAddressParameters &trainPublicAddress () { return _pd_trainPublicAddress; }
    void trainPublicAddress (const TrainPublicAddressParameters& _value) {
      _pd__initialised = 1;
      _pd__d = TRAIN_PUBLIC_ADDRESS_STEP;
      _pd__default = 0;
      _pd_trainPublicAddress = _value;
    }

    const SendSmsMessageParameters &sendSmsMessage () const { return _pd_sendSmsMessage; }
    SendSmsMessageParameters &sendSmsMessage () { return _pd_sendSmsMessage; }
    void sendSmsMessage (const SendSmsMessageParameters& _value) {
      _pd__initialised = 1;
      _pd__d = SEND_SMS_MESSAGE_STEP;
      _pd__default = 0;
      _pd_sendSmsMessage = _value;
    }

    const LaunchSchematicParameters &launchSchematic () const { return _pd_launchSchematic; }
    LaunchSchematicParameters &launchSchematic () { return _pd_launchSchematic; }
    void launchSchematic (const LaunchSchematicParameters& _value) {
      _pd__initialised = 1;
      _pd__d = LAUNCH_SCHEMATIC_STEP;
      _pd__default = 0;
      _pd_launchSchematic = _value;
    }

    const EvaluateExpressionParameters &evaluateExpression () const { return _pd_evaluateExpression; }
    EvaluateExpressionParameters &evaluateExpression () { return _pd_evaluateExpression; }
    void evaluateExpression (const EvaluateExpressionParameters& _value) {
      _pd__initialised = 1;
      _pd__d = EVALUATE_EXPRESSION_STEP;
      _pd__default = 0;
      _pd_evaluateExpression = _value;
    }

    const StationTravellerInfoSystemParameters &stationTravellerInfoSystem () const { return _pd_stationTravellerInfoSystem; }
    StationTravellerInfoSystemParameters &stationTravellerInfoSystem () { return _pd_stationTravellerInfoSystem; }
    void stationTravellerInfoSystem (const StationTravellerInfoSystemParameters& _value) {
      _pd__initialised = 1;
      _pd__d = STATION_TRAVELLER_INFO_SYSTEM_STEP;
      _pd__default = 0;
      _pd_stationTravellerInfoSystem = _value;
    }

    const TrainTravellerInfoSystemParameters &trainTravellerInfoSystem () const { return _pd_trainTravellerInfoSystem; }
    TrainTravellerInfoSystemParameters &trainTravellerInfoSystem () { return _pd_trainTravellerInfoSystem; }
    void trainTravellerInfoSystem (const TrainTravellerInfoSystemParameters& _value) {
      _pd__initialised = 1;
      _pd__d = TRAIN_TRAVELLER_INFO_SYSTEM_STEP;
      _pd__default = 0;
      _pd_trainTravellerInfoSystem = _value;
    }

    const FailureSummaryParameters &failureSummary () const { return _pd_failureSummary; }
    FailureSummaryParameters &failureSummary () { return _pd_failureSummary; }
    void failureSummary (const FailureSummaryParameters& _value) {
      _pd__initialised = 1;
      _pd__d = FAILURE_SUMMARY_STEP;
      _pd__default = 0;
      _pd_failureSummary = _value;
    }

    const PlanCheckTimerParameters &planCheckTimer () const { return _pd_planCheckTimer; }
    PlanCheckTimerParameters &planCheckTimer () { return _pd_planCheckTimer; }
    void planCheckTimer (const PlanCheckTimerParameters& _value) {
      _pd__initialised = 1;
      _pd__d = PLAN_CHECK_TIMER_STEP;
      _pd__default = 0;
      _pd_planCheckTimer = _value;
    }

    const PlanSetTimerParameters &planSetTimer () const { return _pd_planSetTimer; }
    PlanSetTimerParameters &planSetTimer () { return _pd_planSetTimer; }
    void planSetTimer (const PlanSetTimerParameters& _value) {
      _pd__initialised = 1;
      _pd__d = PLAN_SET_TIMER_STEP;
      _pd__default = 0;
      _pd_planSetTimer = _value;
    }

    const ExecuteScriptParameters &executeScript () const { return _pd_executeScript; }
    ExecuteScriptParameters &executeScript () { return _pd_executeScript; }
    void executeScript (const ExecuteScriptParameters& _value) {
      _pd__initialised = 1;
      _pd__d = EXECUTE_SCRIPT_STEP;
      _pd__default = 0;
      _pd_executeScript = _value;
    }

    const DataPointTimeCheckParameters &dataPointTimeCheck () const { return _pd_dataPointTimeCheck; }
    DataPointTimeCheckParameters &dataPointTimeCheck () { return _pd_dataPointTimeCheck; }
    void dataPointTimeCheck (const DataPointTimeCheckParameters& _value) {
      _pd__initialised = 1;
      _pd__d = DATA_POINT_TIME_CHECK_STEP;
      _pd__default = 0;
      _pd_dataPointTimeCheck = _value;
    }

    const PopupMFTMessageParameters &popupMFTMessage () const { return _pd_popupMFTMessage; }
    PopupMFTMessageParameters &popupMFTMessage () { return _pd_popupMFTMessage; }
    void popupMFTMessage (const PopupMFTMessageParameters& _value) {
      _pd__initialised = 1;
      _pd__d = POPUP_MFT_MESSAGE_STEP;
      _pd__default = 0;
      _pd_popupMFTMessage = _value;
    }

    const ShutdownSystemParameters &shutdownSystem () const { return _pd_shutdownSystem; }
    ShutdownSystemParameters &shutdownSystem () { return _pd_shutdownSystem; }
    void shutdownSystem (const ShutdownSystemParameters& _value) {
      _pd__initialised = 1;
      _pd__d = SHUTDOWN_SYSTEM_STEP;
      _pd__default = 0;
      _pd_shutdownSystem = _value;
    }

    const StationPublicAddressByAlarmParameters &stationPublicAddrssByAlarm () const { return _pd_stationPublicAddrssByAlarm; }
    StationPublicAddressByAlarmParameters &stationPublicAddrssByAlarm () { return _pd_stationPublicAddrssByAlarm; }
    void stationPublicAddrssByAlarm (const StationPublicAddressByAlarmParameters& _value) {
      _pd__initialised = 1;
      _pd__d = STATION_PUBLIC_ADDRESS_STEP_BY_ALARM;
      _pd__default = 0;
      _pd_stationPublicAddrssByAlarm = _value;
    }

    const BackgroundLaunchSchematicParameters &bgLaunchSchematic () const { return _pd_bgLaunchSchematic; }
    BackgroundLaunchSchematicParameters &bgLaunchSchematic () { return _pd_bgLaunchSchematic; }
    void bgLaunchSchematic (const BackgroundLaunchSchematicParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_LAUNCH_SCHEMATIC_STEP;
      _pd__default = 0;
      _pd_bgLaunchSchematic = _value;
    }

    const BackgroundLaunchGuiAppParameters &bgLaunchGuiApp () const { return _pd_bgLaunchGuiApp; }
    BackgroundLaunchGuiAppParameters &bgLaunchGuiApp () { return _pd_bgLaunchGuiApp; }
    void bgLaunchGuiApp (const BackgroundLaunchGuiAppParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_LAUNCH_GUI_APP_STEP;
      _pd__default = 0;
      _pd_bgLaunchGuiApp = _value;
    }

    const BackgroundDecisionParameters &bgDecision () const { return _pd_bgDecision; }
    BackgroundDecisionParameters &bgDecision () { return _pd_bgDecision; }
    void bgDecision (const BackgroundDecisionParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_DECISION_STEP;
      _pd__default = 0;
      _pd_bgDecision = _value;
    }

    const BackgroundLogParameters &bgLog () const { return _pd_bgLog; }
    BackgroundLogParameters &bgLog () { return _pd_bgLog; }
    void bgLog (const BackgroundLogParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_LOG_STEP;
      _pd__default = 0;
      _pd_bgLog = _value;
    }

    const BackgroundPromptParameters &bgPrompt () const { return _pd_bgPrompt; }
    BackgroundPromptParameters &bgPrompt () { return _pd_bgPrompt; }
    void bgPrompt (const BackgroundPromptParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_PROMPT_STEP;
      _pd__default = 0;
      _pd_bgPrompt = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    EStep _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      EndParameters _pd_end;

      AbortParameters _pd_abort;


    };

  
    ActivePlanCheckParameters _pd_activePlanCheck;

    AssignCameraToMonitorParameters _pd_cameraMonitor;

    ActivateCameraPresetParameters _pd_cameraPreset;

    DataPointCheckParameters _pd_dataPointCheck;

    DataPointSetParameters _pd_dataPointSet;

    DecisionParameters _pd_decision;

    JumpParameters _pd_jump;

    LogParameters _pd_log;

    PromptParameters _pd_prompt;

    RunPlanParameters _pd_runPlan;

    TerminatePlanParameters _pd_terminatePlan;

    VmsSetSceneParameters _pd_vmsSetScene;

    LaunchGuiAppParameters _pd_guiAppParameters;

    VmsBlankoutParameters _pd_vmsBlankout;

    VmsRestoreScheduleParameters _pd_vmsRestoreSchedule;

    VideoWallParameters _pd_videoWallParams;

    StationPublicAddressParameters _pd_stationPublicAddress;

    TrainPublicAddressParameters _pd_trainPublicAddress;

    SendSmsMessageParameters _pd_sendSmsMessage;

    LaunchSchematicParameters _pd_launchSchematic;

    EvaluateExpressionParameters _pd_evaluateExpression;

    StationTravellerInfoSystemParameters _pd_stationTravellerInfoSystem;

    TrainTravellerInfoSystemParameters _pd_trainTravellerInfoSystem;

    FailureSummaryParameters _pd_failureSummary;

    PlanCheckTimerParameters _pd_planCheckTimer;

    PlanSetTimerParameters _pd_planSetTimer;

    ExecuteScriptParameters _pd_executeScript;

    DataPointTimeCheckParameters _pd_dataPointTimeCheck;

    PopupMFTMessageParameters _pd_popupMFTMessage;

    ShutdownSystemParameters _pd_shutdownSystem;

    StationPublicAddressByAlarmParameters _pd_stationPublicAddrssByAlarm;

    BackgroundLaunchSchematicParameters _pd_bgLaunchSchematic;

    BackgroundLaunchGuiAppParameters _pd_bgLaunchGuiApp;

    BackgroundDecisionParameters _pd_bgDecision;

    BackgroundLogParameters _pd_bgLog;

    BackgroundPromptParameters _pd_bgPrompt;

  
  };

  typedef StepParameters::_var_type StepParameters_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< StepParameters,StepParameters_var > StepParameters_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StepParameters;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MultipleStepParameters;

  class MultipleStepParameters_var;

  class MultipleStepParameters : public _CORBA_Unbounded_Sequence< StepParameters >  {
  public:
    typedef MultipleStepParameters_var _var_type;
    inline MultipleStepParameters() {}
    inline MultipleStepParameters(const MultipleStepParameters& _s)
      : _CORBA_Unbounded_Sequence< StepParameters > (_s) {}

    inline MultipleStepParameters(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< StepParameters > (_max) {}
    inline MultipleStepParameters(_CORBA_ULong _max, _CORBA_ULong _len, StepParameters* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< StepParameters > (_max, _len, _val, _rel) {}

  

    inline MultipleStepParameters& operator = (const MultipleStepParameters& _s) {
      _CORBA_Unbounded_Sequence< StepParameters > ::operator=(_s);
      return *this;
    }
  };

  class MultipleStepParameters_out;

  class MultipleStepParameters_var {
  public:
    inline MultipleStepParameters_var() : _pd_seq(0) {}
    inline MultipleStepParameters_var(MultipleStepParameters* _s) : _pd_seq(_s) {}
    inline MultipleStepParameters_var(const MultipleStepParameters_var& _s) {
      if( _s._pd_seq )  _pd_seq = new MultipleStepParameters(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~MultipleStepParameters_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline MultipleStepParameters_var& operator = (MultipleStepParameters* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline MultipleStepParameters_var& operator = (const MultipleStepParameters_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new MultipleStepParameters;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline StepParameters& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline MultipleStepParameters* operator -> () { return _pd_seq; }
    inline const MultipleStepParameters* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator MultipleStepParameters& () const { return *_pd_seq; }
#else
    inline operator const MultipleStepParameters& () const { return *_pd_seq; }
    inline operator MultipleStepParameters& () { return *_pd_seq; }
#endif
      
    inline const MultipleStepParameters& in() const { return *_pd_seq; }
    inline MultipleStepParameters&       inout()    { return *_pd_seq; }
    inline MultipleStepParameters*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline MultipleStepParameters* _retn() { MultipleStepParameters* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class MultipleStepParameters_out;
    
  private:
    MultipleStepParameters* _pd_seq;
  };

  class MultipleStepParameters_out {
  public:
    inline MultipleStepParameters_out(MultipleStepParameters*& _s) : _data(_s) { _data = 0; }
    inline MultipleStepParameters_out(MultipleStepParameters_var& _s)
      : _data(_s._pd_seq) { _s = (MultipleStepParameters*) 0; }
    inline MultipleStepParameters_out(const MultipleStepParameters_out& _s) : _data(_s._data) {}
    inline MultipleStepParameters_out& operator = (const MultipleStepParameters_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline MultipleStepParameters_out& operator = (MultipleStepParameters* _s) {
      _data = _s;
      return *this;
    }
    inline operator MultipleStepParameters*&()  { return _data; }
    inline MultipleStepParameters*& ptr()       { return _data; }
    inline MultipleStepParameters* operator->() { return _data; }

    inline StepParameters& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    MultipleStepParameters*& _data;

  private:
    MultipleStepParameters_out();
    MultipleStepParameters_out& operator=(const MultipleStepParameters_var&);
  };

  struct Step {
    typedef _CORBA_ConstrType_Variable_Var<Step> _var_type;

    
    StepDetail detail;

    StepParameters parameters;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Step::_var_type Step_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< Step,Step_var > Step_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Step;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Steps;

  class Steps_var;

  class Steps : public _CORBA_Unbounded_Sequence< Step >  {
  public:
    typedef Steps_var _var_type;
    inline Steps() {}
    inline Steps(const Steps& _s)
      : _CORBA_Unbounded_Sequence< Step > (_s) {}

    inline Steps(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< Step > (_max) {}
    inline Steps(_CORBA_ULong _max, _CORBA_ULong _len, Step* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< Step > (_max, _len, _val, _rel) {}

  

    inline Steps& operator = (const Steps& _s) {
      _CORBA_Unbounded_Sequence< Step > ::operator=(_s);
      return *this;
    }
  };

  class Steps_out;

  class Steps_var {
  public:
    inline Steps_var() : _pd_seq(0) {}
    inline Steps_var(Steps* _s) : _pd_seq(_s) {}
    inline Steps_var(const Steps_var& _s) {
      if( _s._pd_seq )  _pd_seq = new Steps(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~Steps_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline Steps_var& operator = (Steps* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Steps_var& operator = (const Steps_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new Steps;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline Step& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Steps* operator -> () { return _pd_seq; }
    inline const Steps* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Steps& () const { return *_pd_seq; }
#else
    inline operator const Steps& () const { return *_pd_seq; }
    inline operator Steps& () { return *_pd_seq; }
#endif
      
    inline const Steps& in() const { return *_pd_seq; }
    inline Steps&       inout()    { return *_pd_seq; }
    inline Steps*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Steps* _retn() { Steps* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Steps_out;
    
  private:
    Steps* _pd_seq;
  };

  class Steps_out {
  public:
    inline Steps_out(Steps*& _s) : _data(_s) { _data = 0; }
    inline Steps_out(Steps_var& _s)
      : _data(_s._pd_seq) { _s = (Steps*) 0; }
    inline Steps_out(const Steps_out& _s) : _data(_s._data) {}
    inline Steps_out& operator = (const Steps_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Steps_out& operator = (Steps* _s) {
      _data = _s;
      return *this;
    }
    inline operator Steps*&()  { return _data; }
    inline Steps*& ptr()       { return _data; }
    inline Steps* operator->() { return _data; }

    inline Step& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Steps*& _data;

  private:
    Steps_out();
    Steps_out& operator=(const Steps_var&);
  };

  struct Plan {
    typedef _CORBA_ConstrType_Variable_Var<Plan> _var_type;

    
    PlanDetail detail;

    Steps stepseq;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Plan::_var_type Plan_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< Plan,Plan_var > Plan_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Plan;

  struct TransferNodeUpdate {
    typedef _CORBA_ConstrType_Variable_Var<TransferNodeUpdate> _var_type;

    
    NodeId oldParent;

    NodeSummary summary;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TransferNodeUpdate::_var_type TransferNodeUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< TransferNodeUpdate,TransferNodeUpdate_var > TransferNodeUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TransferNodeUpdate;

  struct DeleteNodeUpdate {
    typedef _CORBA_ConstrType_Variable_Var<DeleteNodeUpdate> _var_type;

    
    NodeId parent;

    NodeIds nodes;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DeleteNodeUpdate::_var_type DeleteNodeUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DeleteNodeUpdate,DeleteNodeUpdate_var > DeleteNodeUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DeleteNodeUpdate;

  struct ApprovalStateUpdate {
    typedef _CORBA_ConstrType_Fix_Var<ApprovalStateUpdate> _var_type;

    
    NodeId plan;

    EApprovalState approvalState;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ApprovalStateUpdate::_var_type ApprovalStateUpdate_var;

  typedef ApprovalStateUpdate& ApprovalStateUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ApprovalStateUpdate;

  struct PlanTypeUpdate {
    typedef _CORBA_ConstrType_Fix_Var<PlanTypeUpdate> _var_type;

    
    NodeId plan;

    EPlanType planType;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanTypeUpdate::_var_type PlanTypeUpdate_var;

  typedef PlanTypeUpdate& PlanTypeUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanTypeUpdate;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanTypeUpdates;

  class PlanTypeUpdates_var;

  class PlanTypeUpdates : public _CORBA_Unbounded_Sequence< PlanTypeUpdate >  {
  public:
    typedef PlanTypeUpdates_var _var_type;
    inline PlanTypeUpdates() {}
    inline PlanTypeUpdates(const PlanTypeUpdates& _s)
      : _CORBA_Unbounded_Sequence< PlanTypeUpdate > (_s) {}

    inline PlanTypeUpdates(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< PlanTypeUpdate > (_max) {}
    inline PlanTypeUpdates(_CORBA_ULong _max, _CORBA_ULong _len, PlanTypeUpdate* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< PlanTypeUpdate > (_max, _len, _val, _rel) {}

  

    inline PlanTypeUpdates& operator = (const PlanTypeUpdates& _s) {
      _CORBA_Unbounded_Sequence< PlanTypeUpdate > ::operator=(_s);
      return *this;
    }
  };

  class PlanTypeUpdates_out;

  class PlanTypeUpdates_var {
  public:
    inline PlanTypeUpdates_var() : _pd_seq(0) {}
    inline PlanTypeUpdates_var(PlanTypeUpdates* _s) : _pd_seq(_s) {}
    inline PlanTypeUpdates_var(const PlanTypeUpdates_var& _s) {
      if( _s._pd_seq )  _pd_seq = new PlanTypeUpdates(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~PlanTypeUpdates_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline PlanTypeUpdates_var& operator = (PlanTypeUpdates* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline PlanTypeUpdates_var& operator = (const PlanTypeUpdates_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new PlanTypeUpdates;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline PlanTypeUpdate& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline PlanTypeUpdates* operator -> () { return _pd_seq; }
    inline const PlanTypeUpdates* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator PlanTypeUpdates& () const { return *_pd_seq; }
#else
    inline operator const PlanTypeUpdates& () const { return *_pd_seq; }
    inline operator PlanTypeUpdates& () { return *_pd_seq; }
#endif
      
    inline const PlanTypeUpdates& in() const { return *_pd_seq; }
    inline PlanTypeUpdates&       inout()    { return *_pd_seq; }
    inline PlanTypeUpdates*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline PlanTypeUpdates* _retn() { PlanTypeUpdates* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class PlanTypeUpdates_out;
    
  private:
    PlanTypeUpdates* _pd_seq;
  };

  class PlanTypeUpdates_out {
  public:
    inline PlanTypeUpdates_out(PlanTypeUpdates*& _s) : _data(_s) { _data = 0; }
    inline PlanTypeUpdates_out(PlanTypeUpdates_var& _s)
      : _data(_s._pd_seq) { _s = (PlanTypeUpdates*) 0; }
    inline PlanTypeUpdates_out(const PlanTypeUpdates_out& _s) : _data(_s._data) {}
    inline PlanTypeUpdates_out& operator = (const PlanTypeUpdates_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline PlanTypeUpdates_out& operator = (PlanTypeUpdates* _s) {
      _data = _s;
      return *this;
    }
    inline operator PlanTypeUpdates*&()  { return _data; }
    inline PlanTypeUpdates*& ptr()       { return _data; }
    inline PlanTypeUpdates* operator->() { return _data; }

    inline PlanTypeUpdate& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    PlanTypeUpdates*& _data;

  private:
    PlanTypeUpdates_out();
    PlanTypeUpdates_out& operator=(const PlanTypeUpdates_var&);
  };

  class PlanConfigUpdate {
  public:

    typedef _CORBA_ConstrType_Variable_Var<PlanConfigUpdate> _var_type;

    

    PlanConfigUpdate(): _pd__initialised(0) {
      
    }
    
    PlanConfigUpdate(const PlanConfigUpdate& _value) {
      _pd__initialised = _value._pd__initialised;
      switch(_value._pd__d) {
        case PCUT_APPROVAL_STATE: approvalState(_value._pd_approvalState); break;

        case PCUT_PLAN_TYPE: planType(_value._pd_planType); break;

        case PCUT_UPDATE_CATEGORY: updateCategory(_value._pd_updateCategory); break;

        case PCUT_INSERT_CATEGORY: insertCategory(_value._pd_insertCategory); break;

        case PCUT_INSERT_CATEGORY_INTO_ROOT: insertCategoryIntoRoot(_value._pd_insertCategoryIntoRoot); break;

        case PCUT_DELETE_CATEGORY: deleteCategory(_value._pd_deleteCategory); break;

        case PCUT_UPDATE_PLAN: updatePlan(_value._pd_updatePlan); break;

        case PCUT_INSERT_PLAN: insertPlan(_value._pd_insertPlan); break;

        case PCUT_INSERT_PLAN_INTO_ROOT: insertPlanIntoRoot(_value._pd_insertPlanIntoRoot); break;

        case PCUT_DELETE_PLANS: deletePlans(_value._pd_deletePlans); break;

        case PCUT_MOVE_PLAN: movePlan(_value._pd_movePlan); break;

        case PCUT_COPY_PLAN: copyPlan(_value._pd_copyPlan); break;

        case PCUT_COPY_PLAN_TO_ROOT: copyPlanToRoot(_value._pd_copyPlanToRoot); break;

        case PCUT_MOVE_PLAN_TO_ROOT: movePlanToRoot(_value._pd_movePlanToRoot); break;

        case PCUT_MOVE_PLAN_FROM_ROOT: movePlanFromRoot(_value._pd_movePlanFromRoot); break;

        case PCUT_DELETE_CATEGORY_FROM_ROOT: deleteCategoryFromRoot(_value._pd_deleteCategoryFromRoot); break;

        case PCUT_DELETE_PLANS_FROM_ROOT: deletePlansFromRoot(_value._pd_deletePlansFromRoot); break;

          default: break;

      
      }
      _pd__d = _value._pd__d;
  
    }

    ~PlanConfigUpdate() {}

    PlanConfigUpdate& operator=(const PlanConfigUpdate& _value) {
      _pd__initialised = _value._pd__initialised;
      switch(_value._pd__d) {
        case PCUT_APPROVAL_STATE: approvalState(_value._pd_approvalState); break;

        case PCUT_PLAN_TYPE: planType(_value._pd_planType); break;

        case PCUT_UPDATE_CATEGORY: updateCategory(_value._pd_updateCategory); break;

        case PCUT_INSERT_CATEGORY: insertCategory(_value._pd_insertCategory); break;

        case PCUT_INSERT_CATEGORY_INTO_ROOT: insertCategoryIntoRoot(_value._pd_insertCategoryIntoRoot); break;

        case PCUT_DELETE_CATEGORY: deleteCategory(_value._pd_deleteCategory); break;

        case PCUT_UPDATE_PLAN: updatePlan(_value._pd_updatePlan); break;

        case PCUT_INSERT_PLAN: insertPlan(_value._pd_insertPlan); break;

        case PCUT_INSERT_PLAN_INTO_ROOT: insertPlanIntoRoot(_value._pd_insertPlanIntoRoot); break;

        case PCUT_DELETE_PLANS: deletePlans(_value._pd_deletePlans); break;

        case PCUT_MOVE_PLAN: movePlan(_value._pd_movePlan); break;

        case PCUT_COPY_PLAN: copyPlan(_value._pd_copyPlan); break;

        case PCUT_COPY_PLAN_TO_ROOT: copyPlanToRoot(_value._pd_copyPlanToRoot); break;

        case PCUT_MOVE_PLAN_TO_ROOT: movePlanToRoot(_value._pd_movePlanToRoot); break;

        case PCUT_MOVE_PLAN_FROM_ROOT: movePlanFromRoot(_value._pd_movePlanFromRoot); break;

        case PCUT_DELETE_CATEGORY_FROM_ROOT: deleteCategoryFromRoot(_value._pd_deleteCategoryFromRoot); break;

        case PCUT_DELETE_PLANS_FROM_ROOT: deletePlansFromRoot(_value._pd_deletePlansFromRoot); break;

          default: break;

      
      }
      _pd__d = _value._pd__d;
  
      return *this;
    }

    EPlanConfigUpdateType _d() const { return _pd__d;}
    void _d(EPlanConfigUpdateType _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case PCUT_APPROVAL_STATE: goto fail;
        case PCUT_PLAN_TYPE: goto fail;
        case PCUT_UPDATE_CATEGORY: goto fail;
        case PCUT_INSERT_CATEGORY: goto fail;
        case PCUT_INSERT_CATEGORY_INTO_ROOT: goto fail;
        case PCUT_DELETE_CATEGORY: goto fail;
        case PCUT_UPDATE_PLAN: goto fail;
        case PCUT_INSERT_PLAN: goto fail;
        case PCUT_INSERT_PLAN_INTO_ROOT: goto fail;
        case PCUT_DELETE_PLANS: goto fail;
        case PCUT_MOVE_PLAN: goto fail;
        case PCUT_COPY_PLAN: goto fail;
        case PCUT_COPY_PLAN_TO_ROOT: goto fail;
        case PCUT_MOVE_PLAN_TO_ROOT: goto fail;
        case PCUT_MOVE_PLAN_FROM_ROOT: goto fail;
        case PCUT_DELETE_CATEGORY_FROM_ROOT: goto fail;
        case PCUT_DELETE_PLANS_FROM_ROOT: goto fail;
        default: goto fail;

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    

    const ApprovalStateUpdate &approvalState () const { return _pd_approvalState; }
    ApprovalStateUpdate &approvalState () { return _pd_approvalState; }
    void approvalState (const ApprovalStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_APPROVAL_STATE;
      _pd__default = 0;
      _pd_approvalState = _value;
    }

    const PlanTypeUpdate &planType () const { return _pd_planType; }
    PlanTypeUpdate &planType () { return _pd_planType; }
    void planType (const PlanTypeUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_PLAN_TYPE;
      _pd__default = 0;
      _pd_planType = _value;
    }

    const NodeSummary &updateCategory () const { return _pd_updateCategory; }
    NodeSummary &updateCategory () { return _pd_updateCategory; }
    void updateCategory (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_UPDATE_CATEGORY;
      _pd__default = 0;
      _pd_updateCategory = _value;
    }

    const NodeSummary &insertCategory () const { return _pd_insertCategory; }
    NodeSummary &insertCategory () { return _pd_insertCategory; }
    void insertCategory (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_INSERT_CATEGORY;
      _pd__default = 0;
      _pd_insertCategory = _value;
    }

    const NodeSummary &insertCategoryIntoRoot () const { return _pd_insertCategoryIntoRoot; }
    NodeSummary &insertCategoryIntoRoot () { return _pd_insertCategoryIntoRoot; }
    void insertCategoryIntoRoot (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_INSERT_CATEGORY_INTO_ROOT;
      _pd__default = 0;
      _pd_insertCategoryIntoRoot = _value;
    }

    const DeleteNodeUpdate &deleteCategory () const { return _pd_deleteCategory; }
    DeleteNodeUpdate &deleteCategory () { return _pd_deleteCategory; }
    void deleteCategory (const DeleteNodeUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_DELETE_CATEGORY;
      _pd__default = 0;
      _pd_deleteCategory = _value;
    }

    const NodeSummary &updatePlan () const { return _pd_updatePlan; }
    NodeSummary &updatePlan () { return _pd_updatePlan; }
    void updatePlan (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_UPDATE_PLAN;
      _pd__default = 0;
      _pd_updatePlan = _value;
    }

    const NodeSummary &insertPlan () const { return _pd_insertPlan; }
    NodeSummary &insertPlan () { return _pd_insertPlan; }
    void insertPlan (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_INSERT_PLAN;
      _pd__default = 0;
      _pd_insertPlan = _value;
    }

    const NodeSummary &insertPlanIntoRoot () const { return _pd_insertPlanIntoRoot; }
    NodeSummary &insertPlanIntoRoot () { return _pd_insertPlanIntoRoot; }
    void insertPlanIntoRoot (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_INSERT_PLAN_INTO_ROOT;
      _pd__default = 0;
      _pd_insertPlanIntoRoot = _value;
    }

    const DeleteNodeUpdate &deletePlans () const { return _pd_deletePlans; }
    DeleteNodeUpdate &deletePlans () { return _pd_deletePlans; }
    void deletePlans (const DeleteNodeUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_DELETE_PLANS;
      _pd__default = 0;
      _pd_deletePlans = _value;
    }

    const TransferNodeUpdate &movePlan () const { return _pd_movePlan; }
    TransferNodeUpdate &movePlan () { return _pd_movePlan; }
    void movePlan (const TransferNodeUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_MOVE_PLAN;
      _pd__default = 0;
      _pd_movePlan = _value;
    }

    const NodeSummary &copyPlan () const { return _pd_copyPlan; }
    NodeSummary &copyPlan () { return _pd_copyPlan; }
    void copyPlan (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_COPY_PLAN;
      _pd__default = 0;
      _pd_copyPlan = _value;
    }

    const NodeSummary &copyPlanToRoot () const { return _pd_copyPlanToRoot; }
    NodeSummary &copyPlanToRoot () { return _pd_copyPlanToRoot; }
    void copyPlanToRoot (const NodeSummary& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_COPY_PLAN_TO_ROOT;
      _pd__default = 0;
      _pd_copyPlanToRoot = _value;
    }

    const TransferNodeUpdate &movePlanToRoot () const { return _pd_movePlanToRoot; }
    TransferNodeUpdate &movePlanToRoot () { return _pd_movePlanToRoot; }
    void movePlanToRoot (const TransferNodeUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_MOVE_PLAN_TO_ROOT;
      _pd__default = 0;
      _pd_movePlanToRoot = _value;
    }

    const TransferNodeUpdate &movePlanFromRoot () const { return _pd_movePlanFromRoot; }
    TransferNodeUpdate &movePlanFromRoot () { return _pd_movePlanFromRoot; }
    void movePlanFromRoot (const TransferNodeUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_MOVE_PLAN_FROM_ROOT;
      _pd__default = 0;
      _pd_movePlanFromRoot = _value;
    }

    NodeId deleteCategoryFromRoot () const { return _pd_deleteCategoryFromRoot; }
    void deleteCategoryFromRoot (NodeId  _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_DELETE_CATEGORY_FROM_ROOT;
      _pd__default = 0;
      _pd_deleteCategoryFromRoot = _value;
    }

    const NodeIds &deletePlansFromRoot () const { return _pd_deletePlansFromRoot; }
    NodeIds &deletePlansFromRoot () { return _pd_deletePlansFromRoot; }
    void deletePlansFromRoot (const NodeIds& _value) {
      _pd__initialised = 1;
      _pd__d = PCUT_DELETE_PLANS_FROM_ROOT;
      _pd__default = 0;
      _pd_deletePlansFromRoot = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    EPlanConfigUpdateType _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      NodeId _pd_deleteCategoryFromRoot;


    };

  
    ApprovalStateUpdate _pd_approvalState;

    PlanTypeUpdate _pd_planType;

    NodeSummary _pd_updateCategory;

    NodeSummary _pd_insertCategory;

    NodeSummary _pd_insertCategoryIntoRoot;

    DeleteNodeUpdate _pd_deleteCategory;

    NodeSummary _pd_updatePlan;

    NodeSummary _pd_insertPlan;

    NodeSummary _pd_insertPlanIntoRoot;

    DeleteNodeUpdate _pd_deletePlans;

    TransferNodeUpdate _pd_movePlan;

    NodeSummary _pd_copyPlan;

    NodeSummary _pd_copyPlanToRoot;

    TransferNodeUpdate _pd_movePlanToRoot;

    TransferNodeUpdate _pd_movePlanFromRoot;

    NodeIds _pd_deletePlansFromRoot;

  
  };

  typedef PlanConfigUpdate::_var_type PlanConfigUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PlanConfigUpdate,PlanConfigUpdate_var > PlanConfigUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanConfigUpdate;

  struct PlanConfigUpdateData {
    typedef _CORBA_ConstrType_Variable_Var<PlanConfigUpdateData> _var_type;

    
    ::CORBA::String_member session;

    PlanConfigUpdate configUpdate;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanConfigUpdateData::_var_type PlanConfigUpdateData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PlanConfigUpdateData,PlanConfigUpdateData_var > PlanConfigUpdateData_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanConfigUpdateData;

  struct ExecutionHistoryUpdate {
    typedef _CORBA_ConstrType_Variable_Var<ExecutionHistoryUpdate> _var_type;

    
    ActivePlanId plan;

    ExecutionHistory history;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ExecutionHistoryUpdate::_var_type ExecutionHistoryUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ExecutionHistoryUpdate,ExecutionHistoryUpdate_var > ExecutionHistoryUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ExecutionHistoryUpdate;

  struct CustomisationHistoryUpdate {
    typedef _CORBA_ConstrType_Variable_Var<CustomisationHistoryUpdate> _var_type;

    
    ActivePlanId plan;

    CustomisationHistory history;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CustomisationHistoryUpdate::_var_type CustomisationHistoryUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CustomisationHistoryUpdate,CustomisationHistoryUpdate_var > CustomisationHistoryUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CustomisationHistoryUpdate;

  struct RegisterPlanManagerUpdate {
    typedef _CORBA_ConstrType_Variable_Var<RegisterPlanManagerUpdate> _var_type;

    
    ::CORBA::String_member session;

    ::CORBA::String_member pmId;

    _CORBA_ObjRef_Member< TA_Base_Bus::_objref_IPlanManagerCorbaDef, TA_Base_Bus::IPlanManagerCorbaDef_Helper>  planManager;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef RegisterPlanManagerUpdate::_var_type RegisterPlanManagerUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< RegisterPlanManagerUpdate,RegisterPlanManagerUpdate_var > RegisterPlanManagerUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RegisterPlanManagerUpdate;

  struct DeregisterPlanManagerUpdate {
    typedef _CORBA_ConstrType_Variable_Var<DeregisterPlanManagerUpdate> _var_type;

    
    ::CORBA::String_member session;

    ::CORBA::String_member pmId;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DeregisterPlanManagerUpdate::_var_type DeregisterPlanManagerUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DeregisterPlanManagerUpdate,DeregisterPlanManagerUpdate_var > DeregisterPlanManagerUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DeregisterPlanManagerUpdate;

  struct PlanStateUpdate {
    typedef _CORBA_ConstrType_Variable_Var<PlanStateUpdate> _var_type;

    
    ::CORBA::String_member session;

    ::CORBA::String_member pmId;

    ActivePlanId plan;

    ::CORBA::String_member remark;

    ::CORBA::Boolean manuExec;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanStateUpdate::_var_type PlanStateUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PlanStateUpdate,PlanStateUpdate_var > PlanStateUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanStateUpdate;

  struct PlanCustomiseStepUpdate {
    typedef _CORBA_ConstrType_Variable_Var<PlanCustomiseStepUpdate> _var_type;

    
    ::CORBA::String_member session;

    ActivePlanId plan;

    StepCustomisableDetail detail;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlanCustomiseStepUpdate::_var_type PlanCustomiseStepUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PlanCustomiseStepUpdate,PlanCustomiseStepUpdate_var > PlanCustomiseStepUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanCustomiseStepUpdate;

  struct EditLockUpdate {
    typedef _CORBA_ConstrType_Variable_Var<EditLockUpdate> _var_type;

    
    ::CORBA::String_member session;

    ::CORBA::String_member pmId;

    NodeId plan;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef EditLockUpdate::_var_type EditLockUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< EditLockUpdate,EditLockUpdate_var > EditLockUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EditLockUpdate;

  class PASUpdate {
  public:

    typedef _CORBA_ConstrType_Variable_Var<PASUpdate> _var_type;

    

    PASUpdate(): _pd__initialised(0) {
      _default();

  
    }
    
    PASUpdate(const PASUpdate& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case PASUT_REGISTERED_PLAN_MANAGER: planManager(_value._pd_planManager); break;

          case PASUT_DEREGISTERED_PLAN_MANAGER: deregisterPlanManager(_value._pd_deregisterPlanManager); break;

          case PASUT_RUN_PLAN: runPlanUpdate(_value._pd_runPlanUpdate); break;

          case PASUT_CUSTOMISE_PLAN: customisePlanUpdate(_value._pd_customisePlanUpdate); break;

          case PASUT_TAKE_CONTROL: takeControl(_value._pd_takeControl); break;

          case PASUT_PAUSE_PLAN: pausePlan(_value._pd_pausePlan); break;

          case PASUT_RESUME_PLAN: resumePlan(_value._pd_resumePlan); break;

          case PASUT_STOP_PLAN: stopPlan(_value._pd_stopPlan); break;

          case PASUT_CUSTOMISE_STEP: customisedStep(_value._pd_customisedStep); break;

          case PASUT_GET_EDIT_PLAN_LOCK: getLockUpdate(_value._pd_getLockUpdate); break;

          case PASUT_RELEASE_EDIT_PLAN_LOCK: releaseLockUpdate(_value._pd_releaseLockUpdate); break;

          case PASUT_ACTIVE_PLAN_UPDATE: planDetail(_value._pd_planDetail); break;

          case PASUT_PAUSED_FOR_OPERATOR_UPDATE: operatorPausedPlanDetail(_value._pd_operatorPausedPlanDetail); break;

          case PASUT_PLAN_EXECUTION_HISTORY: executionHistory(_value._pd_executionHistory); break;

          case PASUT_PLAN_CUSTOMISATION_HISTORY: customisationHistory(_value._pd_customisationHistory); break;

          case PASUT_ACTIVE_PLANS: planDetails(_value._pd_planDetails); break;

          case PASUT_UPDATE_ID: activeUpdateId(_value._pd_activeUpdateId); break;

          case PASUT_ACTIVE_STEP_COMPLETION_STATUS_UPDATE: stepCompletionStatusSeq(_value._pd_stepCompletionStatusSeq); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
    }

    ~PASUpdate() {}

    PASUpdate& operator=(const PASUpdate& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case PASUT_REGISTERED_PLAN_MANAGER: planManager(_value._pd_planManager); break;

          case PASUT_DEREGISTERED_PLAN_MANAGER: deregisterPlanManager(_value._pd_deregisterPlanManager); break;

          case PASUT_RUN_PLAN: runPlanUpdate(_value._pd_runPlanUpdate); break;

          case PASUT_CUSTOMISE_PLAN: customisePlanUpdate(_value._pd_customisePlanUpdate); break;

          case PASUT_TAKE_CONTROL: takeControl(_value._pd_takeControl); break;

          case PASUT_PAUSE_PLAN: pausePlan(_value._pd_pausePlan); break;

          case PASUT_RESUME_PLAN: resumePlan(_value._pd_resumePlan); break;

          case PASUT_STOP_PLAN: stopPlan(_value._pd_stopPlan); break;

          case PASUT_CUSTOMISE_STEP: customisedStep(_value._pd_customisedStep); break;

          case PASUT_GET_EDIT_PLAN_LOCK: getLockUpdate(_value._pd_getLockUpdate); break;

          case PASUT_RELEASE_EDIT_PLAN_LOCK: releaseLockUpdate(_value._pd_releaseLockUpdate); break;

          case PASUT_ACTIVE_PLAN_UPDATE: planDetail(_value._pd_planDetail); break;

          case PASUT_PAUSED_FOR_OPERATOR_UPDATE: operatorPausedPlanDetail(_value._pd_operatorPausedPlanDetail); break;

          case PASUT_PLAN_EXECUTION_HISTORY: executionHistory(_value._pd_executionHistory); break;

          case PASUT_PLAN_CUSTOMISATION_HISTORY: customisationHistory(_value._pd_customisationHistory); break;

          case PASUT_ACTIVE_PLANS: planDetails(_value._pd_planDetails); break;

          case PASUT_UPDATE_ID: activeUpdateId(_value._pd_activeUpdateId); break;

          case PASUT_ACTIVE_STEP_COMPLETION_STATUS_UPDATE: stepCompletionStatusSeq(_value._pd_stepCompletionStatusSeq); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
      return *this;
    }

    EPlanAgentStateUpdateType _d() const { return _pd__d;}
    void _d(EPlanAgentStateUpdateType _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case PASUT_REGISTERED_PLAN_MANAGER: goto fail;
        case PASUT_DEREGISTERED_PLAN_MANAGER: goto fail;
        case PASUT_RUN_PLAN: goto fail;
        case PASUT_CUSTOMISE_PLAN: goto fail;
        case PASUT_TAKE_CONTROL: goto fail;
        case PASUT_PAUSE_PLAN: goto fail;
        case PASUT_RESUME_PLAN: goto fail;
        case PASUT_STOP_PLAN: goto fail;
        case PASUT_CUSTOMISE_STEP: goto fail;
        case PASUT_GET_EDIT_PLAN_LOCK: goto fail;
        case PASUT_RELEASE_EDIT_PLAN_LOCK: goto fail;
        case PASUT_ACTIVE_PLAN_UPDATE: goto fail;
        case PASUT_PAUSED_FOR_OPERATOR_UPDATE: goto fail;
        case PASUT_PLAN_EXECUTION_HISTORY: goto fail;
        case PASUT_PLAN_CUSTOMISATION_HISTORY: goto fail;
        case PASUT_ACTIVE_PLANS: goto fail;
        case PASUT_UPDATE_ID: goto fail;
        case PASUT_ACTIVE_STEP_COMPLETION_STATUS_UPDATE: goto fail;
        default:
        switch (_value){
          case PASUT_REGISTERED_PLAN_MANAGER: goto fail;
          case PASUT_DEREGISTERED_PLAN_MANAGER: goto fail;
          case PASUT_RUN_PLAN: goto fail;
          case PASUT_CUSTOMISE_PLAN: goto fail;
          case PASUT_TAKE_CONTROL: goto fail;
          case PASUT_PAUSE_PLAN: goto fail;
          case PASUT_RESUME_PLAN: goto fail;
          case PASUT_STOP_PLAN: goto fail;
          case PASUT_CUSTOMISE_STEP: goto fail;
          case PASUT_GET_EDIT_PLAN_LOCK: goto fail;
          case PASUT_RELEASE_EDIT_PLAN_LOCK: goto fail;
          case PASUT_ACTIVE_PLAN_UPDATE: goto fail;
          case PASUT_PAUSED_FOR_OPERATOR_UPDATE: goto fail;
          case PASUT_PLAN_EXECUTION_HISTORY: goto fail;
          case PASUT_PLAN_CUSTOMISATION_HISTORY: goto fail;
          case PASUT_ACTIVE_PLANS: goto fail;
          case PASUT_UPDATE_ID: goto fail;
          case PASUT_ACTIVE_STEP_COMPLETION_STATUS_UPDATE: goto fail;
          default: _pd__d = _value; return;
        }

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    void _default()
    {
      _pd__initialised = 1;
      _pd__d = PASUT_MAX;
      _pd__default = 1;
    }

  

    const RegisterPlanManagerUpdate &planManager () const { return _pd_planManager; }
    RegisterPlanManagerUpdate &planManager () { return _pd_planManager; }
    void planManager (const RegisterPlanManagerUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_REGISTERED_PLAN_MANAGER;
      _pd__default = 0;
      _pd_planManager = _value;
    }

    const DeregisterPlanManagerUpdate &deregisterPlanManager () const { return _pd_deregisterPlanManager; }
    DeregisterPlanManagerUpdate &deregisterPlanManager () { return _pd_deregisterPlanManager; }
    void deregisterPlanManager (const DeregisterPlanManagerUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_DEREGISTERED_PLAN_MANAGER;
      _pd__default = 0;
      _pd_deregisterPlanManager = _value;
    }

    const PlanStateUpdate &runPlanUpdate () const { return _pd_runPlanUpdate; }
    PlanStateUpdate &runPlanUpdate () { return _pd_runPlanUpdate; }
    void runPlanUpdate (const PlanStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_RUN_PLAN;
      _pd__default = 0;
      _pd_runPlanUpdate = _value;
    }

    const PlanStateUpdate &customisePlanUpdate () const { return _pd_customisePlanUpdate; }
    PlanStateUpdate &customisePlanUpdate () { return _pd_customisePlanUpdate; }
    void customisePlanUpdate (const PlanStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_CUSTOMISE_PLAN;
      _pd__default = 0;
      _pd_customisePlanUpdate = _value;
    }

    const PlanStateUpdate &takeControl () const { return _pd_takeControl; }
    PlanStateUpdate &takeControl () { return _pd_takeControl; }
    void takeControl (const PlanStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_TAKE_CONTROL;
      _pd__default = 0;
      _pd_takeControl = _value;
    }

    const PlanStateUpdate &pausePlan () const { return _pd_pausePlan; }
    PlanStateUpdate &pausePlan () { return _pd_pausePlan; }
    void pausePlan (const PlanStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_PAUSE_PLAN;
      _pd__default = 0;
      _pd_pausePlan = _value;
    }

    const PlanStateUpdate &resumePlan () const { return _pd_resumePlan; }
    PlanStateUpdate &resumePlan () { return _pd_resumePlan; }
    void resumePlan (const PlanStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_RESUME_PLAN;
      _pd__default = 0;
      _pd_resumePlan = _value;
    }

    const PlanStateUpdate &stopPlan () const { return _pd_stopPlan; }
    PlanStateUpdate &stopPlan () { return _pd_stopPlan; }
    void stopPlan (const PlanStateUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_STOP_PLAN;
      _pd__default = 0;
      _pd_stopPlan = _value;
    }

    const PlanCustomiseStepUpdate &customisedStep () const { return _pd_customisedStep; }
    PlanCustomiseStepUpdate &customisedStep () { return _pd_customisedStep; }
    void customisedStep (const PlanCustomiseStepUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_CUSTOMISE_STEP;
      _pd__default = 0;
      _pd_customisedStep = _value;
    }

    const EditLockUpdate &getLockUpdate () const { return _pd_getLockUpdate; }
    EditLockUpdate &getLockUpdate () { return _pd_getLockUpdate; }
    void getLockUpdate (const EditLockUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_GET_EDIT_PLAN_LOCK;
      _pd__default = 0;
      _pd_getLockUpdate = _value;
    }

    const EditLockUpdate &releaseLockUpdate () const { return _pd_releaseLockUpdate; }
    EditLockUpdate &releaseLockUpdate () { return _pd_releaseLockUpdate; }
    void releaseLockUpdate (const EditLockUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_RELEASE_EDIT_PLAN_LOCK;
      _pd__default = 0;
      _pd_releaseLockUpdate = _value;
    }

    const ActivePlanDetail &planDetail () const { return _pd_planDetail; }
    ActivePlanDetail &planDetail () { return _pd_planDetail; }
    void planDetail (const ActivePlanDetail& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_ACTIVE_PLAN_UPDATE;
      _pd__default = 0;
      _pd_planDetail = _value;
    }

    const ActivePlanDetail &operatorPausedPlanDetail () const { return _pd_operatorPausedPlanDetail; }
    ActivePlanDetail &operatorPausedPlanDetail () { return _pd_operatorPausedPlanDetail; }
    void operatorPausedPlanDetail (const ActivePlanDetail& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_PAUSED_FOR_OPERATOR_UPDATE;
      _pd__default = 0;
      _pd_operatorPausedPlanDetail = _value;
    }

    const ExecutionHistoryUpdate &executionHistory () const { return _pd_executionHistory; }
    ExecutionHistoryUpdate &executionHistory () { return _pd_executionHistory; }
    void executionHistory (const ExecutionHistoryUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_PLAN_EXECUTION_HISTORY;
      _pd__default = 0;
      _pd_executionHistory = _value;
    }

    const CustomisationHistoryUpdate &customisationHistory () const { return _pd_customisationHistory; }
    CustomisationHistoryUpdate &customisationHistory () { return _pd_customisationHistory; }
    void customisationHistory (const CustomisationHistoryUpdate& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_PLAN_CUSTOMISATION_HISTORY;
      _pd__default = 0;
      _pd_customisationHistory = _value;
    }

    const ActivePlanDetails &planDetails () const { return _pd_planDetails; }
    ActivePlanDetails &planDetails () { return _pd_planDetails; }
    void planDetails (const ActivePlanDetails& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_ACTIVE_PLANS;
      _pd__default = 0;
      _pd_planDetails = _value;
    }

    UpdateId activeUpdateId () const { return _pd_activeUpdateId; }
    void activeUpdateId (UpdateId  _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_UPDATE_ID;
      _pd__default = 0;
      _pd_activeUpdateId = _value;
    }

    const ActiveStepCompletionStatusSeq &stepCompletionStatusSeq () const { return _pd_stepCompletionStatusSeq; }
    ActiveStepCompletionStatusSeq &stepCompletionStatusSeq () { return _pd_stepCompletionStatusSeq; }
    void stepCompletionStatusSeq (const ActiveStepCompletionStatusSeq& _value) {
      _pd__initialised = 1;
      _pd__d = PASUT_ACTIVE_STEP_COMPLETION_STATUS_UPDATE;
      _pd__default = 0;
      _pd_stepCompletionStatusSeq = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    EPlanAgentStateUpdateType _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      UpdateId _pd_activeUpdateId;


    };

  
    RegisterPlanManagerUpdate _pd_planManager;

    DeregisterPlanManagerUpdate _pd_deregisterPlanManager;

    PlanStateUpdate _pd_runPlanUpdate;

    PlanStateUpdate _pd_customisePlanUpdate;

    PlanStateUpdate _pd_takeControl;

    PlanStateUpdate _pd_pausePlan;

    PlanStateUpdate _pd_resumePlan;

    PlanStateUpdate _pd_stopPlan;

    PlanCustomiseStepUpdate _pd_customisedStep;

    EditLockUpdate _pd_getLockUpdate;

    EditLockUpdate _pd_releaseLockUpdate;

    ActivePlanDetail _pd_planDetail;

    ActivePlanDetail _pd_operatorPausedPlanDetail;

    ExecutionHistoryUpdate _pd_executionHistory;

    CustomisationHistoryUpdate _pd_customisationHistory;

    ActivePlanDetails _pd_planDetails;

    ActiveStepCompletionStatusSeq _pd_stepCompletionStatusSeq;

  
  };

  typedef PASUpdate::_var_type PASUpdate_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PASUpdate,PASUpdate_var > PASUpdate_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PASUpdate;

  struct PASUpdateData {
    typedef _CORBA_ConstrType_Variable_Var<PASUpdateData> _var_type;

    
    UpdateId pasUpdateId;

    PASUpdate update;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PASUpdateData::_var_type PASUpdateData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PASUpdateData,PASUpdateData_var > PASUpdateData_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PASUpdateData;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PASUpdateDataSeq;

  class PASUpdateDataSeq_var;

  class PASUpdateDataSeq : public _CORBA_Unbounded_Sequence< PASUpdateData >  {
  public:
    typedef PASUpdateDataSeq_var _var_type;
    inline PASUpdateDataSeq() {}
    inline PASUpdateDataSeq(const PASUpdateDataSeq& _s)
      : _CORBA_Unbounded_Sequence< PASUpdateData > (_s) {}

    inline PASUpdateDataSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< PASUpdateData > (_max) {}
    inline PASUpdateDataSeq(_CORBA_ULong _max, _CORBA_ULong _len, PASUpdateData* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< PASUpdateData > (_max, _len, _val, _rel) {}

  

    inline PASUpdateDataSeq& operator = (const PASUpdateDataSeq& _s) {
      _CORBA_Unbounded_Sequence< PASUpdateData > ::operator=(_s);
      return *this;
    }
  };

  class PASUpdateDataSeq_out;

  class PASUpdateDataSeq_var {
  public:
    inline PASUpdateDataSeq_var() : _pd_seq(0) {}
    inline PASUpdateDataSeq_var(PASUpdateDataSeq* _s) : _pd_seq(_s) {}
    inline PASUpdateDataSeq_var(const PASUpdateDataSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new PASUpdateDataSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~PASUpdateDataSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline PASUpdateDataSeq_var& operator = (PASUpdateDataSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline PASUpdateDataSeq_var& operator = (const PASUpdateDataSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new PASUpdateDataSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline PASUpdateData& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline PASUpdateDataSeq* operator -> () { return _pd_seq; }
    inline const PASUpdateDataSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator PASUpdateDataSeq& () const { return *_pd_seq; }
#else
    inline operator const PASUpdateDataSeq& () const { return *_pd_seq; }
    inline operator PASUpdateDataSeq& () { return *_pd_seq; }
#endif
      
    inline const PASUpdateDataSeq& in() const { return *_pd_seq; }
    inline PASUpdateDataSeq&       inout()    { return *_pd_seq; }
    inline PASUpdateDataSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline PASUpdateDataSeq* _retn() { PASUpdateDataSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class PASUpdateDataSeq_out;
    
  private:
    PASUpdateDataSeq* _pd_seq;
  };

  class PASUpdateDataSeq_out {
  public:
    inline PASUpdateDataSeq_out(PASUpdateDataSeq*& _s) : _data(_s) { _data = 0; }
    inline PASUpdateDataSeq_out(PASUpdateDataSeq_var& _s)
      : _data(_s._pd_seq) { _s = (PASUpdateDataSeq*) 0; }
    inline PASUpdateDataSeq_out(const PASUpdateDataSeq_out& _s) : _data(_s._data) {}
    inline PASUpdateDataSeq_out& operator = (const PASUpdateDataSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline PASUpdateDataSeq_out& operator = (PASUpdateDataSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator PASUpdateDataSeq*&()  { return _data; }
    inline PASUpdateDataSeq*& ptr()       { return _data; }
    inline PASUpdateDataSeq* operator->() { return _data; }

    inline PASUpdateData& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    PASUpdateDataSeq*& _data;

  private:
    PASUpdateDataSeq_out();
    PASUpdateDataSeq_out& operator=(const PASUpdateDataSeq_var&);
  };

  struct PASUpdateRequest {
    typedef _CORBA_ConstrType_Variable_Var<PASUpdateRequest> _var_type;

    
    UpdateId pasRequestId;

    ::CORBA::String_member entityName;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PASUpdateRequest::_var_type PASUpdateRequest_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PASUpdateRequest,PASUpdateRequest_var > PASUpdateRequest_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PASUpdateRequest;

  class InteractiveStepData {
  public:

    typedef _CORBA_ConstrType_Variable_Var<InteractiveStepData> _var_type;

    

    InteractiveStepData(): _pd__initialised(0) {
      _default();

  
    }
    
    InteractiveStepData(const InteractiveStepData& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case PROMPT_STEP: prompt(_value._pd_prompt); break;

          case DECISION_STEP: decision(_value._pd_decision); break;

          case LOG_STEP: log(_value._pd_log); break;

          case RUN_PLAN_STEP: runPlan(_value._pd_runPlan); break;

          case LAUNCH_GUI_APP_STEP: launchGuiApp(_value._pd_launchGuiApp); break;

          case LAUNCH_SCHEMATIC_STEP: launchSchematic(_value._pd_launchSchematic); break;

          case FAILURE_SUMMARY_STEP: failedSteps(_value._pd_failedSteps); break;

          case POPUP_MFT_MESSAGE_STEP: popupMFTMessage(_value._pd_popupMFTMessage); break;

          case BACKGROUND_LAUNCH_SCHEMATIC_STEP: bgLaunchSchematic(_value._pd_bgLaunchSchematic); break;

          case BACKGROUND_LAUNCH_GUI_APP_STEP: bgLaunchGuiApp(_value._pd_bgLaunchGuiApp); break;

          case BACKGROUND_DECISION_STEP: bgDecision(_value._pd_bgDecision); break;

          case BACKGROUND_LOG_STEP: bgLog(_value._pd_bgLog); break;

          case BACKGROUND_PROMPT_STEP: bgPrompt(_value._pd_bgPrompt); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
    }

    ~InteractiveStepData() {}

    InteractiveStepData& operator=(const InteractiveStepData& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        
      }
      else {
        switch(_value._pd__d) {
          case PROMPT_STEP: prompt(_value._pd_prompt); break;

          case DECISION_STEP: decision(_value._pd_decision); break;

          case LOG_STEP: log(_value._pd_log); break;

          case RUN_PLAN_STEP: runPlan(_value._pd_runPlan); break;

          case LAUNCH_GUI_APP_STEP: launchGuiApp(_value._pd_launchGuiApp); break;

          case LAUNCH_SCHEMATIC_STEP: launchSchematic(_value._pd_launchSchematic); break;

          case FAILURE_SUMMARY_STEP: failedSteps(_value._pd_failedSteps); break;

          case POPUP_MFT_MESSAGE_STEP: popupMFTMessage(_value._pd_popupMFTMessage); break;

          case BACKGROUND_LAUNCH_SCHEMATIC_STEP: bgLaunchSchematic(_value._pd_bgLaunchSchematic); break;

          case BACKGROUND_LAUNCH_GUI_APP_STEP: bgLaunchGuiApp(_value._pd_bgLaunchGuiApp); break;

          case BACKGROUND_DECISION_STEP: bgDecision(_value._pd_bgDecision); break;

          case BACKGROUND_LOG_STEP: bgLog(_value._pd_bgLog); break;

          case BACKGROUND_PROMPT_STEP: bgPrompt(_value._pd_bgPrompt); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
      return *this;
    }

    EStep _d() const { return _pd__d;}
    void _d(EStep _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case PROMPT_STEP: goto fail;
        case DECISION_STEP: goto fail;
        case LOG_STEP: goto fail;
        case RUN_PLAN_STEP: goto fail;
        case LAUNCH_GUI_APP_STEP: goto fail;
        case LAUNCH_SCHEMATIC_STEP: goto fail;
        case FAILURE_SUMMARY_STEP: goto fail;
        case POPUP_MFT_MESSAGE_STEP: goto fail;
        case BACKGROUND_LAUNCH_SCHEMATIC_STEP: goto fail;
        case BACKGROUND_LAUNCH_GUI_APP_STEP: goto fail;
        case BACKGROUND_DECISION_STEP: goto fail;
        case BACKGROUND_LOG_STEP: goto fail;
        case BACKGROUND_PROMPT_STEP: goto fail;
        default:
        switch (_value){
          case PROMPT_STEP: goto fail;
          case DECISION_STEP: goto fail;
          case LOG_STEP: goto fail;
          case RUN_PLAN_STEP: goto fail;
          case LAUNCH_GUI_APP_STEP: goto fail;
          case LAUNCH_SCHEMATIC_STEP: goto fail;
          case FAILURE_SUMMARY_STEP: goto fail;
          case POPUP_MFT_MESSAGE_STEP: goto fail;
          case BACKGROUND_LAUNCH_SCHEMATIC_STEP: goto fail;
          case BACKGROUND_LAUNCH_GUI_APP_STEP: goto fail;
          case BACKGROUND_DECISION_STEP: goto fail;
          case BACKGROUND_LOG_STEP: goto fail;
          case BACKGROUND_PROMPT_STEP: goto fail;
          default: _pd__d = _value; return;
        }

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    void _default()
    {
      _pd__initialised = 1;
      _pd__d = END_STEP;
      _pd__default = 1;
    }

  

    const PromptParameters &prompt () const { return _pd_prompt; }
    PromptParameters &prompt () { return _pd_prompt; }
    void prompt (const PromptParameters& _value) {
      _pd__initialised = 1;
      _pd__d = PROMPT_STEP;
      _pd__default = 0;
      _pd_prompt = _value;
    }

    const DecisionParameters &decision () const { return _pd_decision; }
    DecisionParameters &decision () { return _pd_decision; }
    void decision (const DecisionParameters& _value) {
      _pd__initialised = 1;
      _pd__d = DECISION_STEP;
      _pd__default = 0;
      _pd_decision = _value;
    }

    const LogParameters &log () const { return _pd_log; }
    LogParameters &log () { return _pd_log; }
    void log (const LogParameters& _value) {
      _pd__initialised = 1;
      _pd__d = LOG_STEP;
      _pd__default = 0;
      _pd_log = _value;
    }

    const ActivePlanId &runPlan () const { return _pd_runPlan; }
    ActivePlanId &runPlan () { return _pd_runPlan; }
    void runPlan (const ActivePlanId& _value) {
      _pd__initialised = 1;
      _pd__d = RUN_PLAN_STEP;
      _pd__default = 0;
      _pd_runPlan = _value;
    }

    const LaunchGuiAppParameters &launchGuiApp () const { return _pd_launchGuiApp; }
    LaunchGuiAppParameters &launchGuiApp () { return _pd_launchGuiApp; }
    void launchGuiApp (const LaunchGuiAppParameters& _value) {
      _pd__initialised = 1;
      _pd__d = LAUNCH_GUI_APP_STEP;
      _pd__default = 0;
      _pd_launchGuiApp = _value;
    }

    const LaunchSchematicParameters &launchSchematic () const { return _pd_launchSchematic; }
    LaunchSchematicParameters &launchSchematic () { return _pd_launchSchematic; }
    void launchSchematic (const LaunchSchematicParameters& _value) {
      _pd__initialised = 1;
      _pd__d = LAUNCH_SCHEMATIC_STEP;
      _pd__default = 0;
      _pd_launchSchematic = _value;
    }

    const FailedStepDetails &failedSteps () const { return _pd_failedSteps; }
    FailedStepDetails &failedSteps () { return _pd_failedSteps; }
    void failedSteps (const FailedStepDetails& _value) {
      _pd__initialised = 1;
      _pd__d = FAILURE_SUMMARY_STEP;
      _pd__default = 0;
      _pd_failedSteps = _value;
    }

    const PopupMFTMessageParameters &popupMFTMessage () const { return _pd_popupMFTMessage; }
    PopupMFTMessageParameters &popupMFTMessage () { return _pd_popupMFTMessage; }
    void popupMFTMessage (const PopupMFTMessageParameters& _value) {
      _pd__initialised = 1;
      _pd__d = POPUP_MFT_MESSAGE_STEP;
      _pd__default = 0;
      _pd_popupMFTMessage = _value;
    }

    const BackgroundLaunchSchematicParameters &bgLaunchSchematic () const { return _pd_bgLaunchSchematic; }
    BackgroundLaunchSchematicParameters &bgLaunchSchematic () { return _pd_bgLaunchSchematic; }
    void bgLaunchSchematic (const BackgroundLaunchSchematicParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_LAUNCH_SCHEMATIC_STEP;
      _pd__default = 0;
      _pd_bgLaunchSchematic = _value;
    }

    const BackgroundLaunchGuiAppParameters &bgLaunchGuiApp () const { return _pd_bgLaunchGuiApp; }
    BackgroundLaunchGuiAppParameters &bgLaunchGuiApp () { return _pd_bgLaunchGuiApp; }
    void bgLaunchGuiApp (const BackgroundLaunchGuiAppParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_LAUNCH_GUI_APP_STEP;
      _pd__default = 0;
      _pd_bgLaunchGuiApp = _value;
    }

    const BackgroundDecisionParameters &bgDecision () const { return _pd_bgDecision; }
    BackgroundDecisionParameters &bgDecision () { return _pd_bgDecision; }
    void bgDecision (const BackgroundDecisionParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_DECISION_STEP;
      _pd__default = 0;
      _pd_bgDecision = _value;
    }

    const BackgroundLogParameters &bgLog () const { return _pd_bgLog; }
    BackgroundLogParameters &bgLog () { return _pd_bgLog; }
    void bgLog (const BackgroundLogParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_LOG_STEP;
      _pd__default = 0;
      _pd_bgLog = _value;
    }

    const BackgroundPromptParameters &bgPrompt () const { return _pd_bgPrompt; }
    BackgroundPromptParameters &bgPrompt () { return _pd_bgPrompt; }
    void bgPrompt (const BackgroundPromptParameters& _value) {
      _pd__initialised = 1;
      _pd__d = BACKGROUND_PROMPT_STEP;
      _pd__default = 0;
      _pd_bgPrompt = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    EStep _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    
    PromptParameters _pd_prompt;

    DecisionParameters _pd_decision;

    LogParameters _pd_log;

    ActivePlanId _pd_runPlan;

    LaunchGuiAppParameters _pd_launchGuiApp;

    LaunchSchematicParameters _pd_launchSchematic;

    FailedStepDetails _pd_failedSteps;

    PopupMFTMessageParameters _pd_popupMFTMessage;

    BackgroundLaunchSchematicParameters _pd_bgLaunchSchematic;

    BackgroundLaunchGuiAppParameters _pd_bgLaunchGuiApp;

    BackgroundDecisionParameters _pd_bgDecision;

    BackgroundLogParameters _pd_bgLog;

    BackgroundPromptParameters _pd_bgPrompt;

  
  };

  typedef InteractiveStepData::_var_type InteractiveStepData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< InteractiveStepData,InteractiveStepData_var > InteractiveStepData_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_InteractiveStepData;

  struct CurrentPlanStepDetail {
    typedef _CORBA_ConstrType_Variable_Var<CurrentPlanStepDetail> _var_type;

    
    ActivePlanId activePlan;

    StepNumber step;

    InteractiveStepData data;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CurrentPlanStepDetail::_var_type CurrentPlanStepDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CurrentPlanStepDetail,CurrentPlanStepDetail_var > CurrentPlanStepDetail_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CurrentPlanStepDetail;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END

_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END

_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NodeIds& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::NodeIds* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::NodeIds*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NodeIds*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepNames& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepNames* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepNames*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepNames*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ParameterNames& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::ParameterNames* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ParameterNames*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ParameterNames*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TISPidList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::TISPidList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TISPidList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TISPidList*& _sp);

inline void operator >>=(TA_Base_Core::ENode _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::ENode& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::UNDEFINED_NODE) {
    _e = (TA_Base_Core::ENode) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::ENode _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ENode& _s);

inline void operator >>=(TA_Base_Core::EApprovalState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EApprovalState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::UNDEFINED_APPROVAL_STATE) {
    _e = (TA_Base_Core::EApprovalState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EApprovalState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EApprovalState& _s);

inline void operator >>=(TA_Base_Core::EPlanType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::INVISIBLE_TYPE) {
    _e = (TA_Base_Core::EPlanType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanType& _s);

inline void operator >>=(TA_Base_Core::EStep _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EStep& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::UNDEFINED_STEP) {
    _e = (TA_Base_Core::EStep) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EStep _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EStep& _s);

inline void operator >>=(TA_Base_Core::EActivePlanState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EActivePlanState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::NEW_OWNER_ACTIVE_PLAN_STATE) {
    _e = (TA_Base_Core::EActivePlanState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EActivePlanState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EActivePlanState& _s);

inline void operator >>=(TA_Base_Core::EActiveStepState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EActiveStepState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::UNDEFINED_ACTIVE_STEP_STATE) {
    _e = (TA_Base_Core::EActiveStepState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EActiveStepState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EActiveStepState& _s);

inline void operator >>=(TA_Base_Core::EDataPoint _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EDataPoint& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::UNDEFINED_DATA_POINT) {
    _e = (TA_Base_Core::EDataPoint) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EDataPoint _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EDataPoint& _s);

inline void operator >>=(TA_Base_Core::EDataPointTest _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EDataPointTest& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::UNDEFINED_TEST) {
    _e = (TA_Base_Core::EDataPointTest) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EDataPointTest _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EDataPointTest& _s);

inline void operator >>=(TA_Base_Core::ETrainGroup _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::ETrainGroup& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::TG_UNDEFINED) {
    _e = (TA_Base_Core::ETrainGroup) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::ETrainGroup _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ETrainGroup& _s);

inline void operator >>=(TA_Base_Core::EPlanStepCompletionStatus _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanStepCompletionStatus& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PSCS_UNDEFINED) {
    _e = (TA_Base_Core::EPlanStepCompletionStatus) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanStepCompletionStatus _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanStepCompletionStatus& _s);

inline void operator >>=(TA_Base_Core::EPlanConfigUpdateType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanConfigUpdateType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PCUT_PLAN_TYPE) {
    _e = (TA_Base_Core::EPlanConfigUpdateType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanConfigUpdateType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanConfigUpdateType& _s);

inline void operator >>=(TA_Base_Core::EPlanAgentStateUpdateType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanAgentStateUpdateType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PASUT_MAX) {
    _e = (TA_Base_Core::EPlanAgentStateUpdateType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanAgentStateUpdateType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanAgentStateUpdateType& _s);

inline void operator >>=(TA_Base_Core::EPlanStepDetailType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanStepDetailType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PSDT_MAX) {
    _e = (TA_Base_Core::EPlanStepDetailType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanStepDetailType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanStepDetailType& _s);

inline void operator >>=(TA_Base_Core::EPlanStepDetailError _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanStepDetailError& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PSDE_INVALID) {
    _e = (TA_Base_Core::EPlanStepDetailError) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanStepDetailError _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanStepDetailError& _s);

inline void operator >>=(TA_Base_Core::EPlanAgentError _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanAgentError& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PAE_PLAN_APPROVE_ERROR) {
    _e = (TA_Base_Core::EPlanAgentError) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanAgentError _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanAgentError& _s);

inline void operator >>=(TA_Base_Core::EPlanNotFoundError _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EPlanNotFoundError& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::PNFE_NODE_NOT_EXIST) {
    _e = (TA_Base_Core::EPlanNotFoundError) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EPlanNotFoundError _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EPlanNotFoundError& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NumericDataPoint& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::NumericDataPoint* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::NumericDataPoint*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NumericDataPoint*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DataPointValue& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::DataPointValue* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DataPointValue*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DataPointValue*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NodeSummary& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::NodeSummary* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::NodeSummary*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NodeSummary*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanDetail*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::CategoryDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::CategoryDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::CategoryDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::CategoryDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NodeDetail& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::NodeDetail* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NodeDetail*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::NodeDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::SiblingNodes& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::SiblingNodes* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::SiblingNodes*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::SiblingNodes*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActiveStepDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActiveStepDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActiveStepDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActiveStepDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActiveStepDetails& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActiveStepDetails* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActiveStepDetails*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActiveStepDetails*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ExecutionHistory& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ExecutionHistory* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ExecutionHistory*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ExecutionHistory*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepCustomisableDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepCustomisableDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepCustomisableDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepCustomisableDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepCustomisableDetails& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepCustomisableDetails* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepCustomisableDetails*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepCustomisableDetails*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::CustomisationHistory& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::CustomisationHistory* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::CustomisationHistory*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::CustomisationHistory*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepDetails& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepDetails* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepDetails*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepDetails*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepNumbers& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepNumbers* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepNumbers*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepNumbers*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepIds& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepIds* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepIds*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepIds*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActivePlanId& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActivePlanId* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActivePlanId*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActivePlanId*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanCustomisationUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanCustomisationUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanCustomisationUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanCustomisationUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActivePlanDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActivePlanDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActivePlanDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActivePlanDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActivePlanDetails& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActivePlanDetails* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActivePlanDetails*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActivePlanDetails*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActiveStepCompletionStatus& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActiveStepCompletionStatus* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActiveStepCompletionStatus*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActiveStepCompletionStatus*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActiveStepCompletionStatusSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActiveStepCompletionStatusSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActiveStepCompletionStatusSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActiveStepCompletionStatusSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AuxStepParam& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::AuxStepParam* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AuxStepParam*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AuxStepParam*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AuxStepParameters& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::AuxStepParameters* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AuxStepParameters*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AuxStepParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AuxStepDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::AuxStepDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AuxStepDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AuxStepDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AuxSteps& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::AuxSteps* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AuxSteps*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AuxSteps*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AuxPlanDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::AuxPlanDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AuxPlanDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AuxPlanDetail*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::FailedStepDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::FailedStepDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::FailedStepDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::FailedStepDetail*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::FailedStepDetails& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::FailedStepDetails* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::FailedStepDetails*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::FailedStepDetails*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActivePlanCheckParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActivePlanCheckParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActivePlanCheckParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActivePlanCheckParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::AssignCameraToMonitorParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::AssignCameraToMonitorParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::AssignCameraToMonitorParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::AssignCameraToMonitorParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ActivateCameraPresetParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ActivateCameraPresetParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ActivateCameraPresetParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ActivateCameraPresetParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DataPointCheckParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::DataPointCheckParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DataPointCheckParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DataPointCheckParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DataPointSetParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::DataPointSetParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DataPointSetParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DataPointSetParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DecisionParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::DecisionParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DecisionParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DecisionParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::JumpParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::JumpParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::JumpParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::JumpParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::LogParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::LogParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::LogParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::LogParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PromptParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PromptParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PromptParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PromptParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::RunPlanParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::RunPlanParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::RunPlanParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::RunPlanParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TerminatePlanParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::TerminatePlanParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TerminatePlanParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TerminatePlanParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::VmsSetSceneParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::VmsSetSceneParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::VmsSetSceneParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::VmsSetSceneParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::VmsRestoreScheduleParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::VmsRestoreScheduleParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::VmsRestoreScheduleParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::VmsRestoreScheduleParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::VmsBlankoutParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::VmsBlankoutParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::VmsBlankoutParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::VmsBlankoutParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::WindowPosition& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::WindowPosition* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::WindowPosition*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::WindowPosition*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::LaunchGuiAppParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::LaunchGuiAppParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::LaunchGuiAppParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::LaunchGuiAppParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::VideoWallParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::VideoWallParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::VideoWallParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::VideoWallParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanCheckTimerParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanCheckTimerParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanCheckTimerParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanCheckTimerParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanSetTimerParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanSetTimerParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanSetTimerParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanSetTimerParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ExecuteScriptParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ExecuteScriptParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ExecuteScriptParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ExecuteScriptParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DataPointTimeCheckParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::DataPointTimeCheckParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DataPointTimeCheckParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DataPointTimeCheckParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PopupMFTMessageParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PopupMFTMessageParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PopupMFTMessageParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PopupMFTMessageParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ShutdownSystemParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ShutdownSystemParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ShutdownSystemParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ShutdownSystemParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StationDestination& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::StationDestination* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StationDestination*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StationDestination*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StationZones& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StationZones* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StationZones*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StationZones*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PAMessage& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PAMessage* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PAMessage*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PAMessage*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StationPublicAddressParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::StationPublicAddressParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StationPublicAddressParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StationPublicAddressParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::SendSmsMessageParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::SendSmsMessageParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::SendSmsMessageParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::SendSmsMessageParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::LaunchSchematicParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::LaunchSchematicParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::LaunchSchematicParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::LaunchSchematicParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BackgroundLaunchSchematicParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::BackgroundLaunchSchematicParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::BackgroundLaunchSchematicParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::BackgroundLaunchSchematicParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BackgroundLaunchGuiAppParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::BackgroundLaunchGuiAppParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::BackgroundLaunchGuiAppParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::BackgroundLaunchGuiAppParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BackgroundDecisionParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::BackgroundDecisionParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::BackgroundDecisionParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::BackgroundDecisionParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BackgroundLogParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::BackgroundLogParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::BackgroundLogParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::BackgroundLogParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::BackgroundPromptParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::BackgroundPromptParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::BackgroundPromptParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::BackgroundPromptParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TrainDestination& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::TrainDestination* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TrainDestination*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TrainDestination*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TISMessage& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::TISMessage* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TISMessage*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TISMessage*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::EvaluateExpressionParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::EvaluateExpressionParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EvaluateExpressionParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::EvaluateExpressionParameters*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PidsMessage& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::PidsMessage* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PidsMessage*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PidsMessage*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PidsDestination& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PidsDestination* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PidsDestination*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PidsDestination*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PidsDestinationList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::PidsDestinationList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PidsDestinationList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PidsDestinationList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::MessageTime& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::MessageTime* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::MessageTime*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::MessageTime*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StationTravellerInfoSystemParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::StationTravellerInfoSystemParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StationTravellerInfoSystemParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StationTravellerInfoSystemParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TrainTravellerInfoSystemParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::TrainTravellerInfoSystemParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TrainTravellerInfoSystemParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TrainTravellerInfoSystemParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TrainPublicAddressParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::TrainPublicAddressParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TrainPublicAddressParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TrainPublicAddressParameters*& _sp);

inline void operator >>=(TA_Base_Core::EStepFailureCategory _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Core::EStepFailureCategory& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Core::SFC_UNDEFINED) {
    _e = (TA_Base_Core::EStepFailureCategory) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Core::EStepFailureCategory _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EStepFailureCategory& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::FailureSummaryParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::FailureSummaryParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::FailureSummaryParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::FailureSummaryParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StationPublicAddressByAlarmParameters& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::StationPublicAddressByAlarmParameters* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StationPublicAddressByAlarmParameters*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StationPublicAddressByAlarmParameters*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::StepParameters& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::StepParameters* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::StepParameters*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::StepParameters*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::MultipleStepParameters& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::MultipleStepParameters* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::MultipleStepParameters*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::MultipleStepParameters*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::Step& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::Step* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::Step*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::Step*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::Steps& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::Steps* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::Steps*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::Steps*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::Plan& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::Plan* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::Plan*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::Plan*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::TransferNodeUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::TransferNodeUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::TransferNodeUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::TransferNodeUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DeleteNodeUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::DeleteNodeUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DeleteNodeUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DeleteNodeUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ApprovalStateUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ApprovalStateUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ApprovalStateUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ApprovalStateUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanTypeUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanTypeUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanTypeUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanTypeUpdate*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanTypeUpdates& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanTypeUpdates* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanTypeUpdates*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanTypeUpdates*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanConfigUpdate& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanConfigUpdate* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanConfigUpdate*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanConfigUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanConfigUpdateData& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanConfigUpdateData* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanConfigUpdateData*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanConfigUpdateData*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::ExecutionHistoryUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::ExecutionHistoryUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::ExecutionHistoryUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::ExecutionHistoryUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::CustomisationHistoryUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::CustomisationHistoryUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::CustomisationHistoryUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::CustomisationHistoryUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::RegisterPlanManagerUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::RegisterPlanManagerUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::RegisterPlanManagerUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::RegisterPlanManagerUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::DeregisterPlanManagerUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::DeregisterPlanManagerUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::DeregisterPlanManagerUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::DeregisterPlanManagerUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanStateUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanStateUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanStateUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanStateUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PlanCustomiseStepUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PlanCustomiseStepUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PlanCustomiseStepUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PlanCustomiseStepUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::EditLockUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::EditLockUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::EditLockUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::EditLockUpdate*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PASUpdate& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::PASUpdate* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PASUpdate*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PASUpdate*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PASUpdateData& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PASUpdateData* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PASUpdateData*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PASUpdateData*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PASUpdateDataSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::PASUpdateDataSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PASUpdateDataSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PASUpdateDataSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::PASUpdateRequest& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::PASUpdateRequest* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::PASUpdateRequest*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::PASUpdateRequest*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::InteractiveStepData& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::InteractiveStepData* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::InteractiveStepData*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::InteractiveStepData*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::CurrentPlanStepDetail& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::CurrentPlanStepDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::CurrentPlanStepDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::CurrentPlanStepDetail*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_PlanAgentDataCorbaDef
#endif

#endif  // __PlanAgentDataCorbaDef_hh__

