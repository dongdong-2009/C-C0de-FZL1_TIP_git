// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __RebindNameCorbaDef_hh__
#define __RebindNameCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Core

_CORBA_MODULE_BEG

#ifndef __TA__Base__Core_mNamedObjectRepositoryCorbaDef__
#define __TA__Base__Core_mNamedObjectRepositoryCorbaDef__

  class NamedObjectRepositoryCorbaDef;
  class _objref_NamedObjectRepositoryCorbaDef;
  class _impl_NamedObjectRepositoryCorbaDef;
  
  typedef _objref_NamedObjectRepositoryCorbaDef* NamedObjectRepositoryCorbaDef_ptr;
  typedef NamedObjectRepositoryCorbaDef_ptr NamedObjectRepositoryCorbaDefRef;

  class NamedObjectRepositoryCorbaDef_Helper {
  public:
    typedef NamedObjectRepositoryCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_NamedObjectRepositoryCorbaDef, NamedObjectRepositoryCorbaDef_Helper> NamedObjectRepositoryCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_NamedObjectRepositoryCorbaDef,NamedObjectRepositoryCorbaDef_Helper > NamedObjectRepositoryCorbaDef_out;

#endif

  struct NameObjectPair {
    typedef _CORBA_ConstrType_Variable_Var<NameObjectPair> _var_type;

    
    ::CORBA::String_member objectName;

    ::CORBA::Object_Member objectReference;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef NameObjectPair::_var_type NameObjectPair_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< NameObjectPair,NameObjectPair_var > NameObjectPair_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NameObjectPair;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NameObjectPairSeq;

  class NameObjectPairSeq_var;

  class NameObjectPairSeq : public _CORBA_Unbounded_Sequence< NameObjectPair >  {
  public:
    typedef NameObjectPairSeq_var _var_type;
    inline NameObjectPairSeq() {}
    inline NameObjectPairSeq(const NameObjectPairSeq& _s)
      : _CORBA_Unbounded_Sequence< NameObjectPair > (_s) {}

    inline NameObjectPairSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< NameObjectPair > (_max) {}
    inline NameObjectPairSeq(_CORBA_ULong _max, _CORBA_ULong _len, NameObjectPair* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< NameObjectPair > (_max, _len, _val, _rel) {}

  

    inline NameObjectPairSeq& operator = (const NameObjectPairSeq& _s) {
      _CORBA_Unbounded_Sequence< NameObjectPair > ::operator=(_s);
      return *this;
    }
  };

  class NameObjectPairSeq_out;

  class NameObjectPairSeq_var {
  public:
    inline NameObjectPairSeq_var() : _pd_seq(0) {}
    inline NameObjectPairSeq_var(NameObjectPairSeq* _s) : _pd_seq(_s) {}
    inline NameObjectPairSeq_var(const NameObjectPairSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new NameObjectPairSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~NameObjectPairSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline NameObjectPairSeq_var& operator = (NameObjectPairSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline NameObjectPairSeq_var& operator = (const NameObjectPairSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new NameObjectPairSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline NameObjectPair& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline NameObjectPairSeq* operator -> () { return _pd_seq; }
    inline const NameObjectPairSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator NameObjectPairSeq& () const { return *_pd_seq; }
#else
    inline operator const NameObjectPairSeq& () const { return *_pd_seq; }
    inline operator NameObjectPairSeq& () { return *_pd_seq; }
#endif
      
    inline const NameObjectPairSeq& in() const { return *_pd_seq; }
    inline NameObjectPairSeq&       inout()    { return *_pd_seq; }
    inline NameObjectPairSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline NameObjectPairSeq* _retn() { NameObjectPairSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class NameObjectPairSeq_out;
    
  private:
    NameObjectPairSeq* _pd_seq;
  };

  class NameObjectPairSeq_out {
  public:
    inline NameObjectPairSeq_out(NameObjectPairSeq*& _s) : _data(_s) { _data = 0; }
    inline NameObjectPairSeq_out(NameObjectPairSeq_var& _s)
      : _data(_s._pd_seq) { _s = (NameObjectPairSeq*) 0; }
    inline NameObjectPairSeq_out(const NameObjectPairSeq_out& _s) : _data(_s._data) {}
    inline NameObjectPairSeq_out& operator = (const NameObjectPairSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline NameObjectPairSeq_out& operator = (NameObjectPairSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator NameObjectPairSeq*&()  { return _data; }
    inline NameObjectPairSeq*& ptr()       { return _data; }
    inline NameObjectPairSeq* operator->() { return _data; }

    inline NameObjectPair& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    NameObjectPairSeq*& _data;

  private:
    NameObjectPairSeq_out();
    NameObjectPairSeq_out& operator=(const NameObjectPairSeq_var&);
  };

  struct RebindNameCorbaDef {
    typedef _CORBA_ConstrType_Variable_Var<RebindNameCorbaDef> _var_type;

    
    ::CORBA::String_member agentName;

    _CORBA_ObjRef_Member< _objref_NamedObjectRepositoryCorbaDef, NamedObjectRepositoryCorbaDef_Helper>  objectRepository;

    ::CORBA::ULong timeToLive;

    ::CORBA::Boolean contextOnly;

    NameObjectPairSeq boundObjects;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef RebindNameCorbaDef::_var_type RebindNameCorbaDef_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< RebindNameCorbaDef,RebindNameCorbaDef_var > RebindNameCorbaDef_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RebindNameCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Core
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NameObjectPair& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::NameObjectPair* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::NameObjectPair*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NameObjectPair*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Core::NameObjectPairSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Core::NameObjectPairSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::NameObjectPairSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::NameObjectPairSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Core::RebindNameCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Core::RebindNameCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Core::RebindNameCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Core::RebindNameCorbaDef*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_RebindNameCorbaDef
#endif

#endif  // __RebindNameCorbaDef_hh__

