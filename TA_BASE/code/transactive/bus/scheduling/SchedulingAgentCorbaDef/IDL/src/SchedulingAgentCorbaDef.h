// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SchedulingAgentCorbaDef_hh__
#define __SchedulingAgentCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mSchedulingAgentCorbaDef__
#define __TA__Base__Bus_mSchedulingAgentCorbaDef__

  class SchedulingAgentCorbaDef;
  class _objref_SchedulingAgentCorbaDef;
  class _impl_SchedulingAgentCorbaDef;
  
  typedef _objref_SchedulingAgentCorbaDef* SchedulingAgentCorbaDef_ptr;
  typedef SchedulingAgentCorbaDef_ptr SchedulingAgentCorbaDefRef;

  class SchedulingAgentCorbaDef_Helper {
  public:
    typedef SchedulingAgentCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_SchedulingAgentCorbaDef, SchedulingAgentCorbaDef_Helper> SchedulingAgentCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_SchedulingAgentCorbaDef,SchedulingAgentCorbaDef_Helper > SchedulingAgentCorbaDef_out;

#endif

  // interface SchedulingAgentCorbaDef
  class SchedulingAgentCorbaDef {
  public:
    // Declarations for this interface type.
    typedef SchedulingAgentCorbaDef_ptr _ptr_type;
    typedef SchedulingAgentCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum DayOfWeek { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday /*, __max_DayOfWeek=0xffffffff */ };
    typedef DayOfWeek& DayOfWeek_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DayOfWeek;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DayOfWeekSequence;

    // Need to declare <<= for elem type, as GCC expands templates early
#if defined(__GNUG__) && __GNUG__ == 2 && __GNUC_MINOR__ == 7
     friend inline void operator >>= (DayOfWeek, cdrStream&);
     friend inline void operator <<= (DayOfWeek&, cdrStream&);
#endif

    class DayOfWeekSequence_var;

    class DayOfWeekSequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< DayOfWeek, 4, 4 >  {
    public:
      typedef DayOfWeekSequence_var _var_type;
      inline DayOfWeekSequence() {}
      inline DayOfWeekSequence(const DayOfWeekSequence& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< DayOfWeek, 4, 4 > (_s) {}

      inline DayOfWeekSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< DayOfWeek, 4, 4 > (_max) {}
      inline DayOfWeekSequence(_CORBA_ULong _max, _CORBA_ULong _len, DayOfWeek* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< DayOfWeek, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline DayOfWeekSequence& operator = (const DayOfWeekSequence& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< DayOfWeek, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class DayOfWeekSequence_out;

    class DayOfWeekSequence_var {
    public:
      inline DayOfWeekSequence_var() : _pd_seq(0) {}
      inline DayOfWeekSequence_var(DayOfWeekSequence* _s) : _pd_seq(_s) {}
      inline DayOfWeekSequence_var(const DayOfWeekSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new DayOfWeekSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~DayOfWeekSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline DayOfWeekSequence_var& operator = (DayOfWeekSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline DayOfWeekSequence_var& operator = (const DayOfWeekSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new DayOfWeekSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline DayOfWeek& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline DayOfWeekSequence* operator -> () { return _pd_seq; }
      inline const DayOfWeekSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator DayOfWeekSequence& () const { return *_pd_seq; }
#else
      inline operator const DayOfWeekSequence& () const { return *_pd_seq; }
      inline operator DayOfWeekSequence& () { return *_pd_seq; }
#endif
        
      inline const DayOfWeekSequence& in() const { return *_pd_seq; }
      inline DayOfWeekSequence&       inout()    { return *_pd_seq; }
      inline DayOfWeekSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline DayOfWeekSequence* _retn() { DayOfWeekSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class DayOfWeekSequence_out;
      
    private:
      DayOfWeekSequence* _pd_seq;
    };

    class DayOfWeekSequence_out {
    public:
      inline DayOfWeekSequence_out(DayOfWeekSequence*& _s) : _data(_s) { _data = 0; }
      inline DayOfWeekSequence_out(DayOfWeekSequence_var& _s)
        : _data(_s._pd_seq) { _s = (DayOfWeekSequence*) 0; }
      inline DayOfWeekSequence_out(const DayOfWeekSequence_out& _s) : _data(_s._data) {}
      inline DayOfWeekSequence_out& operator = (const DayOfWeekSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline DayOfWeekSequence_out& operator = (DayOfWeekSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator DayOfWeekSequence*&()  { return _data; }
      inline DayOfWeekSequence*& ptr()       { return _data; }
      inline DayOfWeekSequence* operator->() { return _data; }

      inline DayOfWeek& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      DayOfWeekSequence*& _data;

    private:
      DayOfWeekSequence_out();
      DayOfWeekSequence_out& operator=(const DayOfWeekSequence_var&);
    };

    enum MonthOfYear { January, February, March, April, May, June, July, August, September, October, November, December /*, __max_MonthOfYear=0xffffffff */ };
    typedef MonthOfYear& MonthOfYear_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MonthOfYear;

    enum ScheduleType { OnceOff, Daily, Weekly, Monthly, Yearly /*, __max_ScheduleType=0xffffffff */ };
    typedef ScheduleType& ScheduleType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ScheduleType;

    enum BadScheduleReason { InvalidMinute, InvalidHour, InvalidDate, InvalidDayOfMonth, InvalidMonth, InvalidYear, EndDateNotRequired, MissingDayOfWeek /*, __max_BadScheduleReason=0xffffffff */ };
    typedef BadScheduleReason& BadScheduleReason_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BadScheduleReason;

    enum BadJobReason { MissingParameter, BadParameterValue /*, __max_BadJobReason=0xffffffff */ };
    typedef BadJobReason& BadJobReason_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BadJobReason;

    struct ScheduleCorbaDef {
      typedef _CORBA_ConstrType_Variable_Var<ScheduleCorbaDef> _var_type;

      
      ScheduleType type;

      ::CORBA::UShort minute;

      ::CORBA::UShort hour;

      ::CORBA::UShort dayOfMonth;

      MonthOfYear month;

      DayOfWeekSequence daysOfWeek;

      ::CORBA::UShort year;

      ::CORBA::UShort endDay;

      MonthOfYear endMonth;

      ::CORBA::UShort endYear;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ScheduleCorbaDef::_var_type ScheduleCorbaDef_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ScheduleCorbaDef,ScheduleCorbaDef_var > ScheduleCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ScheduleCorbaDef;

    struct RunTimeCorbaDef {
      typedef _CORBA_ConstrType_Fix_Var<RunTimeCorbaDef> _var_type;

      
      ::CORBA::UShort minute;

      ::CORBA::UShort hour;

      ::CORBA::UShort dayOfMonth;

      MonthOfYear month;

      ::CORBA::UShort year;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef RunTimeCorbaDef::_var_type RunTimeCorbaDef_var;

    typedef RunTimeCorbaDef& RunTimeCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_RunTimeCorbaDef;

    struct NameValuePair {
      typedef _CORBA_ConstrType_Variable_Var<NameValuePair> _var_type;

      
      ::CORBA::String_member name;

      ::CORBA::String_member value;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef NameValuePair::_var_type NameValuePair_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< NameValuePair,NameValuePair_var > NameValuePair_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_NameValuePair;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobData;

    class JobData_var;

    class JobData : public _CORBA_Unbounded_Sequence< NameValuePair >  {
    public:
      typedef JobData_var _var_type;
      inline JobData() {}
      inline JobData(const JobData& _s)
        : _CORBA_Unbounded_Sequence< NameValuePair > (_s) {}

      inline JobData(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< NameValuePair > (_max) {}
      inline JobData(_CORBA_ULong _max, _CORBA_ULong _len, NameValuePair* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< NameValuePair > (_max, _len, _val, _rel) {}

    

      inline JobData& operator = (const JobData& _s) {
        _CORBA_Unbounded_Sequence< NameValuePair > ::operator=(_s);
        return *this;
      }
    };

    class JobData_out;

    class JobData_var {
    public:
      inline JobData_var() : _pd_seq(0) {}
      inline JobData_var(JobData* _s) : _pd_seq(_s) {}
      inline JobData_var(const JobData_var& _s) {
        if( _s._pd_seq )  _pd_seq = new JobData(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~JobData_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline JobData_var& operator = (JobData* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline JobData_var& operator = (const JobData_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new JobData;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline NameValuePair& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline JobData* operator -> () { return _pd_seq; }
      inline const JobData* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator JobData& () const { return *_pd_seq; }
#else
      inline operator const JobData& () const { return *_pd_seq; }
      inline operator JobData& () { return *_pd_seq; }
#endif
        
      inline const JobData& in() const { return *_pd_seq; }
      inline JobData&       inout()    { return *_pd_seq; }
      inline JobData*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline JobData* _retn() { JobData* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class JobData_out;
      
    private:
      JobData* _pd_seq;
    };

    class JobData_out {
    public:
      inline JobData_out(JobData*& _s) : _data(_s) { _data = 0; }
      inline JobData_out(JobData_var& _s)
        : _data(_s._pd_seq) { _s = (JobData*) 0; }
      inline JobData_out(const JobData_out& _s) : _data(_s._data) {}
      inline JobData_out& operator = (const JobData_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline JobData_out& operator = (JobData* _s) {
        _data = _s;
        return *this;
      }
      inline operator JobData*&()  { return _data; }
      inline JobData*& ptr()       { return _data; }
      inline JobData* operator->() { return _data; }

      inline NameValuePair& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      JobData*& _data;

    private:
      JobData_out();
      JobData_out& operator=(const JobData_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobTypeSeq;

    class JobTypeSeq_var;

    class JobTypeSeq : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef JobTypeSeq_var _var_type;
      inline JobTypeSeq() {}
      inline JobTypeSeq(const JobTypeSeq& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline JobTypeSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline JobTypeSeq(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline JobTypeSeq& operator = (const JobTypeSeq& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class JobTypeSeq_out;

    class JobTypeSeq_var {
    public:
      inline JobTypeSeq_var() : _pd_seq(0) {}
      inline JobTypeSeq_var(JobTypeSeq* _s) : _pd_seq(_s) {}
      inline JobTypeSeq_var(const JobTypeSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new JobTypeSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~JobTypeSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline JobTypeSeq_var& operator = (JobTypeSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline JobTypeSeq_var& operator = (const JobTypeSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new JobTypeSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline JobTypeSeq* operator -> () { return _pd_seq; }
      inline const JobTypeSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator JobTypeSeq& () const { return *_pd_seq; }
#else
      inline operator const JobTypeSeq& () const { return *_pd_seq; }
      inline operator JobTypeSeq& () { return *_pd_seq; }
#endif
        
      inline const JobTypeSeq& in() const { return *_pd_seq; }
      inline JobTypeSeq&       inout()    { return *_pd_seq; }
      inline JobTypeSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline JobTypeSeq* _retn() { JobTypeSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class JobTypeSeq_out;
      
    private:
      JobTypeSeq* _pd_seq;
    };

    class JobTypeSeq_out {
    public:
      inline JobTypeSeq_out(JobTypeSeq*& _s) : _data(_s) { _data = 0; }
      inline JobTypeSeq_out(JobTypeSeq_var& _s)
        : _data(_s._pd_seq) { _s = (JobTypeSeq*) 0; }
      inline JobTypeSeq_out(const JobTypeSeq_out& _s) : _data(_s._data) {}
      inline JobTypeSeq_out& operator = (const JobTypeSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline JobTypeSeq_out& operator = (JobTypeSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator JobTypeSeq*&()  { return _data; }
      inline JobTypeSeq*& ptr()       { return _data; }
      inline JobTypeSeq* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      JobTypeSeq*& _data;

    private:
      JobTypeSeq_out();
      JobTypeSeq_out& operator=(const JobTypeSeq_var&);
    };

    struct JobCorbaDef {
      typedef _CORBA_ConstrType_Variable_Var<JobCorbaDef> _var_type;

      
      ::CORBA::String_member identifier;

      ::CORBA::String_member type;

      JobData data;

      ::CORBA::ULong profileIdentifier;

      ::CORBA::ULong locationIdentifier;

      ::CORBA::String_member description;

      ScheduleCorbaDef schedule;

      RunTimeCorbaDef runTime;

      ::CORBA::Boolean isInhibited;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef JobCorbaDef::_var_type JobCorbaDef_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< JobCorbaDef,JobCorbaDef_var > JobCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobCorbaDef;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobSequence;

    class JobSequence_var;

    class JobSequence : public _CORBA_Unbounded_Sequence< JobCorbaDef >  {
    public:
      typedef JobSequence_var _var_type;
      inline JobSequence() {}
      inline JobSequence(const JobSequence& _s)
        : _CORBA_Unbounded_Sequence< JobCorbaDef > (_s) {}

      inline JobSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< JobCorbaDef > (_max) {}
      inline JobSequence(_CORBA_ULong _max, _CORBA_ULong _len, JobCorbaDef* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< JobCorbaDef > (_max, _len, _val, _rel) {}

    

      inline JobSequence& operator = (const JobSequence& _s) {
        _CORBA_Unbounded_Sequence< JobCorbaDef > ::operator=(_s);
        return *this;
      }
    };

    class JobSequence_out;

    class JobSequence_var {
    public:
      inline JobSequence_var() : _pd_seq(0) {}
      inline JobSequence_var(JobSequence* _s) : _pd_seq(_s) {}
      inline JobSequence_var(const JobSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new JobSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~JobSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline JobSequence_var& operator = (JobSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline JobSequence_var& operator = (const JobSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new JobSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline JobCorbaDef& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline JobSequence* operator -> () { return _pd_seq; }
      inline const JobSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator JobSequence& () const { return *_pd_seq; }
#else
      inline operator const JobSequence& () const { return *_pd_seq; }
      inline operator JobSequence& () { return *_pd_seq; }
#endif
        
      inline const JobSequence& in() const { return *_pd_seq; }
      inline JobSequence&       inout()    { return *_pd_seq; }
      inline JobSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline JobSequence* _retn() { JobSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class JobSequence_out;
      
    private:
      JobSequence* _pd_seq;
    };

    class JobSequence_out {
    public:
      inline JobSequence_out(JobSequence*& _s) : _data(_s) { _data = 0; }
      inline JobSequence_out(JobSequence_var& _s)
        : _data(_s._pd_seq) { _s = (JobSequence*) 0; }
      inline JobSequence_out(const JobSequence_out& _s) : _data(_s._data) {}
      inline JobSequence_out& operator = (const JobSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline JobSequence_out& operator = (JobSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator JobSequence*&()  { return _data; }
      inline JobSequence*& ptr()       { return _data; }
      inline JobSequence* operator->() { return _data; }

      inline JobCorbaDef& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      JobSequence*& _data;

    private:
      JobSequence_out();
      JobSequence_out& operator=(const JobSequence_var&);
    };

    struct JobTimeCorbaDef {
      typedef _CORBA_ConstrType_Variable_Var<JobTimeCorbaDef> _var_type;

      
      ::CORBA::String_member jobIdentifer;

      RunTimeCorbaDef runTime;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef JobTimeCorbaDef::_var_type JobTimeCorbaDef_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< JobTimeCorbaDef,JobTimeCorbaDef_var > JobTimeCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobTimeCorbaDef;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_minuteT;

    typedef ::CORBA::ULong minuteT;
    typedef ::CORBA::ULong_out minuteT_out;

    struct JobInstanceCorbaDef {
      typedef _CORBA_ConstrType_Variable_Var<JobInstanceCorbaDef> _var_type;

      
      ::CORBA::String_member jobIdentifier;

      minuteT minuteStarted;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef JobInstanceCorbaDef::_var_type JobInstanceCorbaDef_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< JobInstanceCorbaDef,JobInstanceCorbaDef_var > JobInstanceCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobInstanceCorbaDef;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobInstanceSequence;

    class JobInstanceSequence_var;

    class JobInstanceSequence : public _CORBA_Unbounded_Sequence< JobInstanceCorbaDef >  {
    public:
      typedef JobInstanceSequence_var _var_type;
      inline JobInstanceSequence() {}
      inline JobInstanceSequence(const JobInstanceSequence& _s)
        : _CORBA_Unbounded_Sequence< JobInstanceCorbaDef > (_s) {}

      inline JobInstanceSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< JobInstanceCorbaDef > (_max) {}
      inline JobInstanceSequence(_CORBA_ULong _max, _CORBA_ULong _len, JobInstanceCorbaDef* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< JobInstanceCorbaDef > (_max, _len, _val, _rel) {}

    

      inline JobInstanceSequence& operator = (const JobInstanceSequence& _s) {
        _CORBA_Unbounded_Sequence< JobInstanceCorbaDef > ::operator=(_s);
        return *this;
      }
    };

    class JobInstanceSequence_out;

    class JobInstanceSequence_var {
    public:
      inline JobInstanceSequence_var() : _pd_seq(0) {}
      inline JobInstanceSequence_var(JobInstanceSequence* _s) : _pd_seq(_s) {}
      inline JobInstanceSequence_var(const JobInstanceSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new JobInstanceSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~JobInstanceSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline JobInstanceSequence_var& operator = (JobInstanceSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline JobInstanceSequence_var& operator = (const JobInstanceSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new JobInstanceSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline JobInstanceCorbaDef& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline JobInstanceSequence* operator -> () { return _pd_seq; }
      inline const JobInstanceSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator JobInstanceSequence& () const { return *_pd_seq; }
#else
      inline operator const JobInstanceSequence& () const { return *_pd_seq; }
      inline operator JobInstanceSequence& () { return *_pd_seq; }
#endif
        
      inline const JobInstanceSequence& in() const { return *_pd_seq; }
      inline JobInstanceSequence&       inout()    { return *_pd_seq; }
      inline JobInstanceSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline JobInstanceSequence* _retn() { JobInstanceSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class JobInstanceSequence_out;
      
    private:
      JobInstanceSequence* _pd_seq;
    };

    class JobInstanceSequence_out {
    public:
      inline JobInstanceSequence_out(JobInstanceSequence*& _s) : _data(_s) { _data = 0; }
      inline JobInstanceSequence_out(JobInstanceSequence_var& _s)
        : _data(_s._pd_seq) { _s = (JobInstanceSequence*) 0; }
      inline JobInstanceSequence_out(const JobInstanceSequence_out& _s) : _data(_s._data) {}
      inline JobInstanceSequence_out& operator = (const JobInstanceSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline JobInstanceSequence_out& operator = (JobInstanceSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator JobInstanceSequence*&()  { return _data; }
      inline JobInstanceSequence*& ptr()       { return _data; }
      inline JobInstanceSequence* operator->() { return _data; }

      inline JobInstanceCorbaDef& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      JobInstanceSequence*& _data;

    private:
      JobInstanceSequence_out();
      JobInstanceSequence_out& operator=(const JobInstanceSequence_var&);
    };

    struct BatchUpdateCorbaDef {
      typedef _CORBA_ConstrType_Variable_Var<BatchUpdateCorbaDef> _var_type;

      
      JobSequence jobs;

      JobInstanceSequence jobInstances;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef BatchUpdateCorbaDef::_var_type BatchUpdateCorbaDef_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BatchUpdateCorbaDef,BatchUpdateCorbaDef_var > BatchUpdateCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BatchUpdateCorbaDef;

    class BadScheduleException : public ::CORBA::UserException {
    public:
      
      BadScheduleReason reason;

      ::CORBA::String_member what;

    

      inline BadScheduleException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      BadScheduleException(const BadScheduleException&);
      BadScheduleException(BadScheduleReason i_reason, const char* i_what);
      BadScheduleException& operator=(const BadScheduleException&);
      virtual ~BadScheduleException();
      virtual void _raise() const;
      static BadScheduleException* _downcast(::CORBA::Exception*);
      static const BadScheduleException* _downcast(const ::CORBA::Exception*);
      static inline BadScheduleException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BadScheduleException;

    class BadJobException : public ::CORBA::UserException {
    public:
      
      BadJobReason reason;

      ::CORBA::String_member what;

    

      inline BadJobException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      BadJobException(const BadJobException&);
      BadJobException(BadJobReason i_reason, const char* i_what);
      BadJobException& operator=(const BadJobException&);
      virtual ~BadJobException();
      virtual void _raise() const;
      static BadJobException* _downcast(::CORBA::Exception*);
      static const BadJobException* _downcast(const ::CORBA::Exception*);
      static inline BadJobException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BadJobException;

    class UnrecognisedJobTypeException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline UnrecognisedJobTypeException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      UnrecognisedJobTypeException(const UnrecognisedJobTypeException&);
      UnrecognisedJobTypeException(const char* i_what);
      UnrecognisedJobTypeException& operator=(const UnrecognisedJobTypeException&);
      virtual ~UnrecognisedJobTypeException();
      virtual void _raise() const;
      static UnrecognisedJobTypeException* _downcast(::CORBA::Exception*);
      static const UnrecognisedJobTypeException* _downcast(const ::CORBA::Exception*);
      static inline UnrecognisedJobTypeException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_UnrecognisedJobTypeException;

    class JobDoesNotExistException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline JobDoesNotExistException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      JobDoesNotExistException(const JobDoesNotExistException&);
      JobDoesNotExistException(const char* i_what);
      JobDoesNotExistException& operator=(const JobDoesNotExistException&);
      virtual ~JobDoesNotExistException();
      virtual void _raise() const;
      static JobDoesNotExistException* _downcast(::CORBA::Exception*);
      static const JobDoesNotExistException* _downcast(const ::CORBA::Exception*);
      static inline JobDoesNotExistException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobDoesNotExistException;

    class JobInPastException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline JobInPastException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      JobInPastException(const JobInPastException&);
      JobInPastException(const char* i_what);
      JobInPastException& operator=(const JobInPastException&);
      virtual ~JobInPastException();
      virtual void _raise() const;
      static JobInPastException* _downcast(::CORBA::Exception*);
      static const JobInPastException* _downcast(const ::CORBA::Exception*);
      static inline JobInPastException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_JobInPastException;

    class TooManyJobsException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline TooManyJobsException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      TooManyJobsException(const TooManyJobsException&);
      TooManyJobsException(const char* i_what);
      TooManyJobsException& operator=(const TooManyJobsException&);
      virtual ~TooManyJobsException();
      virtual void _raise() const;
      static TooManyJobsException* _downcast(::CORBA::Exception*);
      static const TooManyJobsException* _downcast(const ::CORBA::Exception*);
      static inline TooManyJobsException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TooManyJobsException;

    class NoRightsAgentException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline NoRightsAgentException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      NoRightsAgentException(const NoRightsAgentException&);
      NoRightsAgentException(const char* i_what);
      NoRightsAgentException& operator=(const NoRightsAgentException&);
      virtual ~NoRightsAgentException();
      virtual void _raise() const;
      static NoRightsAgentException* _downcast(::CORBA::Exception*);
      static const NoRightsAgentException* _downcast(const ::CORBA::Exception*);
      static inline NoRightsAgentException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_NoRightsAgentException;

    class EditLockException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline EditLockException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      EditLockException(const EditLockException&);
      EditLockException(const char* i_what);
      EditLockException& operator=(const EditLockException&);
      virtual ~EditLockException();
      virtual void _raise() const;
      static EditLockException* _downcast(::CORBA::Exception*);
      static const EditLockException* _downcast(const ::CORBA::Exception*);
      static inline EditLockException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EditLockException;

  
  };

  class _objref_SchedulingAgentCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    SchedulingAgentCorbaDef::JobTypeSeq* getSupportedJobTypes(const char* sessionIdentifier);
    char* scheduleJob(const ::TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef& job, const char* sessionIdentifier);
    void removeJob(const char* jobIdentifier, const char* sessionIdentifier);
    void updateJob(const ::TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef& job, const char* sessionIdentifier, ::CORBA::Boolean changeEnabled, ::CORBA::Boolean checkIfInPast);
    void updateEditLock(const char* jobIdentifier, const char* sessionIdentifier, ::CORBA::Boolean bLock);
    ::CORBA::Boolean isJobLockedForEdit(const char* jobIdentifier, const char* sessionIdentifier);
    SchedulingAgentCorbaDef::JobCorbaDef* getJob(const char* jobIdentifier, const char* sessionIdentifier);
    SchedulingAgentCorbaDef::JobSequence* getAllJobs(const char* sessionIdentifier);

    inline _objref_SchedulingAgentCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_SchedulingAgentCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_SchedulingAgentCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_SchedulingAgentCorbaDef(const _objref_SchedulingAgentCorbaDef&);
    _objref_SchedulingAgentCorbaDef& operator = (const _objref_SchedulingAgentCorbaDef&);
    // not implemented

    friend class SchedulingAgentCorbaDef;
  };

  class _pof_SchedulingAgentCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_SchedulingAgentCorbaDef() : _OMNI_NS(proxyObjectFactory)(SchedulingAgentCorbaDef::_PD_repoId) {}
    virtual ~_pof_SchedulingAgentCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_SchedulingAgentCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_SchedulingAgentCorbaDef();

    virtual SchedulingAgentCorbaDef::JobTypeSeq* getSupportedJobTypes(const char* sessionIdentifier) = 0;
    virtual char* scheduleJob(const ::TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef& job, const char* sessionIdentifier) = 0;
    virtual void removeJob(const char* jobIdentifier, const char* sessionIdentifier) = 0;
    virtual void updateJob(const ::TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef& job, const char* sessionIdentifier, ::CORBA::Boolean changeEnabled, ::CORBA::Boolean checkIfInPast) = 0;
    virtual void updateEditLock(const char* jobIdentifier, const char* sessionIdentifier, ::CORBA::Boolean bLock) = 0;
    virtual ::CORBA::Boolean isJobLockedForEdit(const char* jobIdentifier, const char* sessionIdentifier) = 0;
    virtual SchedulingAgentCorbaDef::JobCorbaDef* getJob(const char* jobIdentifier, const char* sessionIdentifier) = 0;
    virtual SchedulingAgentCorbaDef::JobSequence* getAllJobs(const char* sessionIdentifier) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SchedulingAgentCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class SchedulingAgentCorbaDef :
    public virtual TA_Base_Bus::_impl_SchedulingAgentCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~SchedulingAgentCorbaDef();

    inline ::TA_Base_Bus::SchedulingAgentCorbaDef_ptr _this() {
      return (::TA_Base_Bus::SchedulingAgentCorbaDef_ptr) _do_this(::TA_Base_Bus::SchedulingAgentCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeek _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeek& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::SchedulingAgentCorbaDef::Sunday) {
    _e = (TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeek) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeek _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeek& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeekSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeekSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeekSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::DayOfWeekSequence*& _sp);

inline void operator >>=(TA_Base_Bus::SchedulingAgentCorbaDef::MonthOfYear _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::SchedulingAgentCorbaDef::MonthOfYear& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::SchedulingAgentCorbaDef::December) {
    _e = (TA_Base_Bus::SchedulingAgentCorbaDef::MonthOfYear) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::MonthOfYear _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::MonthOfYear& _s);

inline void operator >>=(TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::SchedulingAgentCorbaDef::Yearly) {
    _e = (TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleType& _s);

inline void operator >>=(TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleReason _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleReason& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::SchedulingAgentCorbaDef::MissingDayOfWeek) {
    _e = (TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleReason) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleReason _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleReason& _s);

inline void operator >>=(TA_Base_Bus::SchedulingAgentCorbaDef::BadJobReason _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::SchedulingAgentCorbaDef::BadJobReason& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::SchedulingAgentCorbaDef::BadParameterValue) {
    _e = (TA_Base_Bus::SchedulingAgentCorbaDef::BadJobReason) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::BadJobReason _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::BadJobReason& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::ScheduleCorbaDef*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::RunTimeCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::RunTimeCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::RunTimeCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::RunTimeCorbaDef*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::NameValuePair& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::NameValuePair* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::NameValuePair*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::NameValuePair*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobData& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobData* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobData*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobData*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobTypeSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobTypeSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobTypeSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobTypeSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobSequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobTimeCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobTimeCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobTimeCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobTimeCorbaDef*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInstanceSequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BatchUpdateCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::BatchUpdateCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef::BatchUpdateCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BatchUpdateCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BadScheduleException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BadJobException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BadJobException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::BadJobException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::UnrecognisedJobTypeException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::UnrecognisedJobTypeException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::UnrecognisedJobTypeException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobDoesNotExistException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobDoesNotExistException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobDoesNotExistException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInPastException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInPastException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::JobInPastException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::TooManyJobsException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::TooManyJobsException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::TooManyJobsException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::NoRightsAgentException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::NoRightsAgentException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::NoRightsAgentException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::EditLockException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::EditLockException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SchedulingAgentCorbaDef::EditLockException*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SchedulingAgentCorbaDef_ptr& _s);



inline void
TA_Base_Bus::SchedulingAgentCorbaDef::_marshalObjRef(::TA_Base_Bus::SchedulingAgentCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SchedulingAgentCorbaDef
#endif

#endif  // __SchedulingAgentCorbaDef_hh__

