// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ITrainInformationCorba_hh__
#define __ITrainInformationCorba_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
#endif



#ifndef __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#define __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#include <ITrainCommonCorba.h>
#endif
#ifndef __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#define __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#include <ITrainExceptionsCorba.h>
#endif
#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mITrainInformationCorba__
#define __TA__Base__Bus_mITrainInformationCorba__

  class ITrainInformationCorba;
  class _objref_ITrainInformationCorba;
  class _impl_ITrainInformationCorba;
  
  typedef _objref_ITrainInformationCorba* ITrainInformationCorba_ptr;
  typedef ITrainInformationCorba_ptr ITrainInformationCorbaRef;

  class ITrainInformationCorba_Helper {
  public:
    typedef ITrainInformationCorba_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ITrainInformationCorba, ITrainInformationCorba_Helper> ITrainInformationCorba_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ITrainInformationCorba,ITrainInformationCorba_Helper > ITrainInformationCorba_out;

#endif

  // interface ITrainInformationCorba
  class ITrainInformationCorba {
  public:
    // Declarations for this interface type.
    typedef ITrainInformationCorba_ptr _ptr_type;
    typedef ITrainInformationCorba_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct AgentOperationMode {
      typedef _CORBA_ConstrType_Variable_Var<AgentOperationMode> _var_type;

      
      ::CORBA::Boolean fallbackMode;

      ::CORBA::Boolean doubleAtsFailure;

      ::CORBA::Boolean groupOffline;

      ::CORBA::Boolean localDuty;

      typedef _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  _controlledLocations_seq;
      _controlledLocations_seq controlledLocations;

      ::CORBA::Long lastUpdateTime;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef AgentOperationMode::_var_type AgentOperationMode_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< AgentOperationMode,AgentOperationMode_var > AgentOperationMode_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AgentOperationMode;

    enum EChangeType { SelectionListUpdate, SelectionListDeletion /*, __max_EChangeType=0xffffffff */ };
    typedef EChangeType& EChangeType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EChangeType;

    struct TrainSelectionUpdate {
      typedef _CORBA_ConstrType_Variable_Var<TrainSelectionUpdate> _var_type;

      
      EChangeType change;

      ::CORBA::String_member selectionName;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TrainSelectionUpdate::_var_type TrainSelectionUpdate_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< TrainSelectionUpdate,TrainSelectionUpdate_var > TrainSelectionUpdate_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainSelectionUpdate;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainSelectionList;

    class TrainSelectionList_var;

    class TrainSelectionList : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef TrainSelectionList_var _var_type;
      inline TrainSelectionList() {}
      inline TrainSelectionList(const TrainSelectionList& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline TrainSelectionList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline TrainSelectionList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline TrainSelectionList& operator = (const TrainSelectionList& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class TrainSelectionList_out;

    class TrainSelectionList_var {
    public:
      inline TrainSelectionList_var() : _pd_seq(0) {}
      inline TrainSelectionList_var(TrainSelectionList* _s) : _pd_seq(_s) {}
      inline TrainSelectionList_var(const TrainSelectionList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new TrainSelectionList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~TrainSelectionList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline TrainSelectionList_var& operator = (TrainSelectionList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline TrainSelectionList_var& operator = (const TrainSelectionList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new TrainSelectionList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline TrainSelectionList* operator -> () { return _pd_seq; }
      inline const TrainSelectionList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator TrainSelectionList& () const { return *_pd_seq; }
#else
      inline operator const TrainSelectionList& () const { return *_pd_seq; }
      inline operator TrainSelectionList& () { return *_pd_seq; }
#endif
        
      inline const TrainSelectionList& in() const { return *_pd_seq; }
      inline TrainSelectionList&       inout()    { return *_pd_seq; }
      inline TrainSelectionList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline TrainSelectionList* _retn() { TrainSelectionList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class TrainSelectionList_out;
      
    private:
      TrainSelectionList* _pd_seq;
    };

    class TrainSelectionList_out {
    public:
      inline TrainSelectionList_out(TrainSelectionList*& _s) : _data(_s) { _data = 0; }
      inline TrainSelectionList_out(TrainSelectionList_var& _s)
        : _data(_s._pd_seq) { _s = (TrainSelectionList*) 0; }
      inline TrainSelectionList_out(const TrainSelectionList_out& _s) : _data(_s._data) {}
      inline TrainSelectionList_out& operator = (const TrainSelectionList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline TrainSelectionList_out& operator = (TrainSelectionList* _s) {
        _data = _s;
        return *this;
      }
      inline operator TrainSelectionList*&()  { return _data; }
      inline TrainSelectionList*& ptr()       { return _data; }
      inline TrainSelectionList* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      TrainSelectionList*& _data;

    private:
      TrainSelectionList_out();
      TrainSelectionList_out& operator=(const TrainSelectionList_var&);
    };

    enum EAtsTrack { TrackUnknown, TrackInbound, TrackOutbound /*, __max_EAtsTrack=0xffffffff */ };
    typedef EAtsTrack& EAtsTrack_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EAtsTrack;

    struct TrainDetails {
      typedef _CORBA_ConstrType_Variable_Var<TrainDetails> _var_type;

      
      ITrainCommonCorba::TrainId trainId;

      ::CORBA::Boolean communicationValid;

      ::CORBA::ULong communicatingLocation;

      ::CORBA::String_member primaryTsi;

      ::CORBA::String_member secondaryTsi;

      ::CORBA::Boolean atsValid;

      ::CORBA::Boolean isLocalisationValid;

      ::CORBA::ULong currentLocation;

      ::CORBA::ULong currentCctvZone;

      ::CORBA::String_member serviceNumber;

      ::CORBA::Boolean isMute;

      EAtsTrack track;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TrainDetails::_var_type TrainDetails_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< TrainDetails,TrainDetails_var > TrainDetails_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainDetails;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainDetailsList;

    class TrainDetailsList_var;

    class TrainDetailsList : public _CORBA_Unbounded_Sequence< TrainDetails >  {
    public:
      typedef TrainDetailsList_var _var_type;
      inline TrainDetailsList() {}
      inline TrainDetailsList(const TrainDetailsList& _s)
        : _CORBA_Unbounded_Sequence< TrainDetails > (_s) {}

      inline TrainDetailsList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< TrainDetails > (_max) {}
      inline TrainDetailsList(_CORBA_ULong _max, _CORBA_ULong _len, TrainDetails* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< TrainDetails > (_max, _len, _val, _rel) {}

    

      inline TrainDetailsList& operator = (const TrainDetailsList& _s) {
        _CORBA_Unbounded_Sequence< TrainDetails > ::operator=(_s);
        return *this;
      }
    };

    class TrainDetailsList_out;

    class TrainDetailsList_var {
    public:
      inline TrainDetailsList_var() : _pd_seq(0) {}
      inline TrainDetailsList_var(TrainDetailsList* _s) : _pd_seq(_s) {}
      inline TrainDetailsList_var(const TrainDetailsList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new TrainDetailsList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~TrainDetailsList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline TrainDetailsList_var& operator = (TrainDetailsList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline TrainDetailsList_var& operator = (const TrainDetailsList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new TrainDetailsList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline TrainDetails& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline TrainDetailsList* operator -> () { return _pd_seq; }
      inline const TrainDetailsList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator TrainDetailsList& () const { return *_pd_seq; }
#else
      inline operator const TrainDetailsList& () const { return *_pd_seq; }
      inline operator TrainDetailsList& () { return *_pd_seq; }
#endif
        
      inline const TrainDetailsList& in() const { return *_pd_seq; }
      inline TrainDetailsList&       inout()    { return *_pd_seq; }
      inline TrainDetailsList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline TrainDetailsList* _retn() { TrainDetailsList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class TrainDetailsList_out;
      
    private:
      TrainDetailsList* _pd_seq;
    };

    class TrainDetailsList_out {
    public:
      inline TrainDetailsList_out(TrainDetailsList*& _s) : _data(_s) { _data = 0; }
      inline TrainDetailsList_out(TrainDetailsList_var& _s)
        : _data(_s._pd_seq) { _s = (TrainDetailsList*) 0; }
      inline TrainDetailsList_out(const TrainDetailsList_out& _s) : _data(_s._data) {}
      inline TrainDetailsList_out& operator = (const TrainDetailsList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline TrainDetailsList_out& operator = (TrainDetailsList* _s) {
        _data = _s;
        return *this;
      }
      inline operator TrainDetailsList*&()  { return _data; }
      inline TrainDetailsList*& ptr()       { return _data; }
      inline TrainDetailsList* operator->() { return _data; }

      inline TrainDetails& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      TrainDetailsList*& _data;

    private:
      TrainDetailsList_out();
      TrainDetailsList_out& operator=(const TrainDetailsList_var&);
    };

  
  };

  class _objref_ITrainInformationCorba :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ITrainInformationCorba::TrainDetailsList* getTrainList();
    ITrainInformationCorba::TrainDetails* getTrainDetails(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId);
    ITrainInformationCorba::TrainSelectionList* getTrainSelectionList();
    ITrainCommonCorba::TrainList* getTrainSelection(const char* selectionName);
    void saveTrainSelection(const char* selectionName, const ::TA_Base_Bus::ITrainCommonCorba::TrainList& trainIDs, const char* sessionId);
    void deleteTrainSelection(const char* selectionName, const char* sessionId);
    ITrainInformationCorba::AgentOperationMode* getAgentOperationMode();

    inline _objref_ITrainInformationCorba()  { _PR_setobj(0); }  // nil
    _objref_ITrainInformationCorba(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ITrainInformationCorba();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ITrainInformationCorba(const _objref_ITrainInformationCorba&);
    _objref_ITrainInformationCorba& operator = (const _objref_ITrainInformationCorba&);
    // not implemented

    friend class ITrainInformationCorba;
  };

  class _pof_ITrainInformationCorba : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ITrainInformationCorba() : _OMNI_NS(proxyObjectFactory)(ITrainInformationCorba::_PD_repoId) {}
    virtual ~_pof_ITrainInformationCorba();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ITrainInformationCorba :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ITrainInformationCorba();

    virtual ITrainInformationCorba::TrainDetailsList* getTrainList() = 0;
    virtual ITrainInformationCorba::TrainDetails* getTrainDetails(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId) = 0;
    virtual ITrainInformationCorba::TrainSelectionList* getTrainSelectionList() = 0;
    virtual ITrainCommonCorba::TrainList* getTrainSelection(const char* selectionName) = 0;
    virtual void saveTrainSelection(const char* selectionName, const ::TA_Base_Bus::ITrainCommonCorba::TrainList& trainIDs, const char* sessionId) = 0;
    virtual void deleteTrainSelection(const char* selectionName, const char* sessionId) = 0;
    virtual ITrainInformationCorba::AgentOperationMode* getAgentOperationMode() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ITrainInformationCorba;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class ITrainInformationCorba :
    public virtual TA_Base_Bus::_impl_ITrainInformationCorba,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ITrainInformationCorba();

    inline ::TA_Base_Bus::ITrainInformationCorba_ptr _this() {
      return (::TA_Base_Bus::ITrainInformationCorba_ptr) _do_this(::TA_Base_Bus::ITrainInformationCorba::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::AgentOperationMode& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::AgentOperationMode* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::AgentOperationMode*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::AgentOperationMode*& _sp);

inline void operator >>=(TA_Base_Bus::ITrainInformationCorba::EChangeType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainInformationCorba::EChangeType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainInformationCorba::SelectionListDeletion) {
    _e = (TA_Base_Bus::ITrainInformationCorba::EChangeType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::EChangeType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::EChangeType& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainSelectionUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainSelectionUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainSelectionUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainSelectionUpdate*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainSelectionList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainSelectionList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainSelectionList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainSelectionList*& _sp);

inline void operator >>=(TA_Base_Bus::ITrainInformationCorba::EAtsTrack _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainInformationCorba::EAtsTrack& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainInformationCorba::TrackOutbound) {
    _e = (TA_Base_Bus::ITrainInformationCorba::EAtsTrack) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::EAtsTrack _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::EAtsTrack& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainDetails& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainDetails* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainDetails*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainDetails*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainDetailsList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainDetailsList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba::TrainDetailsList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainInformationCorba::TrainDetailsList*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainInformationCorba_ptr& _s);



inline void
TA_Base_Bus::ITrainInformationCorba::_marshalObjRef(::TA_Base_Bus::ITrainInformationCorba_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainInformationCorba
#endif

#endif  // __ITrainInformationCorba_hh__

