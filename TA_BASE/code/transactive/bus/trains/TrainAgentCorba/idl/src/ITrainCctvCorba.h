// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ITrainCctvCorba_hh__
#define __ITrainCctvCorba_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
#endif



#ifndef __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#define __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#include <ITrainCommonCorba.h>
#endif
#ifndef __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#define __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#include <ITrainExceptionsCorba.h>
#endif
#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mITrainCctvCorba__
#define __TA__Base__Bus_mITrainCctvCorba__

  class ITrainCctvCorba;
  class _objref_ITrainCctvCorba;
  class _impl_ITrainCctvCorba;
  
  typedef _objref_ITrainCctvCorba* ITrainCctvCorba_ptr;
  typedef ITrainCctvCorba_ptr ITrainCctvCorbaRef;

  class ITrainCctvCorba_Helper {
  public:
    typedef ITrainCctvCorba_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ITrainCctvCorba, ITrainCctvCorba_Helper> ITrainCctvCorba_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ITrainCctvCorba,ITrainCctvCorba_Helper > ITrainCctvCorba_out;

#endif

  // interface ITrainCctvCorba
  class ITrainCctvCorba {
  public:
    // Declarations for this interface type.
    typedef ITrainCctvCorba_ptr _ptr_type;
    typedef ITrainCctvCorba_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum ECctvSwitchMode { CctvInactive, CctvSequence, CctvCamera, CctvQuad /*, __max_ECctvSwitchMode=0xffffffff */ };
    typedef ECctvSwitchMode& ECctvSwitchMode_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECctvSwitchMode;

    enum ECctvCamera { CameraNone, CameraOne, CameraTwo, CameraThree, CameraFour, CameraFive, CameraSix, CameraSeven, CameraEight /*, __max_ECctvCamera=0xffffffff */ };
    typedef ECctvCamera& ECctvCamera_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECctvCamera;

    enum ECctvSequenceNumber { SequenceOne, SequenceTwo, SequenceThree, SequenceFour, SequenceFive, SequenceSix /*, __max_ECctvSequenceNumber=0xffffffff */ };
    typedef ECctvSequenceNumber& ECctvSequenceNumber_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECctvSequenceNumber;

    enum ECctvSequenceMode { SequenceHold, SequenceForward, SequenceReverse, SequenceSkip /*, __max_ECctvSequenceMode=0xffffffff */ };
    typedef ECctvSequenceMode& ECctvSequenceMode_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECctvSequenceMode;

    struct CctvSwitchState {
      typedef _CORBA_ConstrType_Fix_Var<CctvSwitchState> _var_type;

      
      ITrainCommonCorba::TrainId trainId;

      ITrainCommonCorba::TrainId preConflictTrain;

      ::CORBA::ULong stageId;

      ECctvSwitchMode cctvState;

      ::CORBA::Octet item1;

      ::CORBA::Octet item2;

      ::CORBA::Octet item3;

      ::CORBA::Octet item4;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CctvSwitchState::_var_type CctvSwitchState_var;

    typedef CctvSwitchState& CctvSwitchState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CctvSwitchState;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainCameraSequence;

    // Need to declare <<= for elem type, as GCC expands templates early
#if defined(__GNUG__) && __GNUG__ == 2 && __GNUC_MINOR__ == 7
     friend inline void operator >>= (ECctvCamera, cdrStream&);
     friend inline void operator <<= (ECctvCamera&, cdrStream&);
#endif

    class TrainCameraSequence_var;

    class TrainCameraSequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ECctvCamera, 4, 4 >  {
    public:
      typedef TrainCameraSequence_var _var_type;
      inline TrainCameraSequence() {}
      inline TrainCameraSequence(const TrainCameraSequence& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ECctvCamera, 4, 4 > (_s) {}

      inline TrainCameraSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ECctvCamera, 4, 4 > (_max) {}
      inline TrainCameraSequence(_CORBA_ULong _max, _CORBA_ULong _len, ECctvCamera* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ECctvCamera, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline TrainCameraSequence& operator = (const TrainCameraSequence& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ECctvCamera, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class TrainCameraSequence_out;

    class TrainCameraSequence_var {
    public:
      inline TrainCameraSequence_var() : _pd_seq(0) {}
      inline TrainCameraSequence_var(TrainCameraSequence* _s) : _pd_seq(_s) {}
      inline TrainCameraSequence_var(const TrainCameraSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new TrainCameraSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~TrainCameraSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline TrainCameraSequence_var& operator = (TrainCameraSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline TrainCameraSequence_var& operator = (const TrainCameraSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new TrainCameraSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ECctvCamera& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline TrainCameraSequence* operator -> () { return _pd_seq; }
      inline const TrainCameraSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator TrainCameraSequence& () const { return *_pd_seq; }
#else
      inline operator const TrainCameraSequence& () const { return *_pd_seq; }
      inline operator TrainCameraSequence& () { return *_pd_seq; }
#endif
        
      inline const TrainCameraSequence& in() const { return *_pd_seq; }
      inline TrainCameraSequence&       inout()    { return *_pd_seq; }
      inline TrainCameraSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline TrainCameraSequence* _retn() { TrainCameraSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class TrainCameraSequence_out;
      
    private:
      TrainCameraSequence* _pd_seq;
    };

    class TrainCameraSequence_out {
    public:
      inline TrainCameraSequence_out(TrainCameraSequence*& _s) : _data(_s) { _data = 0; }
      inline TrainCameraSequence_out(TrainCameraSequence_var& _s)
        : _data(_s._pd_seq) { _s = (TrainCameraSequence*) 0; }
      inline TrainCameraSequence_out(const TrainCameraSequence_out& _s) : _data(_s._data) {}
      inline TrainCameraSequence_out& operator = (const TrainCameraSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline TrainCameraSequence_out& operator = (TrainCameraSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator TrainCameraSequence*&()  { return _data; }
      inline TrainCameraSequence*& ptr()       { return _data; }
      inline TrainCameraSequence* operator->() { return _data; }

      inline ECctvCamera& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      TrainCameraSequence*& _data;

    private:
      TrainCameraSequence_out();
      TrainCameraSequence_out& operator=(const TrainCameraSequence_var&);
    };

  
  };

  class _objref_ITrainCctvCorba :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::UShort getFlexibleTimeOutValue();
    void setCarrierOn(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId);
    void setCarrierOnDelocalisedTrain(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::CORBA::ULong trainLocation, const char* sessionId);
    void setCarrierOff(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId);
    void setSingleScreen(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera camera, const char* sessionId);
    void setQuadScreen(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraW, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraX, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraY, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraZ, const char* sessionId);
    void setSequence(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber sequenceNo, ::TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode sequenceMode, const char* sessionId);
    void addAlarmImage(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const ::TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence& cameraIds, const char* sessionId);
    void addAlarmImageDelocalisedTrain(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const ::TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence& cameraIds, ::CORBA::ULong trainLocation, const char* sessionId);
    void removeAlarmImage(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraId, const char* sessionId);
    ITrainCctvCorba::CctvSwitchState getActiveTrainForStage(::CORBA::ULong stageID);
    ITrainCctvCorba::CctvSwitchState getCctvState(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId);

    inline _objref_ITrainCctvCorba()  { _PR_setobj(0); }  // nil
    _objref_ITrainCctvCorba(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ITrainCctvCorba();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ITrainCctvCorba(const _objref_ITrainCctvCorba&);
    _objref_ITrainCctvCorba& operator = (const _objref_ITrainCctvCorba&);
    // not implemented

    friend class ITrainCctvCorba;
  };

  class _pof_ITrainCctvCorba : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ITrainCctvCorba() : _OMNI_NS(proxyObjectFactory)(ITrainCctvCorba::_PD_repoId) {}
    virtual ~_pof_ITrainCctvCorba();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ITrainCctvCorba :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ITrainCctvCorba();

    virtual ::CORBA::UShort getFlexibleTimeOutValue() = 0;
    virtual void setCarrierOn(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId) = 0;
    virtual void setCarrierOnDelocalisedTrain(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::CORBA::ULong trainLocation, const char* sessionId) = 0;
    virtual void setCarrierOff(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId) = 0;
    virtual void setSingleScreen(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera camera, const char* sessionId) = 0;
    virtual void setQuadScreen(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraW, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraX, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraY, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraZ, const char* sessionId) = 0;
    virtual void setSequence(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber sequenceNo, ::TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode sequenceMode, const char* sessionId) = 0;
    virtual void addAlarmImage(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const ::TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence& cameraIds, const char* sessionId) = 0;
    virtual void addAlarmImageDelocalisedTrain(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const ::TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence& cameraIds, ::CORBA::ULong trainLocation, const char* sessionId) = 0;
    virtual void removeAlarmImage(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainCctvCorba::ECctvCamera cameraId, const char* sessionId) = 0;
    virtual ITrainCctvCorba::CctvSwitchState getActiveTrainForStage(::CORBA::ULong stageID) = 0;
    virtual ITrainCctvCorba::CctvSwitchState getCctvState(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ITrainCctvCorba;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class ITrainCctvCorba :
    public virtual TA_Base_Bus::_impl_ITrainCctvCorba,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ITrainCctvCorba();

    inline ::TA_Base_Bus::ITrainCctvCorba_ptr _this() {
      return (::TA_Base_Bus::ITrainCctvCorba_ptr) _do_this(::TA_Base_Bus::ITrainCctvCorba::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::ITrainCctvCorba::ECctvSwitchMode _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainCctvCorba::ECctvSwitchMode& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainCctvCorba::CctvQuad) {
    _e = (TA_Base_Bus::ITrainCctvCorba::ECctvSwitchMode) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvSwitchMode _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvSwitchMode& _s);

inline void operator >>=(TA_Base_Bus::ITrainCctvCorba::ECctvCamera _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainCctvCorba::ECctvCamera& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainCctvCorba::CameraEight) {
    _e = (TA_Base_Bus::ITrainCctvCorba::ECctvCamera) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvCamera _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvCamera& _s);

inline void operator >>=(TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainCctvCorba::SequenceSix) {
    _e = (TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvSequenceNumber& _s);

inline void operator >>=(TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainCctvCorba::SequenceSkip) {
    _e = (TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::ECctvSequenceMode& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainCctvCorba::CctvSwitchState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::CctvSwitchState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::CctvSwitchState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainCctvCorba::CctvSwitchState*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainCctvCorba::TrainCameraSequence*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainCctvCorba_ptr& _s);



inline void
TA_Base_Bus::ITrainCctvCorba::_marshalObjRef(::TA_Base_Bus::ITrainCctvCorba_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainCctvCorba
#endif

#endif  // __ITrainCctvCorba_hh__

