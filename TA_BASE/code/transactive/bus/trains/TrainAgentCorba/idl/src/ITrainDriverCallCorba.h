// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ITrainDriverCallCorba_hh__
#define __ITrainDriverCallCorba_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
#endif



#ifndef __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#define __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#include <ITrainCommonCorba.h>
#endif
#ifndef __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#define __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#include <ITrainExceptionsCorba.h>
#endif
#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __IRadioSessionCorbaDef_hh_EXTERNAL_GUARD__
#define __IRadioSessionCorbaDef_hh_EXTERNAL_GUARD__
#include <IRadioSessionCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mITrainDriverCallCorba__
#define __TA__Base__Bus_mITrainDriverCallCorba__

  class ITrainDriverCallCorba;
  class _objref_ITrainDriverCallCorba;
  class _impl_ITrainDriverCallCorba;
  
  typedef _objref_ITrainDriverCallCorba* ITrainDriverCallCorba_ptr;
  typedef ITrainDriverCallCorba_ptr ITrainDriverCallCorbaRef;

  class ITrainDriverCallCorba_Helper {
  public:
    typedef ITrainDriverCallCorba_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ITrainDriverCallCorba, ITrainDriverCallCorba_Helper> ITrainDriverCallCorba_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ITrainDriverCallCorba,ITrainDriverCallCorba_Helper > ITrainDriverCallCorba_out;

#endif

  // interface ITrainDriverCallCorba
  class ITrainDriverCallCorba {
  public:
    // Declarations for this interface type.
    typedef ITrainDriverCallCorba_ptr _ptr_type;
    typedef ITrainDriverCallCorba_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct OccCallRequest {
      typedef _CORBA_ConstrType_Fix_Var<OccCallRequest> _var_type;

      
      ITrainCommonCorba::TrainId trainId;

      ::CORBA::Long timestamp;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef OccCallRequest::_var_type OccCallRequest_var;

    typedef OccCallRequest& OccCallRequest_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_OccCallRequest;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_OccCallRequestList;

    class OccCallRequestList_var;

    class OccCallRequestList : public _CORBA_Unbounded_Sequence< OccCallRequest >  {
    public:
      typedef OccCallRequestList_var _var_type;
      inline OccCallRequestList() {}
      inline OccCallRequestList(const OccCallRequestList& _s)
        : _CORBA_Unbounded_Sequence< OccCallRequest > (_s) {}

      inline OccCallRequestList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< OccCallRequest > (_max) {}
      inline OccCallRequestList(_CORBA_ULong _max, _CORBA_ULong _len, OccCallRequest* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< OccCallRequest > (_max, _len, _val, _rel) {}

    

      inline OccCallRequestList& operator = (const OccCallRequestList& _s) {
        _CORBA_Unbounded_Sequence< OccCallRequest > ::operator=(_s);
        return *this;
      }
    };

    class OccCallRequestList_out;

    class OccCallRequestList_var {
    public:
      inline OccCallRequestList_var() : _pd_seq(0) {}
      inline OccCallRequestList_var(OccCallRequestList* _s) : _pd_seq(_s) {}
      inline OccCallRequestList_var(const OccCallRequestList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new OccCallRequestList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~OccCallRequestList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline OccCallRequestList_var& operator = (OccCallRequestList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline OccCallRequestList_var& operator = (const OccCallRequestList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new OccCallRequestList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline OccCallRequest& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline OccCallRequestList* operator -> () { return _pd_seq; }
      inline const OccCallRequestList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator OccCallRequestList& () const { return *_pd_seq; }
#else
      inline operator const OccCallRequestList& () const { return *_pd_seq; }
      inline operator OccCallRequestList& () { return *_pd_seq; }
#endif
        
      inline const OccCallRequestList& in() const { return *_pd_seq; }
      inline OccCallRequestList&       inout()    { return *_pd_seq; }
      inline OccCallRequestList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline OccCallRequestList* _retn() { OccCallRequestList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class OccCallRequestList_out;
      
    private:
      OccCallRequestList* _pd_seq;
    };

    class OccCallRequestList_out {
    public:
      inline OccCallRequestList_out(OccCallRequestList*& _s) : _data(_s) { _data = 0; }
      inline OccCallRequestList_out(OccCallRequestList_var& _s)
        : _data(_s._pd_seq) { _s = (OccCallRequestList*) 0; }
      inline OccCallRequestList_out(const OccCallRequestList_out& _s) : _data(_s._data) {}
      inline OccCallRequestList_out& operator = (const OccCallRequestList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline OccCallRequestList_out& operator = (OccCallRequestList* _s) {
        _data = _s;
        return *this;
      }
      inline operator OccCallRequestList*&()  { return _data; }
      inline OccCallRequestList*& ptr()       { return _data; }
      inline OccCallRequestList* operator->() { return _data; }

      inline OccCallRequest& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      OccCallRequestList*& _data;

    private:
      OccCallRequestList_out();
      OccCallRequestList_out& operator=(const OccCallRequestList_var&);
    };

    struct OccCallReset {
      typedef _CORBA_ConstrType_Fix_Var<OccCallReset> _var_type;

      
      ITrainCommonCorba::TrainId trainId;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef OccCallReset::_var_type OccCallReset_var;

    typedef OccCallReset& OccCallReset_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_OccCallReset;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ItsiList;

    class ItsiList_var;

    class ItsiList : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef ItsiList_var _var_type;
      inline ItsiList() {}
      inline ItsiList(const ItsiList& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline ItsiList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline ItsiList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline ItsiList& operator = (const ItsiList& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class ItsiList_out;

    class ItsiList_var {
    public:
      inline ItsiList_var() : _pd_seq(0) {}
      inline ItsiList_var(ItsiList* _s) : _pd_seq(_s) {}
      inline ItsiList_var(const ItsiList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new ItsiList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~ItsiList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline ItsiList_var& operator = (ItsiList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ItsiList_var& operator = (const ItsiList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new ItsiList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ItsiList* operator -> () { return _pd_seq; }
      inline const ItsiList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ItsiList& () const { return *_pd_seq; }
#else
      inline operator const ItsiList& () const { return *_pd_seq; }
      inline operator ItsiList& () { return *_pd_seq; }
#endif
        
      inline const ItsiList& in() const { return *_pd_seq; }
      inline ItsiList&       inout()    { return *_pd_seq; }
      inline ItsiList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ItsiList* _retn() { ItsiList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ItsiList_out;
      
    private:
      ItsiList* _pd_seq;
    };

    class ItsiList_out {
    public:
      inline ItsiList_out(ItsiList*& _s) : _data(_s) { _data = 0; }
      inline ItsiList_out(ItsiList_var& _s)
        : _data(_s._pd_seq) { _s = (ItsiList*) 0; }
      inline ItsiList_out(const ItsiList_out& _s) : _data(_s._data) {}
      inline ItsiList_out& operator = (const ItsiList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ItsiList_out& operator = (ItsiList* _s) {
        _data = _s;
        return *this;
      }
      inline operator ItsiList*&()  { return _data; }
      inline ItsiList*& ptr()       { return _data; }
      inline ItsiList* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ItsiList*& _data;

    private:
      ItsiList_out();
      ItsiList_out& operator=(const ItsiList_var&);
    };

    enum EVoiceCallResult { CallTrainProceeding, CallTrainAudioRouteInUse, CallTrainAudioRouteInUseOptionToOverride, CallTrainReset, BadCommandBadChecksum, BadCommandUnknownCommand, BadCommandBadParameter, BadCommandUnexpectedCommand, InvalidTrainError, TransmissionFailureError, TransactionTimeoutError, TransactionCancelledError, MpuChangeoverError /*, __max_EVoiceCallResult=0xffffffff */ };
    typedef EVoiceCallResult& EVoiceCallResult_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EVoiceCallResult;

    struct VoiceCallResponse {
      typedef _CORBA_ConstrType_Variable_Var<VoiceCallResponse> _var_type;

      
      ITrainCommonCorba::TrainId trainId;

      EVoiceCallResult result;

      ::CORBA::String_member details;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef VoiceCallResponse::_var_type VoiceCallResponse_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< VoiceCallResponse,VoiceCallResponse_var > VoiceCallResponse_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_VoiceCallResponse;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_VoiceCallResponseList;

    class VoiceCallResponseList_var;

    class VoiceCallResponseList : public _CORBA_Unbounded_Sequence< VoiceCallResponse >  {
    public:
      typedef VoiceCallResponseList_var _var_type;
      inline VoiceCallResponseList() {}
      inline VoiceCallResponseList(const VoiceCallResponseList& _s)
        : _CORBA_Unbounded_Sequence< VoiceCallResponse > (_s) {}

      inline VoiceCallResponseList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< VoiceCallResponse > (_max) {}
      inline VoiceCallResponseList(_CORBA_ULong _max, _CORBA_ULong _len, VoiceCallResponse* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< VoiceCallResponse > (_max, _len, _val, _rel) {}

    

      inline VoiceCallResponseList& operator = (const VoiceCallResponseList& _s) {
        _CORBA_Unbounded_Sequence< VoiceCallResponse > ::operator=(_s);
        return *this;
      }
    };

    class VoiceCallResponseList_out;

    class VoiceCallResponseList_var {
    public:
      inline VoiceCallResponseList_var() : _pd_seq(0) {}
      inline VoiceCallResponseList_var(VoiceCallResponseList* _s) : _pd_seq(_s) {}
      inline VoiceCallResponseList_var(const VoiceCallResponseList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new VoiceCallResponseList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~VoiceCallResponseList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline VoiceCallResponseList_var& operator = (VoiceCallResponseList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline VoiceCallResponseList_var& operator = (const VoiceCallResponseList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new VoiceCallResponseList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline VoiceCallResponse& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline VoiceCallResponseList* operator -> () { return _pd_seq; }
      inline const VoiceCallResponseList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator VoiceCallResponseList& () const { return *_pd_seq; }
#else
      inline operator const VoiceCallResponseList& () const { return *_pd_seq; }
      inline operator VoiceCallResponseList& () { return *_pd_seq; }
#endif
        
      inline const VoiceCallResponseList& in() const { return *_pd_seq; }
      inline VoiceCallResponseList&       inout()    { return *_pd_seq; }
      inline VoiceCallResponseList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline VoiceCallResponseList* _retn() { VoiceCallResponseList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class VoiceCallResponseList_out;
      
    private:
      VoiceCallResponseList* _pd_seq;
    };

    class VoiceCallResponseList_out {
    public:
      inline VoiceCallResponseList_out(VoiceCallResponseList*& _s) : _data(_s) { _data = 0; }
      inline VoiceCallResponseList_out(VoiceCallResponseList_var& _s)
        : _data(_s._pd_seq) { _s = (VoiceCallResponseList*) 0; }
      inline VoiceCallResponseList_out(const VoiceCallResponseList_out& _s) : _data(_s._data) {}
      inline VoiceCallResponseList_out& operator = (const VoiceCallResponseList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline VoiceCallResponseList_out& operator = (VoiceCallResponseList* _s) {
        _data = _s;
        return *this;
      }
      inline operator VoiceCallResponseList*&()  { return _data; }
      inline VoiceCallResponseList*& ptr()       { return _data; }
      inline VoiceCallResponseList* operator->() { return _data; }

      inline VoiceCallResponse& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      VoiceCallResponseList*& _data;

    private:
      VoiceCallResponseList_out();
      VoiceCallResponseList_out& operator=(const VoiceCallResponseList_var&);
    };

    struct DriverCallResult {
      typedef _CORBA_ConstrType_Variable_Var<DriverCallResult> _var_type;

      
      ::CORBA::ULong consoleId;

      ::CORBA::ULong callId;

      VoiceCallResponseList resultList;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef DriverCallResult::_var_type DriverCallResult_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< DriverCallResult,DriverCallResult_var > DriverCallResult_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DriverCallResult;

  
  };

  class _objref_ITrainDriverCallCorba :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::UShort getFlexibleTimeOutValue();
    ITrainDriverCallCorba::OccCallRequestList* getAllOccCallRequests();
    void answerOccCallRequest(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId);
    ITrainDriverCallCorba::DriverCallResult* makeDgnaDriverCall(const ::TA_Base_Bus::ITrainCommonCorba::TrainList& trainList, const ::TA_Base_Bus::ITrainDriverCallCorba::ItsiList& individualSubscribers, ::CORBA::Boolean override, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallType callType, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallPriority callPriority, const char* sessionId);
    ITrainDriverCallCorba::DriverCallResult* makeStaticGroupDriverCall(const ::TA_Base_Bus::ITrainCommonCorba::TrainList& trainList, const char* groupTsi, ::CORBA::Boolean override, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallType callType, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallPriority callPriority, const char* sessionId);

    inline _objref_ITrainDriverCallCorba()  { _PR_setobj(0); }  // nil
    _objref_ITrainDriverCallCorba(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ITrainDriverCallCorba();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ITrainDriverCallCorba(const _objref_ITrainDriverCallCorba&);
    _objref_ITrainDriverCallCorba& operator = (const _objref_ITrainDriverCallCorba&);
    // not implemented

    friend class ITrainDriverCallCorba;
  };

  class _pof_ITrainDriverCallCorba : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ITrainDriverCallCorba() : _OMNI_NS(proxyObjectFactory)(ITrainDriverCallCorba::_PD_repoId) {}
    virtual ~_pof_ITrainDriverCallCorba();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ITrainDriverCallCorba :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ITrainDriverCallCorba();

    virtual ::CORBA::UShort getFlexibleTimeOutValue() = 0;
    virtual ITrainDriverCallCorba::OccCallRequestList* getAllOccCallRequests() = 0;
    virtual void answerOccCallRequest(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId) = 0;
    virtual ITrainDriverCallCorba::DriverCallResult* makeDgnaDriverCall(const ::TA_Base_Bus::ITrainCommonCorba::TrainList& trainList, const ::TA_Base_Bus::ITrainDriverCallCorba::ItsiList& individualSubscribers, ::CORBA::Boolean override, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallType callType, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallPriority callPriority, const char* sessionId) = 0;
    virtual ITrainDriverCallCorba::DriverCallResult* makeStaticGroupDriverCall(const ::TA_Base_Bus::ITrainCommonCorba::TrainList& trainList, const char* groupTsi, ::CORBA::Boolean override, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallType callType, ::TA_Base_Bus::IRadioSessionCorbaDef::ECallPriority callPriority, const char* sessionId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ITrainDriverCallCorba;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class ITrainDriverCallCorba :
    public virtual TA_Base_Bus::_impl_ITrainDriverCallCorba,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ITrainDriverCallCorba();

    inline ::TA_Base_Bus::ITrainDriverCallCorba_ptr _this() {
      return (::TA_Base_Bus::ITrainDriverCallCorba_ptr) _do_this(::TA_Base_Bus::ITrainDriverCallCorba::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::OccCallRequest& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::OccCallRequest* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::OccCallRequest*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::OccCallRequest*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::OccCallRequestList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::OccCallRequestList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::OccCallRequestList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::OccCallRequestList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::OccCallReset& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::OccCallReset* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::OccCallReset*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::OccCallReset*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::ItsiList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::ItsiList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::ItsiList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::ItsiList*& _sp);

inline void operator >>=(TA_Base_Bus::ITrainDriverCallCorba::EVoiceCallResult _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainDriverCallCorba::EVoiceCallResult& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainDriverCallCorba::MpuChangeoverError) {
    _e = (TA_Base_Bus::ITrainDriverCallCorba::EVoiceCallResult) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::EVoiceCallResult _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::EVoiceCallResult& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponse& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponse* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponse*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponse*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponseList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponseList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponseList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::VoiceCallResponseList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::DriverCallResult& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::DriverCallResult* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba::DriverCallResult*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainDriverCallCorba::DriverCallResult*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainDriverCallCorba_ptr& _s);



inline void
TA_Base_Bus::ITrainDriverCallCorba::_marshalObjRef(::TA_Base_Bus::ITrainDriverCallCorba_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainDriverCallCorba
#endif

#endif  // __ITrainDriverCallCorba_hh__

