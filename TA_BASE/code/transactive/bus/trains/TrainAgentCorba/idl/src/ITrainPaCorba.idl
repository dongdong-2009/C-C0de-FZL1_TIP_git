/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $Source$
  * @author:  Robert van Hugten
  * @version: $Revision$
  *
  * Last modification: $Date$
  * Last modified by:  $Author$
  *
  */

#if !#define(ITrainPaCorba_Idl)
#define ITrainPaCorba_Idl

#include "bus/trains/TrainAgentCorba/idl/src/ITrainCommonCorba.idl"
#include "bus/trains/TrainAgentCorba/idl/src/ITrainExceptionsCorba.idl"
#include "core/exceptions/IDL/src/CommonExceptionsCorbaDef.idl"

module TA_Base_Bus
{
    /**
     * Interface for commands used by Trainborne PA operations
     * @author Robert van Hugten
     * @version 1.0
     * @created 13-Nov-2007 3:49:42 PM
     */
    interface ITrainPaCorba
    {
        /**
         * For PA version info. This must be sent system wide - a broadcast message.
         * @author Robert van Hugten
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        struct TrainLibraryInfo
        {
            ITrainCommonCorba::TrainId trainId;
            unsigned short libraryVersion;
        };

        /**
         * @author Robert van Hugten
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        typedef sequence<TrainLibraryInfo> TrainLibraryInfoList;

        /**
         * @author Robert V
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        typedef octet AnnouncementId
        ;

        /**
         * @author Robert van Hugten
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        struct MessageSchedule
        {
            // The period for message repetition (message is repeated every 'period' seconds)
            unsigned short period;
            // The duration for message play (message is repeated every 'period' seconds for
            // 'duration' seconds)
            unsigned short duration;
        };

        /**
         * @author Robert van Hugten
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        enum EPaUpdateType
        {
            // This is the result of a PA command sent to the train.
            // See the commandResult field for futher status
            PaCommandResult,
            // The announcement has been reset by the train
            AnnouncementReset,
            // A pre-recorded or cyclic announcement message has completed
            // See the completionStatus field for the completion result
            CompletedAnnouncement,
            // The train in the live announcement is ready for the audio connection (The begin
            // operation)
            LiveAnnouncementReady,
            // The live announcement requires a PA continue or the audio will be dropped
            LiveAnnouncementContinueRequired,
            // Occurs when a continue request is not received for a train during a live
            // announcement.
            // This can indicate the train communication has been lost
            LiveAnnouncementContinueTimeout
        };

        /**
         * This is used to convey the result of a train command asynchronously.
         * It indicates success or failure, and if failure the error type.
         * @author Adam Radics
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        enum EPaCommandResult
        {
            PaProceeding,
            PaInUse,
            PaInUseOptionToOverride,
            PaInUseFirstCycleCancelled,
            PaReset,
            PaFailed,
            PaDifferentOrigin,
            PaDifferentId,
            PaDifferentVersion,
            // A bad command response was received, with a bad checksum error.
            BadCommandBadChecksum,
            // A bad command response was received, with an unknown command error.
            BadCommandUnknownCommand,
            // A bad command response was received, with a bad parameter error.
            BadCommandBadParameter,
            // A bad command response was received, with an unexpected command error.
            BadCommandUnexpectedCommand,
            InvalidTrainError,
            TransmissionFailureError,
            TransactionTimeoutError,
            TransactionCancelledError,
            MpuChangeoverError
        };

        /**
         * This is the status of a cyclic or prerecorded message completion
         * @author adamr
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        enum EMessageCompletionStatus
        {
            Successful,
            InterruptedByOcc,
            InterruptedByPsc,
            InterruptedByDriver
        };

        /**
         * *** PA Notifications
         * @author Robert van Hugten
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        struct PaUpdateEvent
        {
            // The train this update is for
            ITrainCommonCorba::TrainId trainId;
            // The announcement ID this update is for
            AnnouncementId annId;
            // The session ID that is responsible for this announcement
            string sessionId;
            EPaUpdateType updateType;
            // This is the result of the PA command
            EPaCommandResult commandResult;
            // This is the result of the cyclic or pre recorded message completion
            EMessageCompletionStatus completionStatus;
        };

        /**
         * Applies to a global PA Live announcement, rather than a train by train basis
         * @author Robert van Hugten
         * @version 1.0
         * @created 13-Nov-2007 3:49:42 PM
         */
        enum EPaAnnouncementUpdateType
        {
            AudioCallLost
        };

        /**
         * This is an update for a live announcement as a whole.
         * It applies to all trains within the given announcement,
         * rather than a single train in a single announcement.
         * @author Robert van Hugten
         * @version 1.0
         * @created 18-Mar-2008 3:18:08 PM
         */
        struct PaAnnouncementUpdate
        {
            // The announcement ID this update is for
            AnnouncementId annId;
            // The type of the update - the event that occurred.
            EPaAnnouncementUpdateType updateType;
        };

        /**
         * Used to check the longest possible time a PA operation can take
         */
        unsigned short getCommandTimeout()
        	raises (TA_Base_Core::OperationModeException);

        /**
         * Gets the PA library version on this train.
         * 
         * @return the PA library version for the given train
         * 
         * @exception ITrainExceptionsCorba::InvalidTrainException if the train ID given is not known or not valid for this operation
         * 
         * @param trainId    The train ID to query
         */
        unsigned short getTrainPaLibraryVersion(in ITrainCommonCorba::TrainId trainId)
			raises (TA_Base_Core::OperationModeException);//limin

        /**
         * Gets the PA library version for all known trains
         * 
         * @return the PA library version for all trains
         */
        TrainLibraryInfoList getTrainPaLibraryVersionList()
			raises (TA_Base_Core::OperationModeException);//limin

        /**
         * This will broadcast a PA pre-recorded announcement on each given train.
         * 
         * It will send the command to all trains in parallel.
         * Once the commands have been spawned, this method will return, the result of each
         * command on each train will be returned asynchronously using a PA Update Event.
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * 
         * @param trainIdList    The trains included in the announcement
         * @param announcementId    The ID of the announcement for tracking purposes
         * @param messageNumber    This is the message number to boradcast. (Table offset)
         * @param libraryVersion    This is the library version used to choose the message number.
         *                          If different from the version on the train the boradcast will not be done.
         * @param override    Whether to set the override flag, or leave this as a normal request
         * @param sessionId    The operator submitting the broadcast
         */
        void preRecordedAnnouncement(in ITrainCommonCorba::TrainList trainIdList,
									 in AnnouncementId annId, 
									 in octet messageNumber, 
									 in unsigned short libraryVersion, 
									 in boolean override, 
									 in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
					TA_Base_Core::AccessDeniedException,
					ITrainExceptionsCorba::InvalidParameterException);

        /**
         * This will broadcast a cyclic PA pre-recorded announcement on each given train.
         * 
         * It will send the command to all trains in parallel.
         * Once the commands have been spawned, this method will return,
         * the result of each command on each train will be returned asynchronously using a PA Update Event.
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * 
         * @param trainIdList    The trains included in the announcement
         * @param announcementId    The ID of the announcement for tracking purposes
         * @param messageNumber    This is the message number to boradcast. (Table offset)
         * @param libraryVersion    This is the library version used to choose the message number.
         *                          If different from the version on the train the boradcast will not be done.
         * @param announcementPeriod    This is the time parameters to broadcast the message
         * @param override    Whether to set the override flag, or leave this as a normal request
         * @param sessionId    The operator submitting the broadcast
         */
        void cyclicAnnouncement(in ITrainCommonCorba::TrainList trainIdList,
								in AnnouncementId annId,
								in octet messageNumber, 
								in unsigned short libraryVersion, 
								in MessageSchedule announcementPeriod, 
								in boolean override, 
								in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
                 TA_Base_Core::AccessDeniedException,
                 ITrainExceptionsCorba::InvalidParameterException);

        /**
         * This will start the live announcement set up process on each train.
         * This will spawn off the commands to each train, and return to the caller once this is done.
         * The status of the command will be sent back using a PA Update Event.
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * @exception ITrainExceptionsCorba::GroupInUseException if the given group TSI is in use
         * 
         * @param trainIdList    The trains included in the announcement
         * @param announcementId    The ID of the announcement for tracking purposes
         * @param override    Whether to set the override flag, or leave this as a normal request
         * @param staticGroup    The optional group TSI to use to call the trains for the live announcement.
         *                       Empty string for a single train announcement, or for a DGNA. If this is set for a single train, it will be ignored.
         * @param sessionId    The operator submitting the broadcast
         */
        void setupLiveAnnouncement(	in ITrainCommonCorba::TrainList trainIdList, 
									in AnnouncementId annId, 
									in boolean override, 
									in string staticGroup, 
									in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
					TA_Base_Core::AccessDeniedException,
					ITrainExceptionsCorba::InvalidParameterException,
					ITrainExceptionsCorba::GroupInUseException);

        /**
         * For a given live announcement in progress, when an audio call hasnt been made,
         * this will make the audio call for the live announcement.
         * 
         * Depending on the number of trains involved, and whether a static talkgroup was chosen,
         * this will either simply call an individual TSI, a static talkgroup, or make a DGNA then call the DGNA.
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * @exception ITrainExceptionsCorba::TrainRadioException if a radio operation failed
         * 
         * @param announcementId    The ID of the announcement to begin
         * @param sessionId    The operator making the broadcast
         */
        void beginLiveAnnouncement(in AnnouncementId annId, 
								   in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
					TA_Base_Core::AccessDeniedException,
					ITrainExceptionsCorba::InvalidParameterException,
					ITrainExceptionsCorba::TrainRadioException);

        /**
         * For a given live announcement in progress, send a PA continue to all trains requiring it.
         * 
         * Called when the "Continue" button is pressed by an operator for a PA Live announcement
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * 
         * @param announcementId    The ID of the live announcement to continue
         * @param sessionId    The operator making the broadcast
         */
        void continueLiveAnnouncement(in AnnouncementId annId, in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
					TA_Base_Core::AccessDeniedException,
					ITrainExceptionsCorba::InvalidParameterException);

        /**
         * This ends a live announcment in progress.
         * It will end any audio in progress for the announcement, and reset the announcement on each train.
         * 
         * This will return once the command is spawned on each train, and status updates will be sent via PA Update Event.
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * 
         * @param announcementId    The ID of the live announcement to end
         * @param sessionId    The operator making the broadcast
         */
        void endLiveAnnouncement(in AnnouncementId annId, 
								 in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
					TA_Base_Core::AccessDeniedException,
					ITrainExceptionsCorba::InvalidParameterException);

        /**
         * This ends any ongoing DVA or cyclic DVA boradcast on the train.
         * This is not used for live announcements.
         * The result will be sent back by a PA Update Event.
         * 
         * @exception TA_Base_Core::OperationModeException If the agent is not in the control state
         * @exception TA_Base_Core::AccessDeniedException If the operator does not have the correct rights or duty to perform this operation
         * @exception ITrainExceptionsCorba::InvalidParameterException if one of the options given for the operation is erroneous
         * 
         * @param trainIdList    The trains to end this announcement on
         * @param announcementId    The ID of the announcement to end
         * @param sessionId    The operator ending the broadcast
         */
        void endBroadcast(in ITrainCommonCorba::TrainList trainIdList,
						  in AnnouncementId annId,
						  in string sessionId)
        	raises (TA_Base_Core::OperationModeException,
					TA_Base_Core::AccessDeniedException,
					ITrainExceptionsCorba::InvalidParameterException);

    };

};

#endif
