// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ITrainPecCorba_hh__
#define __ITrainPecCorba_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#define __ITrainCommonCorba_hh_EXTERNAL_GUARD__
#include <ITrainCommonCorba.h>
#endif
#ifndef __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#define __ITrainExceptionsCorba_hh_EXTERNAL_GUARD__
#include <ITrainExceptionsCorba.h>
#endif
#ifndef __ITrainCctvCorba_hh_EXTERNAL_GUARD__
#define __ITrainCctvCorba_hh_EXTERNAL_GUARD__
#include <ITrainCctvCorba.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mITrainPecCorba__
#define __TA__Base__Bus_mITrainPecCorba__

  class ITrainPecCorba;
  class _objref_ITrainPecCorba;
  class _impl_ITrainPecCorba;
  
  typedef _objref_ITrainPecCorba* ITrainPecCorba_ptr;
  typedef ITrainPecCorba_ptr ITrainPecCorbaRef;

  class ITrainPecCorba_Helper {
  public:
    typedef ITrainPecCorba_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ITrainPecCorba, ITrainPecCorba_Helper> ITrainPecCorba_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ITrainPecCorba,ITrainPecCorba_Helper > ITrainPecCorba_out;

#endif

  // interface ITrainPecCorba
  class ITrainPecCorba {
  public:
    // Declarations for this interface type.
    typedef ITrainPecCorba_ptr _ptr_type;
    typedef ITrainPecCorba_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum EPecNumber { AllPec, PecOne, PecTwo, PecThree, PecFour /*, __max_EPecNumber=0xffffffff */ };
    typedef EPecNumber& EPecNumber_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPecNumber;

    enum EPecCarNumber { AllCars, CarOne, CarTwo, CarThree /*, __max_EPecCarNumber=0xffffffff */ };
    typedef EPecCarNumber& EPecCarNumber_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPecCarNumber;

    enum EPecUpdateType { PECUpdated, PECReset, PECMpuChangeover, PECCallLost /*, __max_EPecUpdateType=0xffffffff */ };
    typedef EPecUpdateType& EPecUpdateType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPecUpdateType;

    enum EPecSource { PecSourceUnassigned, PecSourceDriver, PecSourceOperator /*, __max_EPecSource=0xffffffff */ };
    typedef EPecSource& EPecSource_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPecSource;

    struct PecPoint {
      typedef _CORBA_ConstrType_Fix_Var<PecPoint> _var_type;

      
      EPecCarNumber car;

      EPecNumber pec;

      EPecSource source;

      ::CORBA::Boolean valid;

      ::CORBA::Long creationTime;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef PecPoint::_var_type PecPoint_var;

    typedef PecPoint& PecPoint_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PecPoint;

    struct PecUpdate {
      typedef _CORBA_ConstrType_Variable_Var<PecUpdate> _var_type;

      
      ITrainCommonCorba::TrainId trainId;

      EPecUpdateType updateType;

      PecPoint pec;

      ::CORBA::String_member sessionId;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef PecUpdate::_var_type PecUpdate_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< PecUpdate,PecUpdate_var > PecUpdate_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PecUpdate;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PecUpdateList;

    class PecUpdateList_var;

    class PecUpdateList : public _CORBA_Unbounded_Sequence< PecUpdate >  {
    public:
      typedef PecUpdateList_var _var_type;
      inline PecUpdateList() {}
      inline PecUpdateList(const PecUpdateList& _s)
        : _CORBA_Unbounded_Sequence< PecUpdate > (_s) {}

      inline PecUpdateList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< PecUpdate > (_max) {}
      inline PecUpdateList(_CORBA_ULong _max, _CORBA_ULong _len, PecUpdate* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< PecUpdate > (_max, _len, _val, _rel) {}

    

      inline PecUpdateList& operator = (const PecUpdateList& _s) {
        _CORBA_Unbounded_Sequence< PecUpdate > ::operator=(_s);
        return *this;
      }
    };

    class PecUpdateList_out;

    class PecUpdateList_var {
    public:
      inline PecUpdateList_var() : _pd_seq(0) {}
      inline PecUpdateList_var(PecUpdateList* _s) : _pd_seq(_s) {}
      inline PecUpdateList_var(const PecUpdateList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PecUpdateList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PecUpdateList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PecUpdateList_var& operator = (PecUpdateList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PecUpdateList_var& operator = (const PecUpdateList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PecUpdateList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline PecUpdate& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PecUpdateList* operator -> () { return _pd_seq; }
      inline const PecUpdateList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PecUpdateList& () const { return *_pd_seq; }
#else
      inline operator const PecUpdateList& () const { return *_pd_seq; }
      inline operator PecUpdateList& () { return *_pd_seq; }
#endif
        
      inline const PecUpdateList& in() const { return *_pd_seq; }
      inline PecUpdateList&       inout()    { return *_pd_seq; }
      inline PecUpdateList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PecUpdateList* _retn() { PecUpdateList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PecUpdateList_out;
      
    private:
      PecUpdateList* _pd_seq;
    };

    class PecUpdateList_out {
    public:
      inline PecUpdateList_out(PecUpdateList*& _s) : _data(_s) { _data = 0; }
      inline PecUpdateList_out(PecUpdateList_var& _s)
        : _data(_s._pd_seq) { _s = (PecUpdateList*) 0; }
      inline PecUpdateList_out(const PecUpdateList_out& _s) : _data(_s._data) {}
      inline PecUpdateList_out& operator = (const PecUpdateList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PecUpdateList_out& operator = (PecUpdateList* _s) {
        _data = _s;
        return *this;
      }
      inline operator PecUpdateList*&()  { return _data; }
      inline PecUpdateList*& ptr()       { return _data; }
      inline PecUpdateList* operator->() { return _data; }

      inline PecUpdate& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PecUpdateList*& _data;

    private:
      PecUpdateList_out();
      PecUpdateList_out& operator=(const PecUpdateList_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PecPointCollection;

    class PecPointCollection_var;

    class PecPointCollection : public _CORBA_Unbounded_Sequence< PecPoint >  {
    public:
      typedef PecPointCollection_var _var_type;
      inline PecPointCollection() {}
      inline PecPointCollection(const PecPointCollection& _s)
        : _CORBA_Unbounded_Sequence< PecPoint > (_s) {}

      inline PecPointCollection(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< PecPoint > (_max) {}
      inline PecPointCollection(_CORBA_ULong _max, _CORBA_ULong _len, PecPoint* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< PecPoint > (_max, _len, _val, _rel) {}

    

      inline PecPointCollection& operator = (const PecPointCollection& _s) {
        _CORBA_Unbounded_Sequence< PecPoint > ::operator=(_s);
        return *this;
      }
    };

    class PecPointCollection_out;

    class PecPointCollection_var {
    public:
      inline PecPointCollection_var() : _pd_seq(0) {}
      inline PecPointCollection_var(PecPointCollection* _s) : _pd_seq(_s) {}
      inline PecPointCollection_var(const PecPointCollection_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PecPointCollection(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PecPointCollection_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PecPointCollection_var& operator = (PecPointCollection* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PecPointCollection_var& operator = (const PecPointCollection_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PecPointCollection;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline PecPoint& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PecPointCollection* operator -> () { return _pd_seq; }
      inline const PecPointCollection* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PecPointCollection& () const { return *_pd_seq; }
#else
      inline operator const PecPointCollection& () const { return *_pd_seq; }
      inline operator PecPointCollection& () { return *_pd_seq; }
#endif
        
      inline const PecPointCollection& in() const { return *_pd_seq; }
      inline PecPointCollection&       inout()    { return *_pd_seq; }
      inline PecPointCollection*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PecPointCollection* _retn() { PecPointCollection* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PecPointCollection_out;
      
    private:
      PecPointCollection* _pd_seq;
    };

    class PecPointCollection_out {
    public:
      inline PecPointCollection_out(PecPointCollection*& _s) : _data(_s) { _data = 0; }
      inline PecPointCollection_out(PecPointCollection_var& _s)
        : _data(_s._pd_seq) { _s = (PecPointCollection*) 0; }
      inline PecPointCollection_out(const PecPointCollection_out& _s) : _data(_s._data) {}
      inline PecPointCollection_out& operator = (const PecPointCollection_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PecPointCollection_out& operator = (PecPointCollection* _s) {
        _data = _s;
        return *this;
      }
      inline operator PecPointCollection*&()  { return _data; }
      inline PecPointCollection*& ptr()       { return _data; }
      inline PecPointCollection* operator->() { return _data; }

      inline PecPoint& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PecPointCollection*& _data;

    private:
      PecPointCollection_out();
      PecPointCollection_out& operator=(const PecPointCollection_var&);
    };

  
  };

  class _objref_ITrainPecCorba :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::UShort getFlexibleTimeOutValue();
    ITrainPecCorba::PecUpdateList* getAllActivePec();
    void answerPec(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, const char* sessionId);
    ITrainCctvCorba::TrainCameraSequence* activatePecCamera(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, const char* sessionId);
    ITrainCctvCorba::TrainCameraSequence* activatePecCameraDelocalisedTrain(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, ::CORBA::ULong trainLocation, const char* sessionId);
    void resetPec(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, const char* sessionId);
    void resetAllPec(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId);

    inline _objref_ITrainPecCorba()  { _PR_setobj(0); }  // nil
    _objref_ITrainPecCorba(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ITrainPecCorba();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ITrainPecCorba(const _objref_ITrainPecCorba&);
    _objref_ITrainPecCorba& operator = (const _objref_ITrainPecCorba&);
    // not implemented

    friend class ITrainPecCorba;
  };

  class _pof_ITrainPecCorba : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ITrainPecCorba() : _OMNI_NS(proxyObjectFactory)(ITrainPecCorba::_PD_repoId) {}
    virtual ~_pof_ITrainPecCorba();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ITrainPecCorba :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ITrainPecCorba();

    virtual ::CORBA::UShort getFlexibleTimeOutValue() = 0;
    virtual ITrainPecCorba::PecUpdateList* getAllActivePec() = 0;
    virtual void answerPec(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, const char* sessionId) = 0;
    virtual ITrainCctvCorba::TrainCameraSequence* activatePecCamera(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, const char* sessionId) = 0;
    virtual ITrainCctvCorba::TrainCameraSequence* activatePecCameraDelocalisedTrain(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, ::CORBA::ULong trainLocation, const char* sessionId) = 0;
    virtual void resetPec(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, ::TA_Base_Bus::ITrainPecCorba::EPecCarNumber car, ::TA_Base_Bus::ITrainPecCorba::EPecNumber pec, const char* sessionId) = 0;
    virtual void resetAllPec(::TA_Base_Bus::ITrainCommonCorba::TrainId trainId, const char* sessionId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ITrainPecCorba;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class ITrainPecCorba :
    public virtual TA_Base_Bus::_impl_ITrainPecCorba,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ITrainPecCorba();

    inline ::TA_Base_Bus::ITrainPecCorba_ptr _this() {
      return (::TA_Base_Bus::ITrainPecCorba_ptr) _do_this(::TA_Base_Bus::ITrainPecCorba::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::ITrainPecCorba::EPecNumber _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainPecCorba::EPecNumber& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainPecCorba::PecFour) {
    _e = (TA_Base_Bus::ITrainPecCorba::EPecNumber) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecNumber _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecNumber& _s);

inline void operator >>=(TA_Base_Bus::ITrainPecCorba::EPecCarNumber _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainPecCorba::EPecCarNumber& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainPecCorba::CarThree) {
    _e = (TA_Base_Bus::ITrainPecCorba::EPecCarNumber) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecCarNumber _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecCarNumber& _s);

inline void operator >>=(TA_Base_Bus::ITrainPecCorba::EPecUpdateType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainPecCorba::EPecUpdateType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainPecCorba::PECCallLost) {
    _e = (TA_Base_Bus::ITrainPecCorba::EPecUpdateType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecUpdateType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecUpdateType& _s);

inline void operator >>=(TA_Base_Bus::ITrainPecCorba::EPecSource _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ITrainPecCorba::EPecSource& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ITrainPecCorba::PecSourceOperator) {
    _e = (TA_Base_Bus::ITrainPecCorba::EPecSource) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecSource _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::EPecSource& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecPoint& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecPoint* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecPoint*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecPoint*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecUpdate& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecUpdate* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecUpdate*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecUpdate*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecUpdateList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecUpdateList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecUpdateList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecUpdateList*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecPointCollection& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecPointCollection* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba::PecPointCollection*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ITrainPecCorba::PecPointCollection*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ITrainPecCorba_ptr& _s);



inline void
TA_Base_Bus::ITrainPecCorba::_marshalObjRef(::TA_Base_Bus::ITrainPecCorba_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ITrainPecCorba
#endif

#endif  // __ITrainPecCorba_hh__

