// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __IRadioSessionCorbaDef_hh__
#define __IRadioSessionCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __IRadioCorbaDef_hh_EXTERNAL_GUARD__
#define __IRadioCorbaDef_hh_EXTERNAL_GUARD__
#include <IRadioCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus_4712

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus__4712_mIRadioSessionCorbaDef__
#define __TA__Base__Bus__4712_mIRadioSessionCorbaDef__

  class IRadioSessionCorbaDef;
  class _objref_IRadioSessionCorbaDef;
  class _impl_IRadioSessionCorbaDef;
  
  typedef _objref_IRadioSessionCorbaDef* IRadioSessionCorbaDef_ptr;
  typedef IRadioSessionCorbaDef_ptr IRadioSessionCorbaDefRef;

  class IRadioSessionCorbaDef_Helper {
  public:
    typedef IRadioSessionCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IRadioSessionCorbaDef, IRadioSessionCorbaDef_Helper> IRadioSessionCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IRadioSessionCorbaDef,IRadioSessionCorbaDef_Helper > IRadioSessionCorbaDef_out;

#endif

  // interface IRadioSessionCorbaDef
  class IRadioSessionCorbaDef {
  public:
    // Declarations for this interface type.
    typedef IRadioSessionCorbaDef_ptr _ptr_type;
    typedef IRadioSessionCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class radioAPIException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline radioAPIException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      radioAPIException(const radioAPIException&);
      radioAPIException(const char* i_what);
      radioAPIException& operator=(const radioAPIException&);
      virtual ~radioAPIException();
      virtual void _raise() const;
      static radioAPIException* _downcast(::CORBA::Exception*);
      static const radioAPIException* _downcast(const ::CORBA::Exception*);
      static inline radioAPIException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_radioAPIException;

    class radioFallbackException : public ::CORBA::UserException {
    public:
      
      

      inline radioFallbackException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      radioFallbackException(const radioFallbackException&);
      
      radioFallbackException& operator=(const radioFallbackException&);
      virtual ~radioFallbackException();
      virtual void _raise() const;
      static radioFallbackException* _downcast(::CORBA::Exception*);
      static const radioFallbackException* _downcast(const ::CORBA::Exception*);
      static inline radioFallbackException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_radioFallbackException;

    class sessionNotInitialiseException : public ::CORBA::UserException {
    public:
      
      

      inline sessionNotInitialiseException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      sessionNotInitialiseException(const sessionNotInitialiseException&);
      
      sessionNotInitialiseException& operator=(const sessionNotInitialiseException&);
      virtual ~sessionNotInitialiseException();
      virtual void _raise() const;
      static sessionNotInitialiseException* _downcast(::CORBA::Exception*);
      static const sessionNotInitialiseException* _downcast(const ::CORBA::Exception*);
      static inline sessionNotInitialiseException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_sessionNotInitialiseException;

    class invalidCallIDException : public ::CORBA::UserException {
    public:
      
      

      inline invalidCallIDException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      invalidCallIDException(const invalidCallIDException&);
      
      invalidCallIDException& operator=(const invalidCallIDException&);
      virtual ~invalidCallIDException();
      virtual void _raise() const;
      static invalidCallIDException* _downcast(::CORBA::Exception*);
      static const invalidCallIDException* _downcast(const ::CORBA::Exception*);
      static inline invalidCallIDException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_invalidCallIDException;

    class invalidRequestException : public ::CORBA::UserException {
    public:
      
      

      inline invalidRequestException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      invalidRequestException(const invalidRequestException&);
      
      invalidRequestException& operator=(const invalidRequestException&);
      virtual ~invalidRequestException();
      virtual void _raise() const;
      static invalidRequestException* _downcast(::CORBA::Exception*);
      static const invalidRequestException* _downcast(const ::CORBA::Exception*);
      static inline invalidRequestException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_invalidRequestException;

    class accessDeniedException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline accessDeniedException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      accessDeniedException(const accessDeniedException&);
      accessDeniedException(const char* i_what);
      accessDeniedException& operator=(const accessDeniedException&);
      virtual ~accessDeniedException();
      virtual void _raise() const;
      static accessDeniedException* _downcast(::CORBA::Exception*);
      static const accessDeniedException* _downcast(const ::CORBA::Exception*);
      static inline accessDeniedException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_accessDeniedException;

    enum ECallType { SingleCall, GroupUnacknowledgeCall, GroupAcknowledgeCall, GroupBroadcastCall /*, __max_ECallType=0xffffffff */ };
    typedef ECallType& ECallType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECallType;

    enum ECallPriority { Priority0, Priority1, Priority2, Priority3, Priority4, Priority5, Priority6, Priority7, Priority8, Priority9, Priority10, Priority11, Priority12, Priority13, Priority14, Priority15, DefaultNormalPriority, DefaultEmergencyPriority /*, __max_ECallPriority=0xffffffff */ };
    typedef ECallPriority& ECallPriority_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECallPriority;

    struct BaseStation {
      typedef _CORBA_ConstrType_Variable_Var<BaseStation> _var_type;

      
      ::CORBA::Long Id;

      ::CORBA::String_member name;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef BaseStation::_var_type BaseStation_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BaseStation,BaseStation_var > BaseStation_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BaseStation;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BaseStationList;

    class BaseStationList_var;

    class BaseStationList : public _CORBA_Unbounded_Sequence< BaseStation >  {
    public:
      typedef BaseStationList_var _var_type;
      inline BaseStationList() {}
      inline BaseStationList(const BaseStationList& _s)
        : _CORBA_Unbounded_Sequence< BaseStation > (_s) {}

      inline BaseStationList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< BaseStation > (_max) {}
      inline BaseStationList(_CORBA_ULong _max, _CORBA_ULong _len, BaseStation* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< BaseStation > (_max, _len, _val, _rel) {}

    

      inline BaseStationList& operator = (const BaseStationList& _s) {
        _CORBA_Unbounded_Sequence< BaseStation > ::operator=(_s);
        return *this;
      }
    };

    class BaseStationList_out;

    class BaseStationList_var {
    public:
      inline BaseStationList_var() : _pd_seq(0) {}
      inline BaseStationList_var(BaseStationList* _s) : _pd_seq(_s) {}
      inline BaseStationList_var(const BaseStationList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new BaseStationList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~BaseStationList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline BaseStationList_var& operator = (BaseStationList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline BaseStationList_var& operator = (const BaseStationList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new BaseStationList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline BaseStation& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline BaseStationList* operator -> () { return _pd_seq; }
      inline const BaseStationList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator BaseStationList& () const { return *_pd_seq; }
#else
      inline operator const BaseStationList& () const { return *_pd_seq; }
      inline operator BaseStationList& () { return *_pd_seq; }
#endif
        
      inline const BaseStationList& in() const { return *_pd_seq; }
      inline BaseStationList&       inout()    { return *_pd_seq; }
      inline BaseStationList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline BaseStationList* _retn() { BaseStationList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class BaseStationList_out;
      
    private:
      BaseStationList* _pd_seq;
    };

    class BaseStationList_out {
    public:
      inline BaseStationList_out(BaseStationList*& _s) : _data(_s) { _data = 0; }
      inline BaseStationList_out(BaseStationList_var& _s)
        : _data(_s._pd_seq) { _s = (BaseStationList*) 0; }
      inline BaseStationList_out(const BaseStationList_out& _s) : _data(_s._data) {}
      inline BaseStationList_out& operator = (const BaseStationList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline BaseStationList_out& operator = (BaseStationList* _s) {
        _data = _s;
        return *this;
      }
      inline operator BaseStationList*&()  { return _data; }
      inline BaseStationList*& ptr()       { return _data; }
      inline BaseStationList* operator->() { return _data; }

      inline BaseStation& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      BaseStationList*& _data;

    private:
      BaseStationList_out();
      BaseStationList_out& operator=(const BaseStationList_var&);
    };

    struct RegionalCallZone {
      typedef _CORBA_ConstrType_Variable_Var<RegionalCallZone> _var_type;

      
      ::CORBA::Long zoneId;

      ::CORBA::String_member zoneName;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef RegionalCallZone::_var_type RegionalCallZone_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< RegionalCallZone,RegionalCallZone_var > RegionalCallZone_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_RegionalCallZone;

    struct RegionalCallZoneDefinition {
      typedef _CORBA_ConstrType_Variable_Var<RegionalCallZoneDefinition> _var_type;

      
      RegionalCallZone zone;

      BaseStationList baseStations;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef RegionalCallZoneDefinition::_var_type RegionalCallZoneDefinition_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< RegionalCallZoneDefinition,RegionalCallZoneDefinition_var > RegionalCallZoneDefinition_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_RegionalCallZoneDefinition;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_RegionalCallZoneDefinitionList;

    class RegionalCallZoneDefinitionList_var;

    class RegionalCallZoneDefinitionList : public _CORBA_Unbounded_Sequence< RegionalCallZoneDefinition >  {
    public:
      typedef RegionalCallZoneDefinitionList_var _var_type;
      inline RegionalCallZoneDefinitionList() {}
      inline RegionalCallZoneDefinitionList(const RegionalCallZoneDefinitionList& _s)
        : _CORBA_Unbounded_Sequence< RegionalCallZoneDefinition > (_s) {}

      inline RegionalCallZoneDefinitionList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< RegionalCallZoneDefinition > (_max) {}
      inline RegionalCallZoneDefinitionList(_CORBA_ULong _max, _CORBA_ULong _len, RegionalCallZoneDefinition* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< RegionalCallZoneDefinition > (_max, _len, _val, _rel) {}

    

      inline RegionalCallZoneDefinitionList& operator = (const RegionalCallZoneDefinitionList& _s) {
        _CORBA_Unbounded_Sequence< RegionalCallZoneDefinition > ::operator=(_s);
        return *this;
      }
    };

    class RegionalCallZoneDefinitionList_out;

    class RegionalCallZoneDefinitionList_var {
    public:
      inline RegionalCallZoneDefinitionList_var() : _pd_seq(0) {}
      inline RegionalCallZoneDefinitionList_var(RegionalCallZoneDefinitionList* _s) : _pd_seq(_s) {}
      inline RegionalCallZoneDefinitionList_var(const RegionalCallZoneDefinitionList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new RegionalCallZoneDefinitionList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~RegionalCallZoneDefinitionList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline RegionalCallZoneDefinitionList_var& operator = (RegionalCallZoneDefinitionList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline RegionalCallZoneDefinitionList_var& operator = (const RegionalCallZoneDefinitionList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new RegionalCallZoneDefinitionList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline RegionalCallZoneDefinition& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline RegionalCallZoneDefinitionList* operator -> () { return _pd_seq; }
      inline const RegionalCallZoneDefinitionList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator RegionalCallZoneDefinitionList& () const { return *_pd_seq; }
#else
      inline operator const RegionalCallZoneDefinitionList& () const { return *_pd_seq; }
      inline operator RegionalCallZoneDefinitionList& () { return *_pd_seq; }
#endif
        
      inline const RegionalCallZoneDefinitionList& in() const { return *_pd_seq; }
      inline RegionalCallZoneDefinitionList&       inout()    { return *_pd_seq; }
      inline RegionalCallZoneDefinitionList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline RegionalCallZoneDefinitionList* _retn() { RegionalCallZoneDefinitionList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class RegionalCallZoneDefinitionList_out;
      
    private:
      RegionalCallZoneDefinitionList* _pd_seq;
    };

    class RegionalCallZoneDefinitionList_out {
    public:
      inline RegionalCallZoneDefinitionList_out(RegionalCallZoneDefinitionList*& _s) : _data(_s) { _data = 0; }
      inline RegionalCallZoneDefinitionList_out(RegionalCallZoneDefinitionList_var& _s)
        : _data(_s._pd_seq) { _s = (RegionalCallZoneDefinitionList*) 0; }
      inline RegionalCallZoneDefinitionList_out(const RegionalCallZoneDefinitionList_out& _s) : _data(_s._data) {}
      inline RegionalCallZoneDefinitionList_out& operator = (const RegionalCallZoneDefinitionList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline RegionalCallZoneDefinitionList_out& operator = (RegionalCallZoneDefinitionList* _s) {
        _data = _s;
        return *this;
      }
      inline operator RegionalCallZoneDefinitionList*&()  { return _data; }
      inline RegionalCallZoneDefinitionList*& ptr()       { return _data; }
      inline RegionalCallZoneDefinitionList* operator->() { return _data; }

      inline RegionalCallZoneDefinition& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      RegionalCallZoneDefinitionList*& _data;

    private:
      RegionalCallZoneDefinitionList_out();
      RegionalCallZoneDefinitionList_out& operator=(const RegionalCallZoneDefinitionList_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DestinationTSIList;

    class DestinationTSIList_var;

    class DestinationTSIList : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef DestinationTSIList_var _var_type;
      inline DestinationTSIList() {}
      inline DestinationTSIList(const DestinationTSIList& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline DestinationTSIList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline DestinationTSIList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline DestinationTSIList& operator = (const DestinationTSIList& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class DestinationTSIList_out;

    class DestinationTSIList_var {
    public:
      inline DestinationTSIList_var() : _pd_seq(0) {}
      inline DestinationTSIList_var(DestinationTSIList* _s) : _pd_seq(_s) {}
      inline DestinationTSIList_var(const DestinationTSIList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new DestinationTSIList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~DestinationTSIList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline DestinationTSIList_var& operator = (DestinationTSIList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline DestinationTSIList_var& operator = (const DestinationTSIList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new DestinationTSIList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline DestinationTSIList* operator -> () { return _pd_seq; }
      inline const DestinationTSIList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator DestinationTSIList& () const { return *_pd_seq; }
#else
      inline operator const DestinationTSIList& () const { return *_pd_seq; }
      inline operator DestinationTSIList& () { return *_pd_seq; }
#endif
        
      inline const DestinationTSIList& in() const { return *_pd_seq; }
      inline DestinationTSIList&       inout()    { return *_pd_seq; }
      inline DestinationTSIList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline DestinationTSIList* _retn() { DestinationTSIList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class DestinationTSIList_out;
      
    private:
      DestinationTSIList* _pd_seq;
    };

    class DestinationTSIList_out {
    public:
      inline DestinationTSIList_out(DestinationTSIList*& _s) : _data(_s) { _data = 0; }
      inline DestinationTSIList_out(DestinationTSIList_var& _s)
        : _data(_s._pd_seq) { _s = (DestinationTSIList*) 0; }
      inline DestinationTSIList_out(const DestinationTSIList_out& _s) : _data(_s._data) {}
      inline DestinationTSIList_out& operator = (const DestinationTSIList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline DestinationTSIList_out& operator = (DestinationTSIList* _s) {
        _data = _s;
        return *this;
      }
      inline operator DestinationTSIList*&()  { return _data; }
      inline DestinationTSIList*& ptr()       { return _data; }
      inline DestinationTSIList* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      DestinationTSIList*& _data;

    private:
      DestinationTSIList_out();
      DestinationTSIList_out& operator=(const DestinationTSIList_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MessageDataType;

    class MessageDataType_var;

    class MessageDataType : public _CORBA_Unbounded_Sequence_Octet {
    public:
      typedef MessageDataType_var _var_type;
      inline MessageDataType() {}
      inline MessageDataType(const MessageDataType& _s)
        : _CORBA_Unbounded_Sequence_Octet(_s) {}

      inline MessageDataType(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_Octet(_max) {}
      inline MessageDataType(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

    

      inline MessageDataType& operator = (const MessageDataType& _s) {
        _CORBA_Unbounded_Sequence_Octet::operator=(_s);
        return *this;
      }
    };

    class MessageDataType_out;

    class MessageDataType_var {
    public:
      inline MessageDataType_var() : _pd_seq(0) {}
      inline MessageDataType_var(MessageDataType* _s) : _pd_seq(_s) {}
      inline MessageDataType_var(const MessageDataType_var& _s) {
        if( _s._pd_seq )  _pd_seq = new MessageDataType(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~MessageDataType_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline MessageDataType_var& operator = (MessageDataType* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline MessageDataType_var& operator = (const MessageDataType_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new MessageDataType;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline MessageDataType* operator -> () { return _pd_seq; }
      inline const MessageDataType* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator MessageDataType& () const { return *_pd_seq; }
#else
      inline operator const MessageDataType& () const { return *_pd_seq; }
      inline operator MessageDataType& () { return *_pd_seq; }
#endif
        
      inline const MessageDataType& in() const { return *_pd_seq; }
      inline MessageDataType&       inout()    { return *_pd_seq; }
      inline MessageDataType*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline MessageDataType* _retn() { MessageDataType* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class MessageDataType_out;
      
    private:
      MessageDataType* _pd_seq;
    };

    class MessageDataType_out {
    public:
      inline MessageDataType_out(MessageDataType*& _s) : _data(_s) { _data = 0; }
      inline MessageDataType_out(MessageDataType_var& _s)
        : _data(_s._pd_seq) { _s = (MessageDataType*) 0; }
      inline MessageDataType_out(const MessageDataType_out& _s) : _data(_s._data) {}
      inline MessageDataType_out& operator = (const MessageDataType_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline MessageDataType_out& operator = (MessageDataType* _s) {
        _data = _s;
        return *this;
      }
      inline operator MessageDataType*&()  { return _data; }
      inline MessageDataType*& ptr()       { return _data; }
      inline MessageDataType* operator->() { return _data; }

      inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      MessageDataType*& _data;

    private:
      MessageDataType_out();
      MessageDataType_out& operator=(const MessageDataType_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PatchList;

    class PatchList_var;

    class PatchList : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef PatchList_var _var_type;
      inline PatchList() {}
      inline PatchList(const PatchList& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline PatchList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline PatchList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline PatchList& operator = (const PatchList& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class PatchList_out;

    class PatchList_var {
    public:
      inline PatchList_var() : _pd_seq(0) {}
      inline PatchList_var(PatchList* _s) : _pd_seq(_s) {}
      inline PatchList_var(const PatchList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PatchList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PatchList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PatchList_var& operator = (PatchList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PatchList_var& operator = (const PatchList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PatchList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PatchList* operator -> () { return _pd_seq; }
      inline const PatchList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PatchList& () const { return *_pd_seq; }
#else
      inline operator const PatchList& () const { return *_pd_seq; }
      inline operator PatchList& () { return *_pd_seq; }
#endif
        
      inline const PatchList& in() const { return *_pd_seq; }
      inline PatchList&       inout()    { return *_pd_seq; }
      inline PatchList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PatchList* _retn() { PatchList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PatchList_out;
      
    private:
      PatchList* _pd_seq;
    };

    class PatchList_out {
    public:
      inline PatchList_out(PatchList*& _s) : _data(_s) { _data = 0; }
      inline PatchList_out(PatchList_var& _s)
        : _data(_s._pd_seq) { _s = (PatchList*) 0; }
      inline PatchList_out(const PatchList_out& _s) : _data(_s._data) {}
      inline PatchList_out& operator = (const PatchList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PatchList_out& operator = (PatchList* _s) {
        _data = _s;
        return *this;
      }
      inline operator PatchList*&()  { return _data; }
      inline PatchList*& ptr()       { return _data; }
      inline PatchList* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PatchList*& _data;

    private:
      PatchList_out();
      PatchList_out& operator=(const PatchList_var&);
    };

  
  };

  class _objref_IRadioSessionCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Long getMaxBaseStationInRegionalCall();
    IRadioSessionCorbaDef::RegionalCallZoneDefinitionList* getRegionalCallZoneInformation();
    void createRegionalCallGroup(::CORBA::Long zone, const ::TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStationList& baseStations);
    void deleteRegionalCallGroup(::CORBA::Long zoneId);
    ::CORBA::Long getSessionReference(const char* sessionID);
    void sessionLogin(const char* radioUserName, const char* sessionID);
    void sessionLogout(const char* sessionID);
    void answerCall(::CORBA::Long callID, const char* sessionID);
    ::CORBA::Long makeCall(const char* destinationTSI, ::TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType callType, ::CORBA::Boolean fullDuplex, ::TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority callPriority, ::CORBA::Boolean hook, const char* sessionId, ::CORBA::Boolean isInvisibleToGUIApps);
    void releaseCall(::CORBA::Long callID, const char* sessionID);
    void holdCall(::CORBA::Long callID, const char* sessionID);
    void resumeCall(::CORBA::Long callID, const char* sessionID);
    ::CORBA::Long includeSubscriber(::CORBA::Long callID, const char* destinationTSI, const char* sessionID);
    void demandTX(::CORBA::Short priority, const char* sessionID, ::CORBA::ULong& queuedID);
    void ceaseTX(const char* sessionID);
    void selectCall(::CORBA::Long callID, const char* sessionID);
    void deselectCall(::CORBA::Long callID, const char* sessionID);
    void adjustCallVolume(::CORBA::Long callID, ::CORBA::Boolean increaseVol, const char* sessionID);
    char* makeDynamicGroup(const ::TA_Base_Bus_4712::IRadioSessionCorbaDef::DestinationTSIList& destTSIs, const char* sessionID);
    ::CORBA::Boolean sendTextMessage(const char* destinationTSI, const char* message, const char* sessionId, ::CORBA::String_out status);
    ::CORBA::Long startListening(::CORBA::Long callID, const char* sessionID);
    void stopListening(::CORBA::Long callID, const char* sessionID);
    ::CORBA::Long joinCall(::CORBA::Long callID, const char* sessionID);
    void terminateCall(::CORBA::Long callID, const char* sessionID);
    void getActiveCalls(const char* TSI, const char* sessionID);
    ::CORBA::Long startMonitoring(const char* TSI, const char* sessionID);
    void stopMonitoring(const char* TSI, const char* sessionID);
    void setCallForwarding(const ::TA_Base_Bus_4712::IRadioCorbaDef::CallForwardDetails& details, const char* sessionID);
    IRadioCorbaDef::CallForwardDetails* getCallForwarding();
    void createPatch(const ::TA_Base_Bus_4712::IRadioSessionCorbaDef::PatchList& patchSubscribers, const char* patchName, const char* SessionId);
    void deletePatch(const char* patchName, const char* SessionId);
    char* getPatchOwnerITSI();
    ::CORBA::UShort getFlexibleTimeOutValue();

    inline _objref_IRadioSessionCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_IRadioSessionCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IRadioSessionCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IRadioSessionCorbaDef(const _objref_IRadioSessionCorbaDef&);
    _objref_IRadioSessionCorbaDef& operator = (const _objref_IRadioSessionCorbaDef&);
    // not implemented

    friend class IRadioSessionCorbaDef;
  };

  class _pof_IRadioSessionCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IRadioSessionCorbaDef() : _OMNI_NS(proxyObjectFactory)(IRadioSessionCorbaDef::_PD_repoId) {}
    virtual ~_pof_IRadioSessionCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IRadioSessionCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IRadioSessionCorbaDef();

    virtual ::CORBA::Long getMaxBaseStationInRegionalCall() = 0;
    virtual IRadioSessionCorbaDef::RegionalCallZoneDefinitionList* getRegionalCallZoneInformation() = 0;
    virtual void createRegionalCallGroup(::CORBA::Long zone, const ::TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStationList& baseStations) = 0;
    virtual void deleteRegionalCallGroup(::CORBA::Long zoneId) = 0;
    virtual ::CORBA::Long getSessionReference(const char* sessionID) = 0;
    virtual void sessionLogin(const char* radioUserName, const char* sessionID) = 0;
    virtual void sessionLogout(const char* sessionID) = 0;
    virtual void answerCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual ::CORBA::Long makeCall(const char* destinationTSI, ::TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType callType, ::CORBA::Boolean fullDuplex, ::TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority callPriority, ::CORBA::Boolean hook, const char* sessionId, ::CORBA::Boolean isInvisibleToGUIApps) = 0;
    virtual void releaseCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void holdCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void resumeCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual ::CORBA::Long includeSubscriber(::CORBA::Long callID, const char* destinationTSI, const char* sessionID) = 0;
    virtual void demandTX(::CORBA::Short priority, const char* sessionID, ::CORBA::ULong& queuedID) = 0;
    virtual void ceaseTX(const char* sessionID) = 0;
    virtual void selectCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void deselectCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void adjustCallVolume(::CORBA::Long callID, ::CORBA::Boolean increaseVol, const char* sessionID) = 0;
    virtual char* makeDynamicGroup(const ::TA_Base_Bus_4712::IRadioSessionCorbaDef::DestinationTSIList& destTSIs, const char* sessionID) = 0;
    virtual ::CORBA::Boolean sendTextMessage(const char* destinationTSI, const char* message, const char* sessionId, ::CORBA::String_out status) = 0;
    virtual ::CORBA::Long startListening(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void stopListening(::CORBA::Long callID, const char* sessionID) = 0;
    virtual ::CORBA::Long joinCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void terminateCall(::CORBA::Long callID, const char* sessionID) = 0;
    virtual void getActiveCalls(const char* TSI, const char* sessionID) = 0;
    virtual ::CORBA::Long startMonitoring(const char* TSI, const char* sessionID) = 0;
    virtual void stopMonitoring(const char* TSI, const char* sessionID) = 0;
    virtual void setCallForwarding(const ::TA_Base_Bus_4712::IRadioCorbaDef::CallForwardDetails& details, const char* sessionID) = 0;
    virtual IRadioCorbaDef::CallForwardDetails* getCallForwarding() = 0;
    virtual void createPatch(const ::TA_Base_Bus_4712::IRadioSessionCorbaDef::PatchList& patchSubscribers, const char* patchName, const char* SessionId) = 0;
    virtual void deletePatch(const char* patchName, const char* SessionId) = 0;
    virtual char* getPatchOwnerITSI() = 0;
    virtual ::CORBA::UShort getFlexibleTimeOutValue() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IRadioSessionCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus_4712
_CORBA_MODULE_BEG

  class IRadioSessionCorbaDef :
    public virtual TA_Base_Bus_4712::_impl_IRadioSessionCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IRadioSessionCorbaDef();

    inline ::TA_Base_Bus_4712::IRadioSessionCorbaDef_ptr _this() {
      return (::TA_Base_Bus_4712::IRadioSessionCorbaDef_ptr) _do_this(::TA_Base_Bus_4712::IRadioSessionCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus_4712
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::radioAPIException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::radioAPIException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::radioAPIException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::radioFallbackException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::radioFallbackException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::radioFallbackException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::sessionNotInitialiseException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::sessionNotInitialiseException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::sessionNotInitialiseException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::invalidCallIDException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::invalidCallIDException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::invalidCallIDException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::invalidRequestException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::invalidRequestException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::invalidRequestException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::accessDeniedException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::accessDeniedException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::accessDeniedException*& _sp);

inline void operator >>=(TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus_4712::IRadioSessionCorbaDef::GroupBroadcastCall) {
    _e = (TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallType& _s);

inline void operator >>=(TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus_4712::IRadioSessionCorbaDef::DefaultEmergencyPriority) {
    _e = (TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::ECallPriority& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStation& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStation* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStation*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStation*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStationList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStationList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStationList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::BaseStationList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZone& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZone* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZone*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZone*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinition& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinition* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinition*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinition*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinitionList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinitionList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinitionList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::RegionalCallZoneDefinitionList*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::DestinationTSIList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::DestinationTSIList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::DestinationTSIList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::DestinationTSIList*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::MessageDataType& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::MessageDataType* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::MessageDataType*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::MessageDataType*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::PatchList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::PatchList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef::PatchList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus_4712::IRadioSessionCorbaDef::PatchList*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus_4712::IRadioSessionCorbaDef_ptr& _s);



inline void
TA_Base_Bus_4712::IRadioSessionCorbaDef::_marshalObjRef(::TA_Base_Bus_4712::IRadioSessionCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_IRadioSessionCorbaDef
#endif

#endif  // __IRadioSessionCorbaDef_hh__

