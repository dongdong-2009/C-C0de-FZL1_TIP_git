// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __IRadioCorbaDef_hh__
#define __IRadioCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mIRadioCorbaDef__
#define __TA__Base__Bus_mIRadioCorbaDef__

  class IRadioCorbaDef;
  class _objref_IRadioCorbaDef;
  class _impl_IRadioCorbaDef;
  
  typedef _objref_IRadioCorbaDef* IRadioCorbaDef_ptr;
  typedef IRadioCorbaDef_ptr IRadioCorbaDefRef;

  class IRadioCorbaDef_Helper {
  public:
    typedef IRadioCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IRadioCorbaDef, IRadioCorbaDef_Helper> IRadioCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IRadioCorbaDef,IRadioCorbaDef_Helper > IRadioCorbaDef_out;

#endif

  // interface IRadioCorbaDef
  class IRadioCorbaDef {
  public:
    // Declarations for this interface type.
    typedef IRadioCorbaDef_ptr _ptr_type;
    typedef IRadioCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallID;

    typedef ::CORBA::Long CallID;
    typedef ::CORBA::Long_out CallID_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionReference;

    typedef ::CORBA::Long SessionReference;
    typedef ::CORBA::Long_out SessionReference_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AudioReference;

    typedef ::CORBA::Long AudioReference;
    typedef ::CORBA::Long_out AudioReference_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallReference;

    typedef ::CORBA::Long CallReference;
    typedef ::CORBA::Long_out CallReference_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MonitorReference;

    typedef ::CORBA::Long MonitorReference;
    typedef ::CORBA::Long_out MonitorReference_out;

    class radioException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline radioException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      radioException(const radioException&);
      radioException(const char* i_what);
      radioException& operator=(const radioException&);
      virtual ~radioException();
      virtual void _raise() const;
      static radioException* _downcast(::CORBA::Exception*);
      static const radioException* _downcast(const ::CORBA::Exception*);
      static inline radioException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_radioException;

    class invalidCallIDException : public ::CORBA::UserException {
    public:
      
      

      inline invalidCallIDException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      invalidCallIDException(const invalidCallIDException&);
      
      invalidCallIDException& operator=(const invalidCallIDException&);
      virtual ~invalidCallIDException();
      virtual void _raise() const;
      static invalidCallIDException* _downcast(::CORBA::Exception*);
      static const invalidCallIDException* _downcast(const ::CORBA::Exception*);
      static inline invalidCallIDException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_invalidCallIDException;

    enum ECallStatusType { Ringing, Connected, ConnectedGroup, Disconnected, OnHold, Deleted, SessionUpdate /*, __max_ECallStatusType=0xffffffff */ };
    typedef ECallStatusType& ECallStatusType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECallStatusType;

    enum ECallCategory { HalfDuplex, FullDuplex, TextMessage, CallDriver /*, __max_ECallCategory=0xffffffff */ };
    typedef ECallCategory& ECallCategory_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECallCategory;

    enum EMonitorStatusType { Monitoring, Listening, Included, Joined, Stopped /*, __max_EMonitorStatusType=0xffffffff */ };
    typedef EMonitorStatusType& EMonitorStatusType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EMonitorStatusType;

    enum ECallSource { IncomingCall, OutgoingCall /*, __max_ECallSource=0xffffffff */ };
    typedef ECallSource& ECallSource_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECallSource;

    enum ECallType { SingleCall, GroupUnacknowledgeCall, GroupAcknowledgeCall, GroupBroadcastCall, CircuitModeDataCall /*, __max_ECallType=0xffffffff */ };
    typedef ECallType& ECallType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ECallType;

    enum EPTTState { PTT_GRANTED, PTT_QUEUE, PTT_CEASE, PTT_TIMEOUT /*, __max_EPTTState=0xffffffff */ };
    typedef EPTTState& EPTTState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPTTState;

    enum EControlConnectionStatus { NoAppliable, ConnectToPrimary, ConnectToSecondary /*, __max_EControlConnectionStatus=0xffffffff */ };
    typedef EControlConnectionStatus& EControlConnectionStatus_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EControlConnectionStatus;

    struct CallParticipant {
      typedef _CORBA_ConstrType_Variable_Var<CallParticipant> _var_type;

      
      ::CORBA::String_member name;

      ::CORBA::String_member TSI;

      ::CORBA::String_member location;

      ::CORBA::Boolean isAcknowledged;

      EPTTState pttState;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CallParticipant::_var_type CallParticipant_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CallParticipant,CallParticipant_var > CallParticipant_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallParticipant;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallParticipantList;

    class CallParticipantList_var;

    class CallParticipantList : public _CORBA_Unbounded_Sequence< CallParticipant >  {
    public:
      typedef CallParticipantList_var _var_type;
      inline CallParticipantList() {}
      inline CallParticipantList(const CallParticipantList& _s)
        : _CORBA_Unbounded_Sequence< CallParticipant > (_s) {}

      inline CallParticipantList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< CallParticipant > (_max) {}
      inline CallParticipantList(_CORBA_ULong _max, _CORBA_ULong _len, CallParticipant* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< CallParticipant > (_max, _len, _val, _rel) {}

    

      inline CallParticipantList& operator = (const CallParticipantList& _s) {
        _CORBA_Unbounded_Sequence< CallParticipant > ::operator=(_s);
        return *this;
      }
    };

    class CallParticipantList_out;

    class CallParticipantList_var {
    public:
      inline CallParticipantList_var() : _pd_seq(0) {}
      inline CallParticipantList_var(CallParticipantList* _s) : _pd_seq(_s) {}
      inline CallParticipantList_var(const CallParticipantList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CallParticipantList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CallParticipantList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CallParticipantList_var& operator = (CallParticipantList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CallParticipantList_var& operator = (const CallParticipantList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CallParticipantList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline CallParticipant& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CallParticipantList* operator -> () { return _pd_seq; }
      inline const CallParticipantList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CallParticipantList& () const { return *_pd_seq; }
#else
      inline operator const CallParticipantList& () const { return *_pd_seq; }
      inline operator CallParticipantList& () { return *_pd_seq; }
#endif
        
      inline const CallParticipantList& in() const { return *_pd_seq; }
      inline CallParticipantList&       inout()    { return *_pd_seq; }
      inline CallParticipantList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CallParticipantList* _retn() { CallParticipantList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CallParticipantList_out;
      
    private:
      CallParticipantList* _pd_seq;
    };

    class CallParticipantList_out {
    public:
      inline CallParticipantList_out(CallParticipantList*& _s) : _data(_s) { _data = 0; }
      inline CallParticipantList_out(CallParticipantList_var& _s)
        : _data(_s._pd_seq) { _s = (CallParticipantList*) 0; }
      inline CallParticipantList_out(const CallParticipantList_out& _s) : _data(_s._data) {}
      inline CallParticipantList_out& operator = (const CallParticipantList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CallParticipantList_out& operator = (CallParticipantList* _s) {
        _data = _s;
        return *this;
      }
      inline operator CallParticipantList*&()  { return _data; }
      inline CallParticipantList*& ptr()       { return _data; }
      inline CallParticipantList* operator->() { return _data; }

      inline CallParticipant& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CallParticipantList*& _data;

    private:
      CallParticipantList_out();
      CallParticipantList_out& operator=(const CallParticipantList_var&);
    };

    struct CallDetailsType {
      typedef _CORBA_ConstrType_Variable_Var<CallDetailsType> _var_type;

      
      ::CORBA::Long callID;

      ::CORBA::Long sessionRef;

      ::CORBA::ULong consoleKey;

      ::CORBA::Long time;

      ::CORBA::String_member callTime;

      ::CORBA::String_member callerName;

      ::CORBA::String_member callerTSI;

      ::CORBA::String_member callerLocation;

      ::CORBA::String_member calledName;

      ::CORBA::String_member calledTSI;

      ::CORBA::String_member calledLocation;

      ECallStatusType callStatus;

      ECallCategory callCategory;

      ECallSource callSource;

      ECallType callType;

      ::CORBA::String_member callText;

      ::CORBA::Boolean isEmergency;

      ::CORBA::Boolean isInvisibleToGUIApps;

      CallParticipantList participants;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CallDetailsType::_var_type CallDetailsType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CallDetailsType,CallDetailsType_var > CallDetailsType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallDetailsType;

    struct MonitoredCallDetailsType {
      typedef _CORBA_ConstrType_Variable_Var<MonitoredCallDetailsType> _var_type;

      
      ::CORBA::Long callID;

      ::CORBA::Long sessionRef;

      ::CORBA::ULong consoleKey;

      ::CORBA::Long monitorID;

      ::CORBA::String_member callTime;

      ::CORBA::String_member callerName;

      ::CORBA::String_member callerTSI;

      ::CORBA::String_member callerLocation;

      ::CORBA::String_member calledName;

      ::CORBA::String_member calledTSI;

      ::CORBA::String_member calledLocation;

      EMonitorStatusType callStatus;

      ECallCategory callCategory;

      ECallType callType;

      typedef _CORBA_Unbounded_Sequence< CallParticipant >  _participants_seq;
      _participants_seq participants;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef MonitoredCallDetailsType::_var_type MonitoredCallDetailsType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< MonitoredCallDetailsType,MonitoredCallDetailsType_var > MonitoredCallDetailsType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MonitoredCallDetailsType;

    struct CallStatusEvent {
      typedef _CORBA_ConstrType_Fix_Var<CallStatusEvent> _var_type;

      
      ::CORBA::Long callID;

      ::CORBA::Long sessionRef;

      ::CORBA::ULong consoleKey;

      ECallStatusType callStatus;

      ECallCategory callCategory;

      ::CORBA::Boolean isInvisibleToGUIApps;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CallStatusEvent::_var_type CallStatusEvent_var;

    typedef CallStatusEvent& CallStatusEvent_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallStatusEvent;

    enum ESessionUpdateReason { SessionLoggedIn, SessionLoggedOut, SessionLost /*, __max_ESessionUpdateReason=0xffffffff */ };
    typedef ESessionUpdateReason& ESessionUpdateReason_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ESessionUpdateReason;

    struct SessionUpdateNotification {
      typedef _CORBA_ConstrType_Fix_Var<SessionUpdateNotification> _var_type;

      
      ::CORBA::ULong consoleKey;

      ::CORBA::Long sessionRef;

      ::CORBA::Boolean inFallback;

      ESessionUpdateReason reason;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SessionUpdateNotification::_var_type SessionUpdateNotification_var;

    typedef SessionUpdateNotification& SessionUpdateNotification_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionUpdateNotification;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CallList;

    class CallList_var;

    class CallList : public _CORBA_Unbounded_Sequence< CallStatusEvent >  {
    public:
      typedef CallList_var _var_type;
      inline CallList() {}
      inline CallList(const CallList& _s)
        : _CORBA_Unbounded_Sequence< CallStatusEvent > (_s) {}

      inline CallList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< CallStatusEvent > (_max) {}
      inline CallList(_CORBA_ULong _max, _CORBA_ULong _len, CallStatusEvent* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< CallStatusEvent > (_max, _len, _val, _rel) {}

    

      inline CallList& operator = (const CallList& _s) {
        _CORBA_Unbounded_Sequence< CallStatusEvent > ::operator=(_s);
        return *this;
      }
    };

    class CallList_out;

    class CallList_var {
    public:
      inline CallList_var() : _pd_seq(0) {}
      inline CallList_var(CallList* _s) : _pd_seq(_s) {}
      inline CallList_var(const CallList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CallList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CallList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CallList_var& operator = (CallList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CallList_var& operator = (const CallList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CallList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline CallStatusEvent& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CallList* operator -> () { return _pd_seq; }
      inline const CallList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CallList& () const { return *_pd_seq; }
#else
      inline operator const CallList& () const { return *_pd_seq; }
      inline operator CallList& () { return *_pd_seq; }
#endif
        
      inline const CallList& in() const { return *_pd_seq; }
      inline CallList&       inout()    { return *_pd_seq; }
      inline CallList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CallList* _retn() { CallList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CallList_out;
      
    private:
      CallList* _pd_seq;
    };

    class CallList_out {
    public:
      inline CallList_out(CallList*& _s) : _data(_s) { _data = 0; }
      inline CallList_out(CallList_var& _s)
        : _data(_s._pd_seq) { _s = (CallList*) 0; }
      inline CallList_out(const CallList_out& _s) : _data(_s._data) {}
      inline CallList_out& operator = (const CallList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CallList_out& operator = (CallList* _s) {
        _data = _s;
        return *this;
      }
      inline operator CallList*&()  { return _data; }
      inline CallList*& ptr()       { return _data; }
      inline CallList* operator->() { return _data; }

      inline CallStatusEvent& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CallList*& _data;

    private:
      CallList_out();
      CallList_out& operator=(const CallList_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MessageDataType;

    class MessageDataType_var;

    class MessageDataType : public _CORBA_Unbounded_Sequence_Octet {
    public:
      typedef MessageDataType_var _var_type;
      inline MessageDataType() {}
      inline MessageDataType(const MessageDataType& _s)
        : _CORBA_Unbounded_Sequence_Octet(_s) {}

      inline MessageDataType(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_Octet(_max) {}
      inline MessageDataType(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

    

      inline MessageDataType& operator = (const MessageDataType& _s) {
        _CORBA_Unbounded_Sequence_Octet::operator=(_s);
        return *this;
      }
    };

    class MessageDataType_out;

    class MessageDataType_var {
    public:
      inline MessageDataType_var() : _pd_seq(0) {}
      inline MessageDataType_var(MessageDataType* _s) : _pd_seq(_s) {}
      inline MessageDataType_var(const MessageDataType_var& _s) {
        if( _s._pd_seq )  _pd_seq = new MessageDataType(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~MessageDataType_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline MessageDataType_var& operator = (MessageDataType* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline MessageDataType_var& operator = (const MessageDataType_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new MessageDataType;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline MessageDataType* operator -> () { return _pd_seq; }
      inline const MessageDataType* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator MessageDataType& () const { return *_pd_seq; }
#else
      inline operator const MessageDataType& () const { return *_pd_seq; }
      inline operator MessageDataType& () { return *_pd_seq; }
#endif
        
      inline const MessageDataType& in() const { return *_pd_seq; }
      inline MessageDataType&       inout()    { return *_pd_seq; }
      inline MessageDataType*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline MessageDataType* _retn() { MessageDataType* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class MessageDataType_out;
      
    private:
      MessageDataType* _pd_seq;
    };

    class MessageDataType_out {
    public:
      inline MessageDataType_out(MessageDataType*& _s) : _data(_s) { _data = 0; }
      inline MessageDataType_out(MessageDataType_var& _s)
        : _data(_s._pd_seq) { _s = (MessageDataType*) 0; }
      inline MessageDataType_out(const MessageDataType_out& _s) : _data(_s._data) {}
      inline MessageDataType_out& operator = (const MessageDataType_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline MessageDataType_out& operator = (MessageDataType* _s) {
        _data = _s;
        return *this;
      }
      inline operator MessageDataType*&()  { return _data; }
      inline MessageDataType*& ptr()       { return _data; }
      inline MessageDataType* operator->() { return _data; }

      inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      MessageDataType*& _data;

    private:
      MessageDataType_out();
      MessageDataType_out& operator=(const MessageDataType_var&);
    };

    struct SDSNotificationEvent {
      typedef _CORBA_ConstrType_Variable_Var<SDSNotificationEvent> _var_type;

      
      ::CORBA::String_member sendingITSI;

      MessageDataType messageData;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SDSNotificationEvent::_var_type SDSNotificationEvent_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SDSNotificationEvent,SDSNotificationEvent_var > SDSNotificationEvent_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SDSNotificationEvent;

    struct PTTStatusNotification {
      typedef _CORBA_ConstrType_Variable_Var<PTTStatusNotification> _var_type;

      
      EPTTState state;

      ::CORBA::Long callID;

      ::CORBA::Long sessionRef;

      ::CORBA::ULong consoleKey;

      ::CORBA::ULong transactionID;

      ::CORBA::String_member userITSI;

      ::CORBA::String_member tpiITSI;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef PTTStatusNotification::_var_type PTTStatusNotification_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< PTTStatusNotification,PTTStatusNotification_var > PTTStatusNotification_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PTTStatusNotification;

    class dataCallInProgressException : public ::CORBA::UserException {
    public:
      
      

      inline dataCallInProgressException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      dataCallInProgressException(const dataCallInProgressException&);
      
      dataCallInProgressException& operator=(const dataCallInProgressException&);
      virtual ~dataCallInProgressException();
      virtual void _raise() const;
      static dataCallInProgressException* _downcast(::CORBA::Exception*);
      static const dataCallInProgressException* _downcast(const ::CORBA::Exception*);
      static inline dataCallInProgressException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_dataCallInProgressException;

    class dataCallNotInProgressException : public ::CORBA::UserException {
    public:
      
      

      inline dataCallNotInProgressException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      dataCallNotInProgressException(const dataCallNotInProgressException&);
      
      dataCallNotInProgressException& operator=(const dataCallNotInProgressException&);
      virtual ~dataCallNotInProgressException();
      virtual void _raise() const;
      static dataCallNotInProgressException* _downcast(::CORBA::Exception*);
      static const dataCallNotInProgressException* _downcast(const ::CORBA::Exception*);
      static inline dataCallNotInProgressException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_dataCallNotInProgressException;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CircuitDataType;

    class CircuitDataType_var;

    class CircuitDataType : public _CORBA_Unbounded_Sequence_Octet {
    public:
      typedef CircuitDataType_var _var_type;
      inline CircuitDataType() {}
      inline CircuitDataType(const CircuitDataType& _s)
        : _CORBA_Unbounded_Sequence_Octet(_s) {}

      inline CircuitDataType(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_Octet(_max) {}
      inline CircuitDataType(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

    

      inline CircuitDataType& operator = (const CircuitDataType& _s) {
        _CORBA_Unbounded_Sequence_Octet::operator=(_s);
        return *this;
      }
    };

    class CircuitDataType_out;

    class CircuitDataType_var {
    public:
      inline CircuitDataType_var() : _pd_seq(0) {}
      inline CircuitDataType_var(CircuitDataType* _s) : _pd_seq(_s) {}
      inline CircuitDataType_var(const CircuitDataType_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CircuitDataType(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CircuitDataType_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CircuitDataType_var& operator = (CircuitDataType* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CircuitDataType_var& operator = (const CircuitDataType_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CircuitDataType;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CircuitDataType* operator -> () { return _pd_seq; }
      inline const CircuitDataType* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CircuitDataType& () const { return *_pd_seq; }
#else
      inline operator const CircuitDataType& () const { return *_pd_seq; }
      inline operator CircuitDataType& () { return *_pd_seq; }
#endif
        
      inline const CircuitDataType& in() const { return *_pd_seq; }
      inline CircuitDataType&       inout()    { return *_pd_seq; }
      inline CircuitDataType*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CircuitDataType* _retn() { CircuitDataType* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CircuitDataType_out;
      
    private:
      CircuitDataType* _pd_seq;
    };

    class CircuitDataType_out {
    public:
      inline CircuitDataType_out(CircuitDataType*& _s) : _data(_s) { _data = 0; }
      inline CircuitDataType_out(CircuitDataType_var& _s)
        : _data(_s._pd_seq) { _s = (CircuitDataType*) 0; }
      inline CircuitDataType_out(const CircuitDataType_out& _s) : _data(_s._data) {}
      inline CircuitDataType_out& operator = (const CircuitDataType_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CircuitDataType_out& operator = (CircuitDataType* _s) {
        _data = _s;
        return *this;
      }
      inline operator CircuitDataType*&()  { return _data; }
      inline CircuitDataType*& ptr()       { return _data; }
      inline CircuitDataType* operator->() { return _data; }

      inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CircuitDataType*& _data;

    private:
      CircuitDataType_out();
      CircuitDataType_out& operator=(const CircuitDataType_var&);
    };

    struct SendDataNotification {
      typedef _CORBA_ConstrType_Variable_Var<SendDataNotification> _var_type;

      
      ::CORBA::String_member ITSI;

      ::CORBA::Boolean isSuccessful;

      ::CORBA::String_member failReason;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SendDataNotification::_var_type SendDataNotification_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SendDataNotification,SendDataNotification_var > SendDataNotification_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SendDataNotification;

    class radioDirectoryError : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline radioDirectoryError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      radioDirectoryError(const radioDirectoryError&);
      radioDirectoryError(const char* i_what);
      radioDirectoryError& operator=(const radioDirectoryError&);
      virtual ~radioDirectoryError();
      virtual void _raise() const;
      static radioDirectoryError* _downcast(::CORBA::Exception*);
      static const radioDirectoryError* _downcast(const ::CORBA::Exception*);
      static inline radioDirectoryError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_radioDirectoryError;

    enum SubscriberType { INDIVIDUAL_SUBSCRIBER, GROUP_SUBSCRIBER, PATCH_SUBSCRIBER /*, __max_SubscriberType=0xffffffff */ };
    typedef SubscriberType& SubscriberType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SubscriberType;

    class radioInvalidSubscriberException : public ::CORBA::UserException {
    public:
      
      

      inline radioInvalidSubscriberException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      radioInvalidSubscriberException(const radioInvalidSubscriberException&);
      
      radioInvalidSubscriberException& operator=(const radioInvalidSubscriberException&);
      virtual ~radioInvalidSubscriberException();
      virtual void _raise() const;
      static radioInvalidSubscriberException* _downcast(::CORBA::Exception*);
      static const radioInvalidSubscriberException* _downcast(const ::CORBA::Exception*);
      static inline radioInvalidSubscriberException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_radioInvalidSubscriberException;

    struct SubscriberDetails {
      typedef _CORBA_ConstrType_Variable_Var<SubscriberDetails> _var_type;

      
      ::CORBA::String_member TSI;

      ::CORBA::String_member subscriberName;

      ::CORBA::String_member locationName;

      ::CORBA::Long locationKey;

      ::CORBA::String_member ownerTSI;

      SubscriberType type;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SubscriberDetails::_var_type SubscriberDetails_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SubscriberDetails,SubscriberDetails_var > SubscriberDetails_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SubscriberDetails;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SubscriberList;

    class SubscriberList_var;

    class SubscriberList : public _CORBA_Unbounded_Sequence< SubscriberDetails >  {
    public:
      typedef SubscriberList_var _var_type;
      inline SubscriberList() {}
      inline SubscriberList(const SubscriberList& _s)
        : _CORBA_Unbounded_Sequence< SubscriberDetails > (_s) {}

      inline SubscriberList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< SubscriberDetails > (_max) {}
      inline SubscriberList(_CORBA_ULong _max, _CORBA_ULong _len, SubscriberDetails* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< SubscriberDetails > (_max, _len, _val, _rel) {}

    

      inline SubscriberList& operator = (const SubscriberList& _s) {
        _CORBA_Unbounded_Sequence< SubscriberDetails > ::operator=(_s);
        return *this;
      }
    };

    class SubscriberList_out;

    class SubscriberList_var {
    public:
      inline SubscriberList_var() : _pd_seq(0) {}
      inline SubscriberList_var(SubscriberList* _s) : _pd_seq(_s) {}
      inline SubscriberList_var(const SubscriberList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new SubscriberList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~SubscriberList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline SubscriberList_var& operator = (SubscriberList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline SubscriberList_var& operator = (const SubscriberList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new SubscriberList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline SubscriberDetails& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline SubscriberList* operator -> () { return _pd_seq; }
      inline const SubscriberList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator SubscriberList& () const { return *_pd_seq; }
#else
      inline operator const SubscriberList& () const { return *_pd_seq; }
      inline operator SubscriberList& () { return *_pd_seq; }
#endif
        
      inline const SubscriberList& in() const { return *_pd_seq; }
      inline SubscriberList&       inout()    { return *_pd_seq; }
      inline SubscriberList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline SubscriberList* _retn() { SubscriberList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class SubscriberList_out;
      
    private:
      SubscriberList* _pd_seq;
    };

    class SubscriberList_out {
    public:
      inline SubscriberList_out(SubscriberList*& _s) : _data(_s) { _data = 0; }
      inline SubscriberList_out(SubscriberList_var& _s)
        : _data(_s._pd_seq) { _s = (SubscriberList*) 0; }
      inline SubscriberList_out(const SubscriberList_out& _s) : _data(_s._data) {}
      inline SubscriberList_out& operator = (const SubscriberList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline SubscriberList_out& operator = (SubscriberList* _s) {
        _data = _s;
        return *this;
      }
      inline operator SubscriberList*&()  { return _data; }
      inline SubscriberList*& ptr()       { return _data; }
      inline SubscriberList* operator->() { return _data; }

      inline SubscriberDetails& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      SubscriberList*& _data;

    private:
      SubscriberList_out();
      SubscriberList_out& operator=(const SubscriberList_var&);
    };

    enum SubscriberNotificationType { NEW_SUBSCRIBER, UPDATE_SUBSCRIBER, DELETE_SUBSCRIBER, SCAN_SUBSCRIBERS /*, __max_SubscriberNotificationType=0xffffffff */ };
    typedef SubscriberNotificationType& SubscriberNotificationType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SubscriberNotificationType;

    struct SubscriberDetailsNotification {
      typedef _CORBA_ConstrType_Variable_Var<SubscriberDetailsNotification> _var_type;

      
      SubscriberNotificationType notifyType;

      SubscriberDetails details;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SubscriberDetailsNotification::_var_type SubscriberDetailsNotification_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SubscriberDetailsNotification,SubscriberDetailsNotification_var > SubscriberDetailsNotification_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SubscriberDetailsNotification;

    class invalidSpeedDialSetException : public ::CORBA::UserException {
    public:
      
      

      inline invalidSpeedDialSetException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      invalidSpeedDialSetException(const invalidSpeedDialSetException&);
      
      invalidSpeedDialSetException& operator=(const invalidSpeedDialSetException&);
      virtual ~invalidSpeedDialSetException();
      virtual void _raise() const;
      static invalidSpeedDialSetException* _downcast(::CORBA::Exception*);
      static const invalidSpeedDialSetException* _downcast(const ::CORBA::Exception*);
      static inline invalidSpeedDialSetException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_invalidSpeedDialSetException;

    struct SpeedDialEntry {
      typedef _CORBA_ConstrType_Variable_Var<SpeedDialEntry> _var_type;

      
      ::CORBA::String_member label;

      ::CORBA::String_member TSI;

      ::CORBA::Octet position;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SpeedDialEntry::_var_type SpeedDialEntry_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SpeedDialEntry,SpeedDialEntry_var > SpeedDialEntry_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SpeedDialEntry;

    struct SpeedDialSet {
      typedef _CORBA_ConstrType_Variable_Var<SpeedDialSet> _var_type;

      
      ::CORBA::String_member setName;

      ::CORBA::Boolean isSystem;

      ::CORBA::Long profileID;

      ::CORBA::Long operatorID;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SpeedDialSet::_var_type SpeedDialSet_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SpeedDialSet,SpeedDialSet_var > SpeedDialSet_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SpeedDialSet;

    enum EUserSetTypeMatch { PROFILE, USER, COMBINED /*, __max_EUserSetTypeMatch=0xffffffff */ };
    typedef EUserSetTypeMatch& EUserSetTypeMatch_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EUserSetTypeMatch;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SpeedDialList;

    class SpeedDialList_var;

    class SpeedDialList : public _CORBA_Unbounded_Sequence< SpeedDialEntry >  {
    public:
      typedef SpeedDialList_var _var_type;
      inline SpeedDialList() {}
      inline SpeedDialList(const SpeedDialList& _s)
        : _CORBA_Unbounded_Sequence< SpeedDialEntry > (_s) {}

      inline SpeedDialList(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< SpeedDialEntry > (_max) {}
      inline SpeedDialList(_CORBA_ULong _max, _CORBA_ULong _len, SpeedDialEntry* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< SpeedDialEntry > (_max, _len, _val, _rel) {}

    

      inline SpeedDialList& operator = (const SpeedDialList& _s) {
        _CORBA_Unbounded_Sequence< SpeedDialEntry > ::operator=(_s);
        return *this;
      }
    };

    class SpeedDialList_out;

    class SpeedDialList_var {
    public:
      inline SpeedDialList_var() : _pd_seq(0) {}
      inline SpeedDialList_var(SpeedDialList* _s) : _pd_seq(_s) {}
      inline SpeedDialList_var(const SpeedDialList_var& _s) {
        if( _s._pd_seq )  _pd_seq = new SpeedDialList(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~SpeedDialList_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline SpeedDialList_var& operator = (SpeedDialList* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline SpeedDialList_var& operator = (const SpeedDialList_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new SpeedDialList;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline SpeedDialEntry& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline SpeedDialList* operator -> () { return _pd_seq; }
      inline const SpeedDialList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator SpeedDialList& () const { return *_pd_seq; }
#else
      inline operator const SpeedDialList& () const { return *_pd_seq; }
      inline operator SpeedDialList& () { return *_pd_seq; }
#endif
        
      inline const SpeedDialList& in() const { return *_pd_seq; }
      inline SpeedDialList&       inout()    { return *_pd_seq; }
      inline SpeedDialList*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline SpeedDialList* _retn() { SpeedDialList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class SpeedDialList_out;
      
    private:
      SpeedDialList* _pd_seq;
    };

    class SpeedDialList_out {
    public:
      inline SpeedDialList_out(SpeedDialList*& _s) : _data(_s) { _data = 0; }
      inline SpeedDialList_out(SpeedDialList_var& _s)
        : _data(_s._pd_seq) { _s = (SpeedDialList*) 0; }
      inline SpeedDialList_out(const SpeedDialList_out& _s) : _data(_s._data) {}
      inline SpeedDialList_out& operator = (const SpeedDialList_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline SpeedDialList_out& operator = (SpeedDialList* _s) {
        _data = _s;
        return *this;
      }
      inline operator SpeedDialList*&()  { return _data; }
      inline SpeedDialList*& ptr()       { return _data; }
      inline SpeedDialList* operator->() { return _data; }

      inline SpeedDialEntry& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      SpeedDialList*& _data;

    private:
      SpeedDialList_out();
      SpeedDialList_out& operator=(const SpeedDialList_var&);
    };

    struct SpeedDialUpdateNotification {
      typedef _CORBA_ConstrType_Variable_Var<SpeedDialUpdateNotification> _var_type;

      
      ::CORBA::String_member sessionID;

      SpeedDialEntry updateEntry;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SpeedDialUpdateNotification::_var_type SpeedDialUpdateNotification_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SpeedDialUpdateNotification,SpeedDialUpdateNotification_var > SpeedDialUpdateNotification_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SpeedDialUpdateNotification;

  
  };

  class _objref_IRadioCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    IRadioCorbaDef::CallList* getCallList(::CORBA::ULong consoleID);
    IRadioCorbaDef::CallDetailsType* getCallDetails(::CORBA::Long callID, ::CORBA::ULong consoleID);
    IRadioCorbaDef::ECallCategory getCallCategory(::CORBA::Long callID, ::CORBA::ULong consoleID);
    char* getCallText(::CORBA::Long callID, ::CORBA::ULong consoleID);
    void sendSDSMessage(const char* trainITSI, const ::TA_Base_Bus::IRadioCorbaDef::MessageDataType& messageData);
    void sendData(const char* ITSI, const ::TA_Base_Bus::IRadioCorbaDef::CircuitDataType& data, ::CORBA::Boolean useXON, const char* sessionID);
    void cancelSendData(const char* ITSI);
    void addCallDriverRequest(::CORBA::Octet trainID, const char* trainTSI);
    void removeCallDriverRequest(::CORBA::Octet trainID);
    ::CORBA::Boolean inFallback();
    void resetConnection();
    IRadioCorbaDef::SubscriberList* getGroupSubscribers();
    IRadioCorbaDef::SubscriberList* getPatchSubscribers();
    IRadioCorbaDef::SubscriberList* getIndividualSubscribers();
    IRadioCorbaDef::SubscriberDetails* getSubscriberDetails(const char* TSI);
    IRadioCorbaDef::SubscriberList* getGroupMembers(const char* TSI);
    IRadioCorbaDef::SubscriberList* getPatchMembers(const char* TSI);
    IRadioCorbaDef::SubscriberList* searchSubscriber(const char* searchTxt);
    char* getUserSetName(const char* sessionID, ::TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch typeMatch);
    IRadioCorbaDef::SpeedDialList* getSpeedDialSet(const char* setName);
    void updateSpeedDialSet(const ::TA_Base_Bus::IRadioCorbaDef::SpeedDialSet& setDetails, const char* sessionID);
    void updateSpeedDial(const char* setName, const ::TA_Base_Bus::IRadioCorbaDef::SpeedDialEntry& newEntry, const char* sessionID);

    inline _objref_IRadioCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_IRadioCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IRadioCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IRadioCorbaDef(const _objref_IRadioCorbaDef&);
    _objref_IRadioCorbaDef& operator = (const _objref_IRadioCorbaDef&);
    // not implemented

    friend class IRadioCorbaDef;
  };

  class _pof_IRadioCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IRadioCorbaDef() : _OMNI_NS(proxyObjectFactory)(IRadioCorbaDef::_PD_repoId) {}
    virtual ~_pof_IRadioCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IRadioCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IRadioCorbaDef();

    virtual IRadioCorbaDef::CallList* getCallList(::CORBA::ULong consoleID) = 0;
    virtual IRadioCorbaDef::CallDetailsType* getCallDetails(::CORBA::Long callID, ::CORBA::ULong consoleID) = 0;
    virtual IRadioCorbaDef::ECallCategory getCallCategory(::CORBA::Long callID, ::CORBA::ULong consoleID) = 0;
    virtual char* getCallText(::CORBA::Long callID, ::CORBA::ULong consoleID) = 0;
    virtual void sendSDSMessage(const char* trainITSI, const ::TA_Base_Bus::IRadioCorbaDef::MessageDataType& messageData) = 0;
    virtual void sendData(const char* ITSI, const ::TA_Base_Bus::IRadioCorbaDef::CircuitDataType& data, ::CORBA::Boolean useXON, const char* sessionID) = 0;
    virtual void cancelSendData(const char* ITSI) = 0;
    virtual void addCallDriverRequest(::CORBA::Octet trainID, const char* trainTSI) = 0;
    virtual void removeCallDriverRequest(::CORBA::Octet trainID) = 0;
    virtual ::CORBA::Boolean inFallback() = 0;
    virtual void resetConnection() = 0;
    virtual IRadioCorbaDef::SubscriberList* getGroupSubscribers() = 0;
    virtual IRadioCorbaDef::SubscriberList* getPatchSubscribers() = 0;
    virtual IRadioCorbaDef::SubscriberList* getIndividualSubscribers() = 0;
    virtual IRadioCorbaDef::SubscriberDetails* getSubscriberDetails(const char* TSI) = 0;
    virtual IRadioCorbaDef::SubscriberList* getGroupMembers(const char* TSI) = 0;
    virtual IRadioCorbaDef::SubscriberList* getPatchMembers(const char* TSI) = 0;
    virtual IRadioCorbaDef::SubscriberList* searchSubscriber(const char* searchTxt) = 0;
    virtual char* getUserSetName(const char* sessionID, ::TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch typeMatch) = 0;
    virtual IRadioCorbaDef::SpeedDialList* getSpeedDialSet(const char* setName) = 0;
    virtual void updateSpeedDialSet(const ::TA_Base_Bus::IRadioCorbaDef::SpeedDialSet& setDetails, const char* sessionID) = 0;
    virtual void updateSpeedDial(const char* setName, const ::TA_Base_Bus::IRadioCorbaDef::SpeedDialEntry& newEntry, const char* sessionID) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IRadioCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class IRadioCorbaDef :
    public virtual TA_Base_Bus::_impl_IRadioCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IRadioCorbaDef();

    inline ::TA_Base_Bus::IRadioCorbaDef_ptr _this() {
      return (::TA_Base_Bus::IRadioCorbaDef_ptr) _do_this(::TA_Base_Bus::IRadioCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::invalidCallIDException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::invalidCallIDException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::invalidCallIDException*& _sp);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::ECallStatusType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::ECallStatusType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::SessionUpdate) {
    _e = (TA_Base_Bus::IRadioCorbaDef::ECallStatusType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallStatusType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallStatusType& _s);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::ECallCategory _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::ECallCategory& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::CallDriver) {
    _e = (TA_Base_Bus::IRadioCorbaDef::ECallCategory) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallCategory _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallCategory& _s);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::EMonitorStatusType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::EMonitorStatusType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::Stopped) {
    _e = (TA_Base_Bus::IRadioCorbaDef::EMonitorStatusType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EMonitorStatusType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EMonitorStatusType& _s);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::ECallSource _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::ECallSource& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::OutgoingCall) {
    _e = (TA_Base_Bus::IRadioCorbaDef::ECallSource) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallSource _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallSource& _s);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::ECallType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::ECallType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::CircuitModeDataCall) {
    _e = (TA_Base_Bus::IRadioCorbaDef::ECallType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ECallType& _s);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::EPTTState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::EPTTState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::PTT_TIMEOUT) {
    _e = (TA_Base_Bus::IRadioCorbaDef::EPTTState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EPTTState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EPTTState& _s);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::EControlConnectionStatus _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::EControlConnectionStatus& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::ConnectToSecondary) {
    _e = (TA_Base_Bus::IRadioCorbaDef::EControlConnectionStatus) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EControlConnectionStatus _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EControlConnectionStatus& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallParticipant& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallParticipant* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallParticipant*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallParticipant*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallParticipantList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallParticipantList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallParticipantList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallParticipantList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallDetailsType& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallDetailsType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallDetailsType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallDetailsType*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::MonitoredCallDetailsType& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::MonitoredCallDetailsType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::MonitoredCallDetailsType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::MonitoredCallDetailsType*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallStatusEvent& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallStatusEvent* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallStatusEvent*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallStatusEvent*& _sp);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::ESessionUpdateReason _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::ESessionUpdateReason& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::SessionLost) {
    _e = (TA_Base_Bus::IRadioCorbaDef::ESessionUpdateReason) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ESessionUpdateReason _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::ESessionUpdateReason& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SessionUpdateNotification& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SessionUpdateNotification* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SessionUpdateNotification*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SessionUpdateNotification*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CallList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CallList*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::MessageDataType& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::MessageDataType* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::MessageDataType*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::MessageDataType*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SDSNotificationEvent& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SDSNotificationEvent* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SDSNotificationEvent*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SDSNotificationEvent*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::PTTStatusNotification& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::PTTStatusNotification* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::PTTStatusNotification*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::PTTStatusNotification*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::dataCallInProgressException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::dataCallInProgressException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::dataCallInProgressException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::dataCallNotInProgressException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::dataCallNotInProgressException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::dataCallNotInProgressException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CircuitDataType& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CircuitDataType* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::CircuitDataType*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::CircuitDataType*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SendDataNotification& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SendDataNotification* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SendDataNotification*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SendDataNotification*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioDirectoryError& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioDirectoryError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioDirectoryError*& _sp);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::SubscriberType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::SubscriberType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::PATCH_SUBSCRIBER) {
    _e = (TA_Base_Bus::IRadioCorbaDef::SubscriberType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberType& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioInvalidSubscriberException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioInvalidSubscriberException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::radioInvalidSubscriberException*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SubscriberDetails& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberDetails* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberDetails*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SubscriberDetails*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SubscriberList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SubscriberList*& _sp);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::SubscriberNotificationType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::SubscriberNotificationType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::SCAN_SUBSCRIBERS) {
    _e = (TA_Base_Bus::IRadioCorbaDef::SubscriberNotificationType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberNotificationType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberNotificationType& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SubscriberDetailsNotification& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberDetailsNotification* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SubscriberDetailsNotification*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SubscriberDetailsNotification*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::invalidSpeedDialSetException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::invalidSpeedDialSetException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::invalidSpeedDialSetException*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialEntry& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialEntry* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialEntry*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialEntry*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialSet& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialSet* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialSet*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialSet*& _sp);

inline void operator >>=(TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IRadioCorbaDef::COMBINED) {
    _e = (TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::EUserSetTypeMatch& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialList& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialUpdateNotification& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialUpdateNotification* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef::SpeedDialUpdateNotification*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IRadioCorbaDef::SpeedDialUpdateNotification*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IRadioCorbaDef_ptr& _s);



inline void
TA_Base_Bus::IRadioCorbaDef::_marshalObjRef(::TA_Base_Bus::IRadioCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_IRadioCorbaDef
#endif

#endif  // __IRadioCorbaDef_hh__

