// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ScadaCorbaTypes_hh__
#define __ScadaCorbaTypes_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

  _CORBA_MODULE ScadaCorbaTypes

  _CORBA_MODULE_BEG

    _CORBA_MODULE_VARINT const ::CORBA::ULong BULK_POLLED_MAX_IDLE_TIME_MSECS _init_in_decl_( = 120000U );

    class NotWriteable : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline NotWriteable() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      NotWriteable(const NotWriteable&);
      NotWriteable(const char* i_reason);
      NotWriteable& operator=(const NotWriteable&);
      virtual ~NotWriteable();
      virtual void _raise() const;
      static NotWriteable* _downcast(::CORBA::Exception*);
      static const NotWriteable* _downcast(const ::CORBA::Exception*);
      static inline NotWriteable* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NotWriteable;

    class PersistenceFailed : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline PersistenceFailed() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      PersistenceFailed(const PersistenceFailed&);
      PersistenceFailed(const char* i_reason);
      PersistenceFailed& operator=(const PersistenceFailed&);
      virtual ~PersistenceFailed();
      virtual void _raise() const;
      static PersistenceFailed* _downcast(::CORBA::Exception*);
      static const PersistenceFailed* _downcast(const ::CORBA::Exception*);
      static inline PersistenceFailed* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PersistenceFailed;

    struct STimeStamp {
      typedef _CORBA_ConstrType_Fix_Var<STimeStamp> _var_type;

      
      ::CORBA::Long seconds;

      ::CORBA::UShort milliseconds;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef STimeStamp::_var_type STimeStamp_var;

    typedef STimeStamp& STimeStamp_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_STimeStamp;

    enum EControlOperation { ControlNoOperation, ControlSelect, ControlExecute, ControlCancel /*, __max_EControlOperation=0xffffffff */ };
    typedef EControlOperation& EControlOperation_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EControlOperation;

    enum EQuality { QualityBadNoSpecificReason, QualityBadConfigurationError, QualityBadNotConnected, QualityBadDeviceFailure, QualityBadSensorFailure, QualityBadLastKnownValue, QualityBadCommFailure, QualityBadOutOfService, QualityUncertainNoSpecificReason, QualityUncertainLastUsableValue, QualityUncertainSensorNotAccurate, QualityUncertainEngUnitExceeded, QualityUncertainSubNormal, QualityGoodNoSpecificReason, QualityGoodLocalOverride /*, __max_EQuality=0xffffffff */ };
    typedef EQuality& EQuality_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EQuality;

    enum ETagType { AnalogueTagType, BooleanTagType, EnumTagType, TextTagType /*, __max_ETagType=0xffffffff */ };
    typedef ETagType& ETagType_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ETagType;

    struct SAnalogueTag {
      typedef _CORBA_ConstrType_Fix_Var<SAnalogueTag> _var_type;

      
      ::CORBA::Double value;

      EQuality quality;

      STimeStamp timeStamp;

      EControlOperation controlOperation;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SAnalogueTag::_var_type SAnalogueTag_var;

    typedef SAnalogueTag& SAnalogueTag_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SAnalogueTag;

    struct SBooleanTag {
      typedef _CORBA_ConstrType_Fix_Var<SBooleanTag> _var_type;

      
      ::CORBA::Boolean value;

      EQuality quality;

      STimeStamp timeStamp;

      EControlOperation controlOperation;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SBooleanTag::_var_type SBooleanTag_var;

    typedef SBooleanTag& SBooleanTag_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SBooleanTag;

    struct SEnumTag {
      typedef _CORBA_ConstrType_Fix_Var<SEnumTag> _var_type;

      
      ::CORBA::ULong value;

      EQuality quality;

      STimeStamp timeStamp;

      EControlOperation controlOperation;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SEnumTag::_var_type SEnumTag_var;

    typedef SEnumTag& SEnumTag_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SEnumTag;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ByteSequence;

    class ByteSequence_var;

    class ByteSequence : public _CORBA_Unbounded_Sequence_Octet {
    public:
      typedef ByteSequence_var _var_type;
      inline ByteSequence() {}
      inline ByteSequence(const ByteSequence& _s)
        : _CORBA_Unbounded_Sequence_Octet(_s) {}

      inline ByteSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_Octet(_max) {}
      inline ByteSequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

    

      inline ByteSequence& operator = (const ByteSequence& _s) {
        _CORBA_Unbounded_Sequence_Octet::operator=(_s);
        return *this;
      }
    };

    class ByteSequence_out;

    class ByteSequence_var {
    public:
      inline ByteSequence_var() : _pd_seq(0) {}
      inline ByteSequence_var(ByteSequence* _s) : _pd_seq(_s) {}
      inline ByteSequence_var(const ByteSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new ByteSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~ByteSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline ByteSequence_var& operator = (ByteSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ByteSequence_var& operator = (const ByteSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new ByteSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ByteSequence* operator -> () { return _pd_seq; }
      inline const ByteSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ByteSequence& () const { return *_pd_seq; }
#else
      inline operator const ByteSequence& () const { return *_pd_seq; }
      inline operator ByteSequence& () { return *_pd_seq; }
#endif
        
      inline const ByteSequence& in() const { return *_pd_seq; }
      inline ByteSequence&       inout()    { return *_pd_seq; }
      inline ByteSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ByteSequence* _retn() { ByteSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ByteSequence_out;
      
    private:
      ByteSequence* _pd_seq;
    };

    class ByteSequence_out {
    public:
      inline ByteSequence_out(ByteSequence*& _s) : _data(_s) { _data = 0; }
      inline ByteSequence_out(ByteSequence_var& _s)
        : _data(_s._pd_seq) { _s = (ByteSequence*) 0; }
      inline ByteSequence_out(const ByteSequence_out& _s) : _data(_s._data) {}
      inline ByteSequence_out& operator = (const ByteSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ByteSequence_out& operator = (ByteSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator ByteSequence*&()  { return _data; }
      inline ByteSequence*& ptr()       { return _data; }
      inline ByteSequence* operator->() { return _data; }

      inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ByteSequence*& _data;

    private:
      ByteSequence_out();
      ByteSequence_out& operator=(const ByteSequence_var&);
    };

    struct STextTag {
      typedef _CORBA_ConstrType_Variable_Var<STextTag> _var_type;

      
      ByteSequence value;

      EQuality quality;

      STimeStamp timeStamp;

      EControlOperation controlOperation;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef STextTag::_var_type STextTag_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< STextTag,STextTag_var > STextTag_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_STextTag;

    class UTag {
    public:

      typedef _CORBA_ConstrType_Variable_Var<UTag> _var_type;

      

      UTag(): _pd__initialised(0) {
        
      }
      
      UTag(const UTag& _value) {
        _pd__initialised = _value._pd__initialised;
        switch(_value._pd__d) {
          case AnalogueTagType: analogueTag(_value._pd_analogueTag); break;

          case BooleanTagType: booleanTag(_value._pd_booleanTag); break;

          case EnumTagType: enumTag(_value._pd_enumTag); break;

          case TextTagType: textTag(_value._pd_textTag); break;

            default: break;

        
        }
        _pd__d = _value._pd__d;
    
      }

      ~UTag() {}

      UTag& operator=(const UTag& _value) {
        _pd__initialised = _value._pd__initialised;
        switch(_value._pd__d) {
          case AnalogueTagType: analogueTag(_value._pd_analogueTag); break;

          case BooleanTagType: booleanTag(_value._pd_booleanTag); break;

          case EnumTagType: enumTag(_value._pd_enumTag); break;

          case TextTagType: textTag(_value._pd_textTag); break;

            default: break;

        
        }
        _pd__d = _value._pd__d;
    
        return *this;
      }

      ETagType _d() const { return _pd__d;}
      void _d(ETagType _value){
        // illegal to set discriminator before making a member active
        if (!_pd__initialised)
          OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

        if (_value == _pd__d) return; // no change

        switch (_pd__d){
          case AnalogueTagType: goto fail;
          case BooleanTagType: goto fail;
          case EnumTagType: goto fail;
          case TextTagType: goto fail;
          default: goto fail;

        };
        

        fail:
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


    
      }

      

      const SAnalogueTag &analogueTag () const { return _pd_analogueTag; }
      SAnalogueTag &analogueTag () { return _pd_analogueTag; }
      void analogueTag (const SAnalogueTag& _value) {
        _pd__initialised = 1;
        _pd__d = AnalogueTagType;
        _pd__default = 0;
        _pd_analogueTag = _value;
      }

      const SBooleanTag &booleanTag () const { return _pd_booleanTag; }
      SBooleanTag &booleanTag () { return _pd_booleanTag; }
      void booleanTag (const SBooleanTag& _value) {
        _pd__initialised = 1;
        _pd__d = BooleanTagType;
        _pd__default = 0;
        _pd_booleanTag = _value;
      }

      const SEnumTag &enumTag () const { return _pd_enumTag; }
      SEnumTag &enumTag () { return _pd_enumTag; }
      void enumTag (const SEnumTag& _value) {
        _pd__initialised = 1;
        _pd__d = EnumTagType;
        _pd__default = 0;
        _pd_enumTag = _value;
      }

      const STextTag &textTag () const { return _pd_textTag; }
      STextTag &textTag () { return _pd_textTag; }
      void textTag (const STextTag& _value) {
        _pd__initialised = 1;
        _pd__d = TextTagType;
        _pd__default = 0;
        _pd_textTag = _value;
      }

    
      
      void operator>>= (cdrStream&) const;
      void operator<<= (cdrStream&);

    private:
      ETagType _pd__d;
      _CORBA_Boolean _pd__default;
      _CORBA_Boolean _pd__initialised;

      
      SAnalogueTag _pd_analogueTag;

      SBooleanTag _pd_booleanTag;

      SEnumTag _pd_enumTag;

      STextTag _pd_textTag;

    
    };

    typedef UTag::_var_type UTag_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< UTag,UTag_var > UTag_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UTag;

    enum EInputInhibitState { NoInputInhibit, InhibitScan, InhibitAlarm, InhibitMmsAlarm /*, __max_EInputInhibitState=0xffffffff */ };
    typedef EInputInhibitState& EInputInhibitState_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EInputInhibitState;

    enum EOutputInhibitState { NoOutputInhibit, InhibitControl /*, __max_EOutputInhibitState=0xffffffff */ };
    typedef EOutputInhibitState& EOutputInhibitState_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EOutputInhibitState;

    struct SInhibitState {
      typedef _CORBA_ConstrType_Fix_Var<SInhibitState> _var_type;

      
      EInputInhibitState inputInhibit;

      EOutputInhibitState outputInhibit;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SInhibitState::_var_type SInhibitState_var;

    typedef SInhibitState& SInhibitState_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SInhibitState;

    struct SLastOperatorInfo {
      typedef _CORBA_ConstrType_Variable_Var<SLastOperatorInfo> _var_type;

      
      ::CORBA::String_member sessionID;

      STimeStamp timeStamp;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SLastOperatorInfo::_var_type SLastOperatorInfo_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SLastOperatorInfo,SLastOperatorInfo_var > SLastOperatorInfo_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SLastOperatorInfo;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_KeySequence;

    class KeySequence_var;

    class KeySequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef KeySequence_var _var_type;
      inline KeySequence() {}
      inline KeySequence(const KeySequence& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline KeySequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline KeySequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline KeySequence& operator = (const KeySequence& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class KeySequence_out;

    class KeySequence_var {
    public:
      inline KeySequence_var() : _pd_seq(0) {}
      inline KeySequence_var(KeySequence* _s) : _pd_seq(_s) {}
      inline KeySequence_var(const KeySequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new KeySequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~KeySequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline KeySequence_var& operator = (KeySequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline KeySequence_var& operator = (const KeySequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new KeySequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline KeySequence* operator -> () { return _pd_seq; }
      inline const KeySequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator KeySequence& () const { return *_pd_seq; }
#else
      inline operator const KeySequence& () const { return *_pd_seq; }
      inline operator KeySequence& () { return *_pd_seq; }
#endif
        
      inline const KeySequence& in() const { return *_pd_seq; }
      inline KeySequence&       inout()    { return *_pd_seq; }
      inline KeySequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline KeySequence* _retn() { KeySequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class KeySequence_out;
      
    private:
      KeySequence* _pd_seq;
    };

    class KeySequence_out {
    public:
      inline KeySequence_out(KeySequence*& _s) : _data(_s) { _data = 0; }
      inline KeySequence_out(KeySequence_var& _s)
        : _data(_s._pd_seq) { _s = (KeySequence*) 0; }
      inline KeySequence_out(const KeySequence_out& _s) : _data(_s._data) {}
      inline KeySequence_out& operator = (const KeySequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline KeySequence_out& operator = (KeySequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator KeySequence*&()  { return _data; }
      inline KeySequence*& ptr()       { return _data; }
      inline KeySequence* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      KeySequence*& _data;

    private:
      KeySequence_out();
      KeySequence_out& operator=(const KeySequence_var&);
    };

    struct SCorbaName {
      typedef _CORBA_ConstrType_Variable_Var<SCorbaName> _var_type;

      
      ::CORBA::ULong entityKey;

      ::CORBA::ULong locationKey;

      ::CORBA::String_member objectName;

      ::CORBA::String_member agentName;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SCorbaName::_var_type SCorbaName_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SCorbaName,SCorbaName_var > SCorbaName_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SCorbaName;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CorbaNameSequence;

    class CorbaNameSequence_var;

    class CorbaNameSequence : public _CORBA_Unbounded_Sequence< SCorbaName >  {
    public:
      typedef CorbaNameSequence_var _var_type;
      inline CorbaNameSequence() {}
      inline CorbaNameSequence(const CorbaNameSequence& _s)
        : _CORBA_Unbounded_Sequence< SCorbaName > (_s) {}

      inline CorbaNameSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< SCorbaName > (_max) {}
      inline CorbaNameSequence(_CORBA_ULong _max, _CORBA_ULong _len, SCorbaName* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< SCorbaName > (_max, _len, _val, _rel) {}

    

      inline CorbaNameSequence& operator = (const CorbaNameSequence& _s) {
        _CORBA_Unbounded_Sequence< SCorbaName > ::operator=(_s);
        return *this;
      }
    };

    class CorbaNameSequence_out;

    class CorbaNameSequence_var {
    public:
      inline CorbaNameSequence_var() : _pd_seq(0) {}
      inline CorbaNameSequence_var(CorbaNameSequence* _s) : _pd_seq(_s) {}
      inline CorbaNameSequence_var(const CorbaNameSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CorbaNameSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CorbaNameSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CorbaNameSequence_var& operator = (CorbaNameSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CorbaNameSequence_var& operator = (const CorbaNameSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CorbaNameSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline SCorbaName& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CorbaNameSequence* operator -> () { return _pd_seq; }
      inline const CorbaNameSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CorbaNameSequence& () const { return *_pd_seq; }
#else
      inline operator const CorbaNameSequence& () const { return *_pd_seq; }
      inline operator CorbaNameSequence& () { return *_pd_seq; }
#endif
        
      inline const CorbaNameSequence& in() const { return *_pd_seq; }
      inline CorbaNameSequence&       inout()    { return *_pd_seq; }
      inline CorbaNameSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CorbaNameSequence* _retn() { CorbaNameSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CorbaNameSequence_out;
      
    private:
      CorbaNameSequence* _pd_seq;
    };

    class CorbaNameSequence_out {
    public:
      inline CorbaNameSequence_out(CorbaNameSequence*& _s) : _data(_s) { _data = 0; }
      inline CorbaNameSequence_out(CorbaNameSequence_var& _s)
        : _data(_s._pd_seq) { _s = (CorbaNameSequence*) 0; }
      inline CorbaNameSequence_out(const CorbaNameSequence_out& _s) : _data(_s._data) {}
      inline CorbaNameSequence_out& operator = (const CorbaNameSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CorbaNameSequence_out& operator = (CorbaNameSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator CorbaNameSequence*&()  { return _data; }
      inline CorbaNameSequence*& ptr()       { return _data; }
      inline CorbaNameSequence* operator->() { return _data; }

      inline SCorbaName& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CorbaNameSequence*& _data;

    private:
      CorbaNameSequence_out();
      CorbaNameSequence_out& operator=(const CorbaNameSequence_var&);
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  _CORBA_MODULE ScadaCorbaTypes
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

  _CORBA_MODULE ScadaCorbaTypes
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::NotWriteable& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::NotWriteable* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::NotWriteable*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::PersistenceFailed& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::PersistenceFailed* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::PersistenceFailed*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::STimeStamp& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::STimeStamp* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::STimeStamp*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::STimeStamp*& _sp);

inline void operator >>=(TA_Base_Bus::ScadaCorbaTypes::EControlOperation _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ScadaCorbaTypes::EControlOperation& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ScadaCorbaTypes::ControlCancel) {
    _e = (TA_Base_Bus::ScadaCorbaTypes::EControlOperation) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EControlOperation _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EControlOperation& _s);

inline void operator >>=(TA_Base_Bus::ScadaCorbaTypes::EQuality _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ScadaCorbaTypes::EQuality& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ScadaCorbaTypes::QualityGoodLocalOverride) {
    _e = (TA_Base_Bus::ScadaCorbaTypes::EQuality) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EQuality _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EQuality& _s);

inline void operator >>=(TA_Base_Bus::ScadaCorbaTypes::ETagType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ScadaCorbaTypes::ETagType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ScadaCorbaTypes::TextTagType) {
    _e = (TA_Base_Bus::ScadaCorbaTypes::ETagType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::ETagType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::ETagType& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SAnalogueTag& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SAnalogueTag* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SAnalogueTag*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SAnalogueTag*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SBooleanTag& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SBooleanTag* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SBooleanTag*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SBooleanTag*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SEnumTag& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SEnumTag* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SEnumTag*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SEnumTag*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::ByteSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::ByteSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::ByteSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::ByteSequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::STextTag& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::STextTag* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::STextTag*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::STextTag*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::UTag& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::UTag* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::UTag*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::UTag*& _sp);

inline void operator >>=(TA_Base_Bus::ScadaCorbaTypes::EInputInhibitState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ScadaCorbaTypes::EInputInhibitState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ScadaCorbaTypes::InhibitMmsAlarm) {
    _e = (TA_Base_Bus::ScadaCorbaTypes::EInputInhibitState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EInputInhibitState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EInputInhibitState& _s);

inline void operator >>=(TA_Base_Bus::ScadaCorbaTypes::EOutputInhibitState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::ScadaCorbaTypes::EOutputInhibitState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::ScadaCorbaTypes::InhibitControl) {
    _e = (TA_Base_Bus::ScadaCorbaTypes::EOutputInhibitState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EOutputInhibitState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::EOutputInhibitState& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SInhibitState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SInhibitState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SInhibitState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SInhibitState*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SLastOperatorInfo& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SLastOperatorInfo* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SLastOperatorInfo*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SLastOperatorInfo*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::KeySequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::KeySequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::KeySequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::KeySequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SCorbaName& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SCorbaName* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::SCorbaName*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::SCorbaName*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::CorbaNameSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::CorbaNameSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::ScadaCorbaTypes::CorbaNameSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::ScadaCorbaTypes::CorbaNameSequence*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ScadaCorbaTypes
#endif

#endif  // __ScadaCorbaTypes_hh__

