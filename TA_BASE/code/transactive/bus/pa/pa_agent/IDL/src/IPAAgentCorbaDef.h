// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __IPAAgentCorbaDef_hh__
#define __IPAAgentCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <core/exceptions/IDL/src/CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mIPAAgentCorbaDef__
#define __TA__Base__Bus_mIPAAgentCorbaDef__

  class IPAAgentCorbaDef;
  class _objref_IPAAgentCorbaDef;
  class _impl_IPAAgentCorbaDef;
  
  typedef _objref_IPAAgentCorbaDef* IPAAgentCorbaDef_ptr;
  typedef IPAAgentCorbaDef_ptr IPAAgentCorbaDefRef;

  class IPAAgentCorbaDef_Helper {
  public:
    typedef IPAAgentCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IPAAgentCorbaDef, IPAAgentCorbaDef_Helper> IPAAgentCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IPAAgentCorbaDef,IPAAgentCorbaDef_Helper > IPAAgentCorbaDef_out;

#endif

  // interface IPAAgentCorbaDef
  class IPAAgentCorbaDef {
  public:
    // Declarations for this interface type.
    typedef IPAAgentCorbaDef_ptr _ptr_type;
    typedef IPAAgentCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum EPaErrorId { eBroadcastIdNotFound, eFepcCommsFailure, eBroadcastLimitReached, eBadParameter, eAccessDenied, eTrainAgentCommsFailure, eBroadcastStationMusicFailure, eSetAdhocTypeFailure, eZoneNotMapped, ePaErrorIdEndMark /*, __max_EPaErrorId=0xffffffff */ };
    typedef EPaErrorId& EPaErrorId_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPaErrorId;

    class PaErrorException : public ::CORBA::UserException {
    public:
      
      EPaErrorId eErrorId;

      ::CORBA::String_member strWhat;

    

      inline PaErrorException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      PaErrorException(const PaErrorException&);
      PaErrorException(EPaErrorId i_eErrorId, const char* i_strWhat);
      PaErrorException& operator=(const PaErrorException&);
      virtual ~PaErrorException();
      virtual void _raise() const;
      static PaErrorException* _downcast(::CORBA::Exception*);
      static const PaErrorException* _downcast(const ::CORBA::Exception*);
      static inline PaErrorException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PaErrorException;

    enum EBroadcastType { StationMusic, StationLive, StationDva, StationRecording, OccPlayback, TrainLive, TrainDva, ZoneMonitoring /*, __max_EBroadcastType=0xffffffff */ };
    typedef EBroadcastType& EBroadcastType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EBroadcastType;

    enum EBroadcastState { Creation, Execution, Runtime, Aborting, Termination, PendingRemoval /*, __max_EBroadcastState=0xffffffff */ };
    typedef EBroadcastState& EBroadcastState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EBroadcastState;

    enum EBackupKeyState { BackupUnknow, BackupLock, BackupUnlock /*, __max_EBackupKeyState=0xffffffff */ };
    typedef EBackupKeyState& EBackupKeyState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EBackupKeyState;

    enum EGlobalState { GLOBAL_STATE_NO_FAILURE, GLOBAL_STATE_NO_FREE_ANNOUNCE_ID, GLOBAL_STATE_NO_FREE_MESSAGE_SEQ_ID, GLOBAL_STATE_NO_FREE_DVA_CHANNEL, GLOBAL_STATE_RECORDING_SOURCE_BUSY, GLOBAL_STATE_MESSAGE_BUSY_RECORDING, GLOBAL_STATE_MESSAGE_BUSY_BROADCASTING, GLOBAL_STATE_COMMS_FAILURE_TRAIN_AGENT, GLOBAL_STATE_COMMS_FAILURE_TIS_AGENT, GLOBAL_STATE_COMMS_FAILURE_AUTHENTICATION_AGENT, GLOBAL_STATE_HARDWARE_FAILURE_TRAIN_AGENT, GLOBAL_STATE_HARDWARE_FAILURE_TIS_AGENT, GLOBAL_STATE_HARDWARE_FAILURE_PA_AGENT, GLOBAL_STATE_NO_PERMISSION_FAILURE_TRAIN_AGENT, GLOBAL_STATE_NO_PERMISSION_FAILURE_TIS_AGENT, GLOBAL_STATE_INVALID_PROTOCOL_FAILURE_TRAIN_AGENT, GLOBAL_STATE_INVALID_PROTOCOL_FAILURE_TIS_AGENT, GLOBAL_STATE_INVALID_PROTOCOL_FAILURE_PA_AGENT, GLOBAL_STATE_PUBLIC_DVA_SET_VERSION_CONFLICT, GLOBAL_STATE_RADIO_CALL_RESET, GLOBAL_STATE_STATIC_GROUP_IN_USE, GLOBAL_STATE_SCHEDULE_DVA_FULL, GLOBAL_STATE_END_MARK /*, __max_EGlobalState=0xffffffff */ };
    typedef EGlobalState& EGlobalState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EGlobalState;

    enum ELocalState { LOCAL_STATE_IN_PROGRESS, LOCAL_STATE_IN_PROGRESS_DWELL_TIME, LOCAL_STATE_CONNECTING, LOCAL_STATE_TRAIN_READY, LOCAL_STATE_CONTINUE_LIVE_ANNOUNCEMENT_REQUIRED, LOCAL_STATE_COMPLETED, LOCAL_STATE_ABORTED, LOCAL_STATE_FAILED_CYCLE, LOCAL_STATE_FAILED_ZONE, LOCAL_STATE_FAILED_OVERRIDDEN, LOCAL_STATE_FAILED_TRAIN, LOCAL_STATE_FAILED_CONNECTION_RESET, LOCAL_STATE_FAILED_INTERRUPTED, LOCAL_STATE_FAILED_VERSION_CONFLICT, LOCAL_STATE_FAILED_INVALID_REQUEST, LOCAL_STATE_FAILED_BUSY, LOCAL_STATE_FAILED_BUSY_WITH_OVERRIDE_OPTION, LOCAL_STATE_FAILED_CONTINUE_LIVE_ANNOUNCEMENT_TIMEOUT, LOCAL_STATE_FAILED_NO_PERMISSION, LOCAL_STATE_TRAIN_FIRST_CYCLE_CANCELLED, LOCAL_STATE_FAILED_BAD_COMMAND, LOCAL_STATE_FAILED_DIFFERENT_ORIGIN, LOCAL_STATE_FAILED_DIFFERENT_VERSION, LOCAL_STATE_FAILED_NO_RESPONSE_FROM_TRAIN, LOCAL_STATE_FAILED_MPU_CHANGEOVER, LOCAL_STATE_PTT_ACTIVATED, LOCAL_STATE_IN_PROGRESS_OVERRIDDEN, LOCAL_STATE_BROADCASTING, LOCAL_STATE_FAILED_LINK_LOST, LOCAL_STATE_END_MARK /*, __max_ELocalState=0xffffffff */ };
    typedef ELocalState& ELocalState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ELocalState;

    enum EMusicType { NoMusic, LocalMusic, OccMusic /*, __max_EMusicType=0xffffffff */ };
    typedef EMusicType& EMusicType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EMusicType;

    enum EScheduleUpdateType { ScheduleCreate, ScheduleRemove, ScheduleUpdate /*, __max_EScheduleUpdateType=0xffffffff */ };
    typedef EScheduleUpdateType& EScheduleUpdateType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EScheduleUpdateType;

    static _core_attr const ::CORBA::Short PA_OCC_MIN_DVA_NUM _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_OCC_MAX_DVA_NUM _init_in_cldecl_( = 900 );

    static _core_attr const ::CORBA::Short PA_MIN_AD_HOC_DVA_ID _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_MAX_AD_HOC_DVA_ID _init_in_cldecl_( = 6 );

    static _core_attr const ::CORBA::Short PA_STN_MIN_DVA_NUM _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_STN_MAX_DVA_NUM _init_in_cldecl_( = 999 );

    static _core_attr const ::CORBA::Short PA_OCC_MIN_ZONE_ID _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_OCC_MAX_ZONE_ID _init_in_cldecl_( = 64 );

    static _core_attr const ::CORBA::Short PA_STN_MIN_ZONE_ID _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_STN_MAX_ZONE_ID _init_in_cldecl_( = 32 );

    static _core_attr const ::CORBA::Short PA_MIN_STN_ID _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_MAX_STN_ID _init_in_cldecl_( = 66 );

    static _core_attr const ::CORBA::Short PA_MIN_SCHEDULE_EVENT_ID _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::Short PA_MAX_SCHEDULE_EVENT_ID _init_in_cldecl_( = 100 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_DELETED _init_in_cldecl_( = 0 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_PRE_RECORD_EMERGENCY _init_in_cldecl_( = 1 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_AD_HOC_EMERGENCY _init_in_cldecl_( = 2 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_PRE_RECORD_NORMAL _init_in_cldecl_( = 3 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_AD_HOC_NORMAL _init_in_cldecl_( = 4 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_ATS_MSG _init_in_cldecl_( = 5 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_SPARE_A _init_in_cldecl_( = 6 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_SPARE_B _init_in_cldecl_( = 7 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_SPARE_C _init_in_cldecl_( = 8 );

    static _core_attr const ::CORBA::UShort PAS_DVA_TYPE_AD_HOC_BLANK _init_in_cldecl_( = 100 );

    static _core_attr const char * TRAIN_PA_CORBA_NAME;

    static _core_attr const char * STATION_PA_CORBA_NAME;

    static _core_attr const char * BROADCAST_ID_FILTER_STRING;

    static _core_attr const ::CORBA::UShort MAX_ADHOC_LABEL_LENGTH _init_in_cldecl_( = 32 );

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DateTime;

    typedef ::CORBA::ULong DateTime;
    typedef ::CORBA::ULong_out DateTime_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CoverageIndices;

    class CoverageIndices_var;

    class CoverageIndices : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef CoverageIndices_var _var_type;
      inline CoverageIndices() {}
      inline CoverageIndices(const CoverageIndices& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline CoverageIndices(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline CoverageIndices(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline CoverageIndices& operator = (const CoverageIndices& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class CoverageIndices_out;

    class CoverageIndices_var {
    public:
      inline CoverageIndices_var() : _pd_seq(0) {}
      inline CoverageIndices_var(CoverageIndices* _s) : _pd_seq(_s) {}
      inline CoverageIndices_var(const CoverageIndices_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CoverageIndices(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CoverageIndices_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CoverageIndices_var& operator = (CoverageIndices* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CoverageIndices_var& operator = (const CoverageIndices_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CoverageIndices;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CoverageIndices* operator -> () { return _pd_seq; }
      inline const CoverageIndices* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CoverageIndices& () const { return *_pd_seq; }
#else
      inline operator const CoverageIndices& () const { return *_pd_seq; }
      inline operator CoverageIndices& () { return *_pd_seq; }
#endif
        
      inline const CoverageIndices& in() const { return *_pd_seq; }
      inline CoverageIndices&       inout()    { return *_pd_seq; }
      inline CoverageIndices*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CoverageIndices* _retn() { CoverageIndices* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CoverageIndices_out;
      
    private:
      CoverageIndices* _pd_seq;
    };

    class CoverageIndices_out {
    public:
      inline CoverageIndices_out(CoverageIndices*& _s) : _data(_s) { _data = 0; }
      inline CoverageIndices_out(CoverageIndices_var& _s)
        : _data(_s._pd_seq) { _s = (CoverageIndices*) 0; }
      inline CoverageIndices_out(const CoverageIndices_out& _s) : _data(_s._data) {}
      inline CoverageIndices_out& operator = (const CoverageIndices_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CoverageIndices_out& operator = (CoverageIndices* _s) {
        _data = _s;
        return *this;
      }
      inline operator CoverageIndices*&()  { return _data; }
      inline CoverageIndices*& ptr()       { return _data; }
      inline CoverageIndices* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CoverageIndices*& _data;

    private:
      CoverageIndices_out();
      CoverageIndices_out& operator=(const CoverageIndices_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainCoverage;

    class TrainCoverage_var;

    class TrainCoverage : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef TrainCoverage_var _var_type;
      inline TrainCoverage() {}
      inline TrainCoverage(const TrainCoverage& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline TrainCoverage(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline TrainCoverage(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline TrainCoverage& operator = (const TrainCoverage& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class TrainCoverage_out;

    class TrainCoverage_var {
    public:
      inline TrainCoverage_var() : _pd_seq(0) {}
      inline TrainCoverage_var(TrainCoverage* _s) : _pd_seq(_s) {}
      inline TrainCoverage_var(const TrainCoverage_var& _s) {
        if( _s._pd_seq )  _pd_seq = new TrainCoverage(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~TrainCoverage_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline TrainCoverage_var& operator = (TrainCoverage* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline TrainCoverage_var& operator = (const TrainCoverage_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new TrainCoverage;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline TrainCoverage* operator -> () { return _pd_seq; }
      inline const TrainCoverage* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator TrainCoverage& () const { return *_pd_seq; }
#else
      inline operator const TrainCoverage& () const { return *_pd_seq; }
      inline operator TrainCoverage& () { return *_pd_seq; }
#endif
        
      inline const TrainCoverage& in() const { return *_pd_seq; }
      inline TrainCoverage&       inout()    { return *_pd_seq; }
      inline TrainCoverage*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline TrainCoverage* _retn() { TrainCoverage* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class TrainCoverage_out;
      
    private:
      TrainCoverage* _pd_seq;
    };

    class TrainCoverage_out {
    public:
      inline TrainCoverage_out(TrainCoverage*& _s) : _data(_s) { _data = 0; }
      inline TrainCoverage_out(TrainCoverage_var& _s)
        : _data(_s._pd_seq) { _s = (TrainCoverage*) 0; }
      inline TrainCoverage_out(const TrainCoverage_out& _s) : _data(_s._data) {}
      inline TrainCoverage_out& operator = (const TrainCoverage_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline TrainCoverage_out& operator = (TrainCoverage* _s) {
        _data = _s;
        return *this;
      }
      inline operator TrainCoverage*&()  { return _data; }
      inline TrainCoverage*& ptr()       { return _data; }
      inline TrainCoverage* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      TrainCoverage*& _data;

    private:
      TrainCoverage_out();
      TrainCoverage_out& operator=(const TrainCoverage_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ZoneCoverage;

    class ZoneCoverage_var;

    class ZoneCoverage : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef ZoneCoverage_var _var_type;
      inline ZoneCoverage() {}
      inline ZoneCoverage(const ZoneCoverage& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline ZoneCoverage(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline ZoneCoverage(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline ZoneCoverage& operator = (const ZoneCoverage& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class ZoneCoverage_out;

    class ZoneCoverage_var {
    public:
      inline ZoneCoverage_var() : _pd_seq(0) {}
      inline ZoneCoverage_var(ZoneCoverage* _s) : _pd_seq(_s) {}
      inline ZoneCoverage_var(const ZoneCoverage_var& _s) {
        if( _s._pd_seq )  _pd_seq = new ZoneCoverage(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~ZoneCoverage_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline ZoneCoverage_var& operator = (ZoneCoverage* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ZoneCoverage_var& operator = (const ZoneCoverage_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new ZoneCoverage;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ZoneCoverage* operator -> () { return _pd_seq; }
      inline const ZoneCoverage* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ZoneCoverage& () const { return *_pd_seq; }
#else
      inline operator const ZoneCoverage& () const { return *_pd_seq; }
      inline operator ZoneCoverage& () { return *_pd_seq; }
#endif
        
      inline const ZoneCoverage& in() const { return *_pd_seq; }
      inline ZoneCoverage&       inout()    { return *_pd_seq; }
      inline ZoneCoverage*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ZoneCoverage* _retn() { ZoneCoverage* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ZoneCoverage_out;
      
    private:
      ZoneCoverage* _pd_seq;
    };

    class ZoneCoverage_out {
    public:
      inline ZoneCoverage_out(ZoneCoverage*& _s) : _data(_s) { _data = 0; }
      inline ZoneCoverage_out(ZoneCoverage_var& _s)
        : _data(_s._pd_seq) { _s = (ZoneCoverage*) 0; }
      inline ZoneCoverage_out(const ZoneCoverage_out& _s) : _data(_s._data) {}
      inline ZoneCoverage_out& operator = (const ZoneCoverage_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ZoneCoverage_out& operator = (ZoneCoverage* _s) {
        _data = _s;
        return *this;
      }
      inline operator ZoneCoverage*&()  { return _data; }
      inline ZoneCoverage*& ptr()       { return _data; }
      inline ZoneCoverage* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ZoneCoverage*& _data;

    private:
      ZoneCoverage_out();
      ZoneCoverage_out& operator=(const ZoneCoverage_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MessageKeySeq;

    class MessageKeySeq_var;

    class MessageKeySeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef MessageKeySeq_var _var_type;
      inline MessageKeySeq() {}
      inline MessageKeySeq(const MessageKeySeq& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline MessageKeySeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline MessageKeySeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline MessageKeySeq& operator = (const MessageKeySeq& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class MessageKeySeq_out;

    class MessageKeySeq_var {
    public:
      inline MessageKeySeq_var() : _pd_seq(0) {}
      inline MessageKeySeq_var(MessageKeySeq* _s) : _pd_seq(_s) {}
      inline MessageKeySeq_var(const MessageKeySeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new MessageKeySeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~MessageKeySeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline MessageKeySeq_var& operator = (MessageKeySeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline MessageKeySeq_var& operator = (const MessageKeySeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new MessageKeySeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline MessageKeySeq* operator -> () { return _pd_seq; }
      inline const MessageKeySeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator MessageKeySeq& () const { return *_pd_seq; }
#else
      inline operator const MessageKeySeq& () const { return *_pd_seq; }
      inline operator MessageKeySeq& () { return *_pd_seq; }
#endif
        
      inline const MessageKeySeq& in() const { return *_pd_seq; }
      inline MessageKeySeq&       inout()    { return *_pd_seq; }
      inline MessageKeySeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline MessageKeySeq* _retn() { MessageKeySeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class MessageKeySeq_out;
      
    private:
      MessageKeySeq* _pd_seq;
    };

    class MessageKeySeq_out {
    public:
      inline MessageKeySeq_out(MessageKeySeq*& _s) : _data(_s) { _data = 0; }
      inline MessageKeySeq_out(MessageKeySeq_var& _s)
        : _data(_s._pd_seq) { _s = (MessageKeySeq*) 0; }
      inline MessageKeySeq_out(const MessageKeySeq_out& _s) : _data(_s._data) {}
      inline MessageKeySeq_out& operator = (const MessageKeySeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline MessageKeySeq_out& operator = (MessageKeySeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator MessageKeySeq*&()  { return _data; }
      inline MessageKeySeq*& ptr()       { return _data; }
      inline MessageKeySeq* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      MessageKeySeq*& _data;

    private:
      MessageKeySeq_out();
      MessageKeySeq_out& operator=(const MessageKeySeq_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ScheduleDvaIds;

    class ScheduleDvaIds_var;

    class ScheduleDvaIds : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 >  {
    public:
      typedef ScheduleDvaIds_var _var_type;
      inline ScheduleDvaIds() {}
      inline ScheduleDvaIds(const ScheduleDvaIds& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 > (_s) {}

      inline ScheduleDvaIds(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 > (_max) {}
      inline ScheduleDvaIds(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::UShort* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 > (_max, _len, _val, _rel) {}

    

      inline ScheduleDvaIds& operator = (const ScheduleDvaIds& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::UShort, 2, 2 > ::operator=(_s);
        return *this;
      }
    };

    class ScheduleDvaIds_out;

    class ScheduleDvaIds_var {
    public:
      inline ScheduleDvaIds_var() : _pd_seq(0) {}
      inline ScheduleDvaIds_var(ScheduleDvaIds* _s) : _pd_seq(_s) {}
      inline ScheduleDvaIds_var(const ScheduleDvaIds_var& _s) {
        if( _s._pd_seq )  _pd_seq = new ScheduleDvaIds(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~ScheduleDvaIds_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline ScheduleDvaIds_var& operator = (ScheduleDvaIds* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ScheduleDvaIds_var& operator = (const ScheduleDvaIds_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new ScheduleDvaIds;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::UShort& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ScheduleDvaIds* operator -> () { return _pd_seq; }
      inline const ScheduleDvaIds* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ScheduleDvaIds& () const { return *_pd_seq; }
#else
      inline operator const ScheduleDvaIds& () const { return *_pd_seq; }
      inline operator ScheduleDvaIds& () { return *_pd_seq; }
#endif
        
      inline const ScheduleDvaIds& in() const { return *_pd_seq; }
      inline ScheduleDvaIds&       inout()    { return *_pd_seq; }
      inline ScheduleDvaIds*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ScheduleDvaIds* _retn() { ScheduleDvaIds* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ScheduleDvaIds_out;
      
    private:
      ScheduleDvaIds* _pd_seq;
    };

    class ScheduleDvaIds_out {
    public:
      inline ScheduleDvaIds_out(ScheduleDvaIds*& _s) : _data(_s) { _data = 0; }
      inline ScheduleDvaIds_out(ScheduleDvaIds_var& _s)
        : _data(_s._pd_seq) { _s = (ScheduleDvaIds*) 0; }
      inline ScheduleDvaIds_out(const ScheduleDvaIds_out& _s) : _data(_s._data) {}
      inline ScheduleDvaIds_out& operator = (const ScheduleDvaIds_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ScheduleDvaIds_out& operator = (ScheduleDvaIds* _s) {
        _data = _s;
        return *this;
      }
      inline operator ScheduleDvaIds*&()  { return _data; }
      inline ScheduleDvaIds*& ptr()       { return _data; }
      inline ScheduleDvaIds* operator->() { return _data; }

      inline ::CORBA::UShort& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ScheduleDvaIds*& _data;

    private:
      ScheduleDvaIds_out();
      ScheduleDvaIds_out& operator=(const ScheduleDvaIds_var&);
    };

    struct BroadcastIdType {
      typedef _CORBA_ConstrType_Variable_Var<BroadcastIdType> _var_type;

      
      ::CORBA::String_member broadcastId;

      EBroadcastType broadcastType;

      ::CORBA::String_member sessionId;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef BroadcastIdType::_var_type BroadcastIdType_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BroadcastIdType,BroadcastIdType_var > BroadcastIdType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastIdType;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastIdTypeSeq;

    class BroadcastIdTypeSeq_var;

    class BroadcastIdTypeSeq : public _CORBA_Unbounded_Sequence< BroadcastIdType >  {
    public:
      typedef BroadcastIdTypeSeq_var _var_type;
      inline BroadcastIdTypeSeq() {}
      inline BroadcastIdTypeSeq(const BroadcastIdTypeSeq& _s)
        : _CORBA_Unbounded_Sequence< BroadcastIdType > (_s) {}

      inline BroadcastIdTypeSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< BroadcastIdType > (_max) {}
      inline BroadcastIdTypeSeq(_CORBA_ULong _max, _CORBA_ULong _len, BroadcastIdType* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< BroadcastIdType > (_max, _len, _val, _rel) {}

    

      inline BroadcastIdTypeSeq& operator = (const BroadcastIdTypeSeq& _s) {
        _CORBA_Unbounded_Sequence< BroadcastIdType > ::operator=(_s);
        return *this;
      }
    };

    class BroadcastIdTypeSeq_out;

    class BroadcastIdTypeSeq_var {
    public:
      inline BroadcastIdTypeSeq_var() : _pd_seq(0) {}
      inline BroadcastIdTypeSeq_var(BroadcastIdTypeSeq* _s) : _pd_seq(_s) {}
      inline BroadcastIdTypeSeq_var(const BroadcastIdTypeSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new BroadcastIdTypeSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~BroadcastIdTypeSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline BroadcastIdTypeSeq_var& operator = (BroadcastIdTypeSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline BroadcastIdTypeSeq_var& operator = (const BroadcastIdTypeSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new BroadcastIdTypeSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline BroadcastIdType& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline BroadcastIdTypeSeq* operator -> () { return _pd_seq; }
      inline const BroadcastIdTypeSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator BroadcastIdTypeSeq& () const { return *_pd_seq; }
#else
      inline operator const BroadcastIdTypeSeq& () const { return *_pd_seq; }
      inline operator BroadcastIdTypeSeq& () { return *_pd_seq; }
#endif
        
      inline const BroadcastIdTypeSeq& in() const { return *_pd_seq; }
      inline BroadcastIdTypeSeq&       inout()    { return *_pd_seq; }
      inline BroadcastIdTypeSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline BroadcastIdTypeSeq* _retn() { BroadcastIdTypeSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class BroadcastIdTypeSeq_out;
      
    private:
      BroadcastIdTypeSeq* _pd_seq;
    };

    class BroadcastIdTypeSeq_out {
    public:
      inline BroadcastIdTypeSeq_out(BroadcastIdTypeSeq*& _s) : _data(_s) { _data = 0; }
      inline BroadcastIdTypeSeq_out(BroadcastIdTypeSeq_var& _s)
        : _data(_s._pd_seq) { _s = (BroadcastIdTypeSeq*) 0; }
      inline BroadcastIdTypeSeq_out(const BroadcastIdTypeSeq_out& _s) : _data(_s._data) {}
      inline BroadcastIdTypeSeq_out& operator = (const BroadcastIdTypeSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline BroadcastIdTypeSeq_out& operator = (BroadcastIdTypeSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator BroadcastIdTypeSeq*&()  { return _data; }
      inline BroadcastIdTypeSeq*& ptr()       { return _data; }
      inline BroadcastIdTypeSeq* operator->() { return _data; }

      inline BroadcastIdType& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      BroadcastIdTypeSeq*& _data;

    private:
      BroadcastIdTypeSeq_out();
      BroadcastIdTypeSeq_out& operator=(const BroadcastIdTypeSeq_var&);
    };

    struct CurrentBroadcastsUpdateData {
      typedef _CORBA_ConstrType_Variable_Var<CurrentBroadcastsUpdateData> _var_type;

      
      ::CORBA::String_member fromBroadcastId;

      ::CORBA::String_member toBroadcastId;

      EBroadcastType broadcastType;

      ::CORBA::String_member sessionId;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CurrentBroadcastsUpdateData::_var_type CurrentBroadcastsUpdateData_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CurrentBroadcastsUpdateData,CurrentBroadcastsUpdateData_var > CurrentBroadcastsUpdateData_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CurrentBroadcastsUpdateData;

    struct ScheduleBroadcastsUpdateData {
      typedef _CORBA_ConstrType_Variable_Var<ScheduleBroadcastsUpdateData> _var_type;

      
      ::CORBA::ULong ulScheduleKey;

      EBroadcastType broadcastType;

      EScheduleUpdateType eUpdateType;

      ::CORBA::String_member strBroadcastId;

      ::CORBA::ULong ulDvaMsgKey;

      ZoneCoverage seqZoneKeys;

      ::CORBA::ULong ulCyclicTimes;

      DateTime tmStartTime;

      ::CORBA::String_member strStatus;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ScheduleBroadcastsUpdateData::_var_type ScheduleBroadcastsUpdateData_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ScheduleBroadcastsUpdateData,ScheduleBroadcastsUpdateData_var > ScheduleBroadcastsUpdateData_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ScheduleBroadcastsUpdateData;

    struct StationMusicConfig {
      typedef _CORBA_ConstrType_Variable_Var<StationMusicConfig> _var_type;

      
      ::CORBA::UShort sourceId;

      ZoneCoverage zones;

      EMusicType musicType;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef StationMusicConfig::_var_type StationMusicConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< StationMusicConfig,StationMusicConfig_var > StationMusicConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationMusicConfig;

    struct StationLiveConfig {
      typedef _CORBA_ConstrType_Variable_Var<StationLiveConfig> _var_type;

      
      ::CORBA::Boolean hasChime;

      ::CORBA::UShort sourceId;

      ZoneCoverage zones;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef StationLiveConfig::_var_type StationLiveConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< StationLiveConfig,StationLiveConfig_var > StationLiveConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationLiveConfig;

    struct TrainCyclicParams {
      typedef _CORBA_ConstrType_Fix_Var<TrainCyclicParams> _var_type;

      
      ::CORBA::UShort periodInSecs;

      ::CORBA::UShort durationInSecs;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TrainCyclicParams::_var_type TrainCyclicParams_var;

    typedef TrainCyclicParams& TrainCyclicParams_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainCyclicParams;

    struct TriggeredBroadcastConfig {
      typedef _CORBA_ConstrType_Variable_Var<TriggeredBroadcastConfig> _var_type;

      
      ::CORBA::String_member strBroadcastId;

      ::CORBA::ULong ulDvaMsgKey;

      ZoneCoverage lstZoneKeys;

      ::CORBA::ULong ulCyclicTimes;

      DateTime tmStartTime;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TriggeredBroadcastConfig::_var_type TriggeredBroadcastConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< TriggeredBroadcastConfig,TriggeredBroadcastConfig_var > TriggeredBroadcastConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TriggeredBroadcastConfig;

    struct StationCyclicParams {
      typedef _CORBA_ConstrType_Fix_Var<StationCyclicParams> _var_type;

      
      DateTime startTime;

      DateTime stopTime;

      DateTime period;

      ::CORBA::UShort usCyclicTimes;

      ::CORBA::UShort usScheduleId;

      ::CORBA::Boolean bCycSun;

      ::CORBA::Boolean bCycMon;

      ::CORBA::Boolean bCycTue;

      ::CORBA::Boolean bCycWed;

      ::CORBA::Boolean bCycThu;

      ::CORBA::Boolean bCycFri;

      ::CORBA::Boolean bCycSat;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef StationCyclicParams::_var_type StationCyclicParams_var;

    typedef StationCyclicParams& StationCyclicParams_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationCyclicParams;

    struct StationDvaConfig {
      typedef _CORBA_ConstrType_Variable_Var<StationDvaConfig> _var_type;

      
      ::CORBA::UShort sourceId;

      ZoneCoverage zones;

      MessageKeySeq messages;

      ::CORBA::UShort dwellInSecs;

      ::CORBA::Boolean isSynchronisedWithTis;

      ::CORBA::Boolean hasChime;

      ::CORBA::Boolean isLocalPlayback;

      ::CORBA::Boolean bCyclic;

      ::CORBA::ULong priorityGroup;

      ::CORBA::ULong pKey;

      StationCyclicParams stCyclicParams;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef StationDvaConfig::_var_type StationDvaConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< StationDvaConfig,StationDvaConfig_var > StationDvaConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationDvaConfig;

    struct StationRecordingConfig {
      typedef _CORBA_ConstrType_Fix_Var<StationRecordingConfig> _var_type;

      
      ::CORBA::UShort sourceId;

      ::CORBA::ULong messageKey;

      ::CORBA::UShort usMsgType;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef StationRecordingConfig::_var_type StationRecordingConfig_var;

    typedef StationRecordingConfig& StationRecordingConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationRecordingConfig;

    struct TrainLiveConfig {
      typedef _CORBA_ConstrType_Variable_Var<TrainLiveConfig> _var_type;

      
      TrainCoverage trains;

      ::CORBA::Octet trainAnnouncementId;

      ::CORBA::Boolean hasOverrideOption;

      ::CORBA::String_member staticGroupName;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TrainLiveConfig::_var_type TrainLiveConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< TrainLiveConfig,TrainLiveConfig_var > TrainLiveConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainLiveConfig;

    struct TrainDvaConfig {
      typedef _CORBA_ConstrType_Variable_Var<TrainDvaConfig> _var_type;

      
      TrainCoverage trains;

      ::CORBA::Boolean hasOverrideOption;

      ::CORBA::ULong messageKey;

      ::CORBA::ULong libraryVersion;

      TrainCyclicParams stCyclicParams;

      ::CORBA::Boolean isEmergency;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TrainDvaConfig::_var_type TrainDvaConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< TrainDvaConfig,TrainDvaConfig_var > TrainDvaConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainDvaConfig;

    class BroadcastConfigSpecifics {
    public:

      typedef _CORBA_ConstrType_Variable_Var<BroadcastConfigSpecifics> _var_type;

      

      BroadcastConfigSpecifics(): _pd__initialised(0) {
        _default();

    
      }
      
      BroadcastConfigSpecifics(const BroadcastConfigSpecifics& _value) {
        _pd__initialised = _value._pd__initialised;
        if ((_pd__default = _value._pd__default)) {
          
        }
        else {
          switch(_value._pd__d) {
            case StationMusic: theStationMusicConfig(_value._pd_theStationMusicConfig); break;

            case StationLive: theStationLiveConfig(_value._pd_theStationLiveConfig); break;

            case StationDva: theStationDvaConfig(_value._pd_theStationDvaConfig); break;

            case StationRecording: theStationRecordingConfig(_value._pd_theStationRecordingConfig); break;

            case TrainLive: theTrainLiveConfig(_value._pd_theTrainLiveConfig); break;

            case TrainDva: theTrainDvaConfig(_value._pd_theTrainDvaConfig); break;

              default: break;

        
          }
        }
        _pd__d = _value._pd__d;

    
      }

      ~BroadcastConfigSpecifics() {}

      BroadcastConfigSpecifics& operator=(const BroadcastConfigSpecifics& _value) {
        _pd__initialised = _value._pd__initialised;
        if ((_pd__default = _value._pd__default)) {
          
        }
        else {
          switch(_value._pd__d) {
            case StationMusic: theStationMusicConfig(_value._pd_theStationMusicConfig); break;

            case StationLive: theStationLiveConfig(_value._pd_theStationLiveConfig); break;

            case StationDva: theStationDvaConfig(_value._pd_theStationDvaConfig); break;

            case StationRecording: theStationRecordingConfig(_value._pd_theStationRecordingConfig); break;

            case TrainLive: theTrainLiveConfig(_value._pd_theTrainLiveConfig); break;

            case TrainDva: theTrainDvaConfig(_value._pd_theTrainDvaConfig); break;

              default: break;

        
          }
        }
        _pd__d = _value._pd__d;

    
        return *this;
      }

      EBroadcastType _d() const { return _pd__d;}
      void _d(EBroadcastType _value){
        // illegal to set discriminator before making a member active
        if (!_pd__initialised)
          OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

        if (_value == _pd__d) return; // no change

        switch (_pd__d){
          case StationMusic: goto fail;
          case StationLive: goto fail;
          case StationDva: goto fail;
          case StationRecording: goto fail;
          case TrainLive: goto fail;
          case TrainDva: goto fail;
          default:
          switch (_value){
            case StationMusic: goto fail;
            case StationLive: goto fail;
            case StationDva: goto fail;
            case StationRecording: goto fail;
            case TrainLive: goto fail;
            case TrainDva: goto fail;
            default: _pd__d = _value; return;
          }

        };
        

        fail:
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


    
      }

      void _default()
      {
        _pd__initialised = 1;
        _pd__d = OccPlayback;
        _pd__default = 1;
      }

    

      const StationMusicConfig &theStationMusicConfig () const { return _pd_theStationMusicConfig; }
      StationMusicConfig &theStationMusicConfig () { return _pd_theStationMusicConfig; }
      void theStationMusicConfig (const StationMusicConfig& _value) {
        _pd__initialised = 1;
        _pd__d = StationMusic;
        _pd__default = 0;
        _pd_theStationMusicConfig = _value;
      }

      const StationLiveConfig &theStationLiveConfig () const { return _pd_theStationLiveConfig; }
      StationLiveConfig &theStationLiveConfig () { return _pd_theStationLiveConfig; }
      void theStationLiveConfig (const StationLiveConfig& _value) {
        _pd__initialised = 1;
        _pd__d = StationLive;
        _pd__default = 0;
        _pd_theStationLiveConfig = _value;
      }

      const StationDvaConfig &theStationDvaConfig () const { return _pd_theStationDvaConfig; }
      StationDvaConfig &theStationDvaConfig () { return _pd_theStationDvaConfig; }
      void theStationDvaConfig (const StationDvaConfig& _value) {
        _pd__initialised = 1;
        _pd__d = StationDva;
        _pd__default = 0;
        _pd_theStationDvaConfig = _value;
      }

      const StationRecordingConfig &theStationRecordingConfig () const { return _pd_theStationRecordingConfig; }
      StationRecordingConfig &theStationRecordingConfig () { return _pd_theStationRecordingConfig; }
      void theStationRecordingConfig (const StationRecordingConfig& _value) {
        _pd__initialised = 1;
        _pd__d = StationRecording;
        _pd__default = 0;
        _pd_theStationRecordingConfig = _value;
      }

      const TrainLiveConfig &theTrainLiveConfig () const { return _pd_theTrainLiveConfig; }
      TrainLiveConfig &theTrainLiveConfig () { return _pd_theTrainLiveConfig; }
      void theTrainLiveConfig (const TrainLiveConfig& _value) {
        _pd__initialised = 1;
        _pd__d = TrainLive;
        _pd__default = 0;
        _pd_theTrainLiveConfig = _value;
      }

      const TrainDvaConfig &theTrainDvaConfig () const { return _pd_theTrainDvaConfig; }
      TrainDvaConfig &theTrainDvaConfig () { return _pd_theTrainDvaConfig; }
      void theTrainDvaConfig (const TrainDvaConfig& _value) {
        _pd__initialised = 1;
        _pd__d = TrainDva;
        _pd__default = 0;
        _pd_theTrainDvaConfig = _value;
      }

    
      
      void operator>>= (cdrStream&) const;
      void operator<<= (cdrStream&);

    private:
      EBroadcastType _pd__d;
      _CORBA_Boolean _pd__default;
      _CORBA_Boolean _pd__initialised;

      
      StationMusicConfig _pd_theStationMusicConfig;

      StationLiveConfig _pd_theStationLiveConfig;

      StationDvaConfig _pd_theStationDvaConfig;

      StationRecordingConfig _pd_theStationRecordingConfig;

      TrainLiveConfig _pd_theTrainLiveConfig;

      TrainDvaConfig _pd_theTrainDvaConfig;

    
    };

    typedef BroadcastConfigSpecifics::_var_type BroadcastConfigSpecifics_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BroadcastConfigSpecifics,BroadcastConfigSpecifics_var > BroadcastConfigSpecifics_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastConfigSpecifics;

    struct BroadcastConfig {
      typedef _CORBA_ConstrType_Variable_Var<BroadcastConfig> _var_type;

      
      ::CORBA::String_member sessionId;

      ::CORBA::String_member broadcastId;

      DateTime submitTime;

      EBroadcastType broadcastType;

      BroadcastConfigSpecifics theBroadcastConfigSpecifics;

      ::CORBA::Boolean isEventTriggered;

      ::CORBA::Boolean isStop;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef BroadcastConfig::_var_type BroadcastConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BroadcastConfig,BroadcastConfig_var > BroadcastConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastConfig;

    struct LocalProgress {
      typedef _CORBA_ConstrType_Fix_Var<LocalProgress> _var_type;

      
      ::CORBA::ULong zoneKeyOrTrainId;

      ELocalState localState;

      ::CORBA::Octet overridingSourcePriorityForZonesOnly;

      ::CORBA::Boolean errorOccurred;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef LocalProgress::_var_type LocalProgress_var;

    typedef LocalProgress& LocalProgress_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_LocalProgress;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_LocalProgressSeq;

    class LocalProgressSeq_var;

    class LocalProgressSeq : public _CORBA_Unbounded_Sequence< LocalProgress >  {
    public:
      typedef LocalProgressSeq_var _var_type;
      inline LocalProgressSeq() {}
      inline LocalProgressSeq(const LocalProgressSeq& _s)
        : _CORBA_Unbounded_Sequence< LocalProgress > (_s) {}

      inline LocalProgressSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< LocalProgress > (_max) {}
      inline LocalProgressSeq(_CORBA_ULong _max, _CORBA_ULong _len, LocalProgress* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< LocalProgress > (_max, _len, _val, _rel) {}

    

      inline LocalProgressSeq& operator = (const LocalProgressSeq& _s) {
        _CORBA_Unbounded_Sequence< LocalProgress > ::operator=(_s);
        return *this;
      }
    };

    class LocalProgressSeq_out;

    class LocalProgressSeq_var {
    public:
      inline LocalProgressSeq_var() : _pd_seq(0) {}
      inline LocalProgressSeq_var(LocalProgressSeq* _s) : _pd_seq(_s) {}
      inline LocalProgressSeq_var(const LocalProgressSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new LocalProgressSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~LocalProgressSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline LocalProgressSeq_var& operator = (LocalProgressSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline LocalProgressSeq_var& operator = (const LocalProgressSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new LocalProgressSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline LocalProgress& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline LocalProgressSeq* operator -> () { return _pd_seq; }
      inline const LocalProgressSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator LocalProgressSeq& () const { return *_pd_seq; }
#else
      inline operator const LocalProgressSeq& () const { return *_pd_seq; }
      inline operator LocalProgressSeq& () { return *_pd_seq; }
#endif
        
      inline const LocalProgressSeq& in() const { return *_pd_seq; }
      inline LocalProgressSeq&       inout()    { return *_pd_seq; }
      inline LocalProgressSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline LocalProgressSeq* _retn() { LocalProgressSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class LocalProgressSeq_out;
      
    private:
      LocalProgressSeq* _pd_seq;
    };

    class LocalProgressSeq_out {
    public:
      inline LocalProgressSeq_out(LocalProgressSeq*& _s) : _data(_s) { _data = 0; }
      inline LocalProgressSeq_out(LocalProgressSeq_var& _s)
        : _data(_s._pd_seq) { _s = (LocalProgressSeq*) 0; }
      inline LocalProgressSeq_out(const LocalProgressSeq_out& _s) : _data(_s._data) {}
      inline LocalProgressSeq_out& operator = (const LocalProgressSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline LocalProgressSeq_out& operator = (LocalProgressSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator LocalProgressSeq*&()  { return _data; }
      inline LocalProgressSeq*& ptr()       { return _data; }
      inline LocalProgressSeq* operator->() { return _data; }

      inline LocalProgress& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      LocalProgressSeq*& _data;

    private:
      LocalProgressSeq_out();
      LocalProgressSeq_out& operator=(const LocalProgressSeq_var&);
    };

    struct ProgressReport {
      typedef _CORBA_ConstrType_Variable_Var<ProgressReport> _var_type;

      
      ::CORBA::String_member broadcastId;

      EBroadcastState broadcastState;

      EGlobalState globalState;

      LocalProgressSeq localProgresses;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef ProgressReport::_var_type ProgressReport_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< ProgressReport,ProgressReport_var > ProgressReport_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProgressReport;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastProgressUpdateData;

    typedef ProgressReport BroadcastProgressUpdateData;
    typedef ProgressReport_var BroadcastProgressUpdateData_var;
    typedef ProgressReport_out BroadcastProgressUpdateData_out;

    struct StationDvaMessageRecord {
      typedef _CORBA_ConstrType_Variable_Var<StationDvaMessageRecord> _var_type;

      
      ::CORBA::ULong m_pKey;

      ::CORBA::ULong m_locationKey;

      ::CORBA::UShort m_id;

      ::CORBA::String_member m_label;

      ::CORBA::UShort m_type;

      ::CORBA::ULong m_tisMessageTag;

      ::CORBA::Short m_tisLibrarySection;

      ::CORBA::ULong m_tisLibraryVersion;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef StationDvaMessageRecord::_var_type StationDvaMessageRecord_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< StationDvaMessageRecord,StationDvaMessageRecord_var > StationDvaMessageRecord_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationDvaMessageRecord;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_StationDvaMessageRecords;

    class StationDvaMessageRecords_var;

    class StationDvaMessageRecords : public _CORBA_Unbounded_Sequence< StationDvaMessageRecord >  {
    public:
      typedef StationDvaMessageRecords_var _var_type;
      inline StationDvaMessageRecords() {}
      inline StationDvaMessageRecords(const StationDvaMessageRecords& _s)
        : _CORBA_Unbounded_Sequence< StationDvaMessageRecord > (_s) {}

      inline StationDvaMessageRecords(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< StationDvaMessageRecord > (_max) {}
      inline StationDvaMessageRecords(_CORBA_ULong _max, _CORBA_ULong _len, StationDvaMessageRecord* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< StationDvaMessageRecord > (_max, _len, _val, _rel) {}

    

      inline StationDvaMessageRecords& operator = (const StationDvaMessageRecords& _s) {
        _CORBA_Unbounded_Sequence< StationDvaMessageRecord > ::operator=(_s);
        return *this;
      }
    };

    class StationDvaMessageRecords_out;

    class StationDvaMessageRecords_var {
    public:
      inline StationDvaMessageRecords_var() : _pd_seq(0) {}
      inline StationDvaMessageRecords_var(StationDvaMessageRecords* _s) : _pd_seq(_s) {}
      inline StationDvaMessageRecords_var(const StationDvaMessageRecords_var& _s) {
        if( _s._pd_seq )  _pd_seq = new StationDvaMessageRecords(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~StationDvaMessageRecords_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline StationDvaMessageRecords_var& operator = (StationDvaMessageRecords* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline StationDvaMessageRecords_var& operator = (const StationDvaMessageRecords_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new StationDvaMessageRecords;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline StationDvaMessageRecord& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline StationDvaMessageRecords* operator -> () { return _pd_seq; }
      inline const StationDvaMessageRecords* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator StationDvaMessageRecords& () const { return *_pd_seq; }
#else
      inline operator const StationDvaMessageRecords& () const { return *_pd_seq; }
      inline operator StationDvaMessageRecords& () { return *_pd_seq; }
#endif
        
      inline const StationDvaMessageRecords& in() const { return *_pd_seq; }
      inline StationDvaMessageRecords&       inout()    { return *_pd_seq; }
      inline StationDvaMessageRecords*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline StationDvaMessageRecords* _retn() { StationDvaMessageRecords* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class StationDvaMessageRecords_out;
      
    private:
      StationDvaMessageRecords* _pd_seq;
    };

    class StationDvaMessageRecords_out {
    public:
      inline StationDvaMessageRecords_out(StationDvaMessageRecords*& _s) : _data(_s) { _data = 0; }
      inline StationDvaMessageRecords_out(StationDvaMessageRecords_var& _s)
        : _data(_s._pd_seq) { _s = (StationDvaMessageRecords*) 0; }
      inline StationDvaMessageRecords_out(const StationDvaMessageRecords_out& _s) : _data(_s._data) {}
      inline StationDvaMessageRecords_out& operator = (const StationDvaMessageRecords_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline StationDvaMessageRecords_out& operator = (StationDvaMessageRecords* _s) {
        _data = _s;
        return *this;
      }
      inline operator StationDvaMessageRecords*&()  { return _data; }
      inline StationDvaMessageRecords*& ptr()       { return _data; }
      inline StationDvaMessageRecords* operator->() { return _data; }

      inline StationDvaMessageRecord& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      StationDvaMessageRecords*& _data;

    private:
      StationDvaMessageRecords_out();
      StationDvaMessageRecords_out& operator=(const StationDvaMessageRecords_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DvaMessagesUpdateData;

    typedef StationDvaMessageRecords DvaMessagesUpdateData;
    typedef StationDvaMessageRecords_var DvaMessagesUpdateData_var;
    typedef StationDvaMessageRecords_out DvaMessagesUpdateData_out;

    struct DvaVersionRecord {
      typedef _CORBA_ConstrType_Variable_Var<DvaVersionRecord> _var_type;

      
      ::CORBA::ULong ulKey;

      ::CORBA::ULong ulLocationKey;

      ::CORBA::String_member strVersionNumber;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef DvaVersionRecord::_var_type DvaVersionRecord_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< DvaVersionRecord,DvaVersionRecord_var > DvaVersionRecord_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DvaVersionRecord;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_DvaVersionRecords;

    class DvaVersionRecords_var;

    class DvaVersionRecords : public _CORBA_Unbounded_Sequence< DvaVersionRecord >  {
    public:
      typedef DvaVersionRecords_var _var_type;
      inline DvaVersionRecords() {}
      inline DvaVersionRecords(const DvaVersionRecords& _s)
        : _CORBA_Unbounded_Sequence< DvaVersionRecord > (_s) {}

      inline DvaVersionRecords(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< DvaVersionRecord > (_max) {}
      inline DvaVersionRecords(_CORBA_ULong _max, _CORBA_ULong _len, DvaVersionRecord* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< DvaVersionRecord > (_max, _len, _val, _rel) {}

    

      inline DvaVersionRecords& operator = (const DvaVersionRecords& _s) {
        _CORBA_Unbounded_Sequence< DvaVersionRecord > ::operator=(_s);
        return *this;
      }
    };

    class DvaVersionRecords_out;

    class DvaVersionRecords_var {
    public:
      inline DvaVersionRecords_var() : _pd_seq(0) {}
      inline DvaVersionRecords_var(DvaVersionRecords* _s) : _pd_seq(_s) {}
      inline DvaVersionRecords_var(const DvaVersionRecords_var& _s) {
        if( _s._pd_seq )  _pd_seq = new DvaVersionRecords(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~DvaVersionRecords_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline DvaVersionRecords_var& operator = (DvaVersionRecords* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline DvaVersionRecords_var& operator = (const DvaVersionRecords_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new DvaVersionRecords;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline DvaVersionRecord& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline DvaVersionRecords* operator -> () { return _pd_seq; }
      inline const DvaVersionRecords* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator DvaVersionRecords& () const { return *_pd_seq; }
#else
      inline operator const DvaVersionRecords& () const { return *_pd_seq; }
      inline operator DvaVersionRecords& () { return *_pd_seq; }
#endif
        
      inline const DvaVersionRecords& in() const { return *_pd_seq; }
      inline DvaVersionRecords&       inout()    { return *_pd_seq; }
      inline DvaVersionRecords*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline DvaVersionRecords* _retn() { DvaVersionRecords* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class DvaVersionRecords_out;
      
    private:
      DvaVersionRecords* _pd_seq;
    };

    class DvaVersionRecords_out {
    public:
      inline DvaVersionRecords_out(DvaVersionRecords*& _s) : _data(_s) { _data = 0; }
      inline DvaVersionRecords_out(DvaVersionRecords_var& _s)
        : _data(_s._pd_seq) { _s = (DvaVersionRecords*) 0; }
      inline DvaVersionRecords_out(const DvaVersionRecords_out& _s) : _data(_s._data) {}
      inline DvaVersionRecords_out& operator = (const DvaVersionRecords_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline DvaVersionRecords_out& operator = (DvaVersionRecords* _s) {
        _data = _s;
        return *this;
      }
      inline operator DvaVersionRecords*&()  { return _data; }
      inline DvaVersionRecords*& ptr()       { return _data; }
      inline DvaVersionRecords* operator->() { return _data; }

      inline DvaVersionRecord& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      DvaVersionRecords*& _data;

    private:
      DvaVersionRecords_out();
      DvaVersionRecords_out& operator=(const DvaVersionRecords_var&);
    };

    struct TrainDvaMessageRecord {
      typedef _CORBA_ConstrType_Variable_Var<TrainDvaMessageRecord> _var_type;

      
      ::CORBA::ULong m_pKeyOrId;

      ::CORBA::String_member m_label;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef TrainDvaMessageRecord::_var_type TrainDvaMessageRecord_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< TrainDvaMessageRecord,TrainDvaMessageRecord_var > TrainDvaMessageRecord_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainDvaMessageRecord;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_TrainDvaMessageRecords;

    class TrainDvaMessageRecords_var;

    class TrainDvaMessageRecords : public _CORBA_Unbounded_Sequence< TrainDvaMessageRecord >  {
    public:
      typedef TrainDvaMessageRecords_var _var_type;
      inline TrainDvaMessageRecords() {}
      inline TrainDvaMessageRecords(const TrainDvaMessageRecords& _s)
        : _CORBA_Unbounded_Sequence< TrainDvaMessageRecord > (_s) {}

      inline TrainDvaMessageRecords(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< TrainDvaMessageRecord > (_max) {}
      inline TrainDvaMessageRecords(_CORBA_ULong _max, _CORBA_ULong _len, TrainDvaMessageRecord* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< TrainDvaMessageRecord > (_max, _len, _val, _rel) {}

    

      inline TrainDvaMessageRecords& operator = (const TrainDvaMessageRecords& _s) {
        _CORBA_Unbounded_Sequence< TrainDvaMessageRecord > ::operator=(_s);
        return *this;
      }
    };

    class TrainDvaMessageRecords_out;

    class TrainDvaMessageRecords_var {
    public:
      inline TrainDvaMessageRecords_var() : _pd_seq(0) {}
      inline TrainDvaMessageRecords_var(TrainDvaMessageRecords* _s) : _pd_seq(_s) {}
      inline TrainDvaMessageRecords_var(const TrainDvaMessageRecords_var& _s) {
        if( _s._pd_seq )  _pd_seq = new TrainDvaMessageRecords(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~TrainDvaMessageRecords_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline TrainDvaMessageRecords_var& operator = (TrainDvaMessageRecords* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline TrainDvaMessageRecords_var& operator = (const TrainDvaMessageRecords_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new TrainDvaMessageRecords;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline TrainDvaMessageRecord& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline TrainDvaMessageRecords* operator -> () { return _pd_seq; }
      inline const TrainDvaMessageRecords* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator TrainDvaMessageRecords& () const { return *_pd_seq; }
#else
      inline operator const TrainDvaMessageRecords& () const { return *_pd_seq; }
      inline operator TrainDvaMessageRecords& () { return *_pd_seq; }
#endif
        
      inline const TrainDvaMessageRecords& in() const { return *_pd_seq; }
      inline TrainDvaMessageRecords&       inout()    { return *_pd_seq; }
      inline TrainDvaMessageRecords*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline TrainDvaMessageRecords* _retn() { TrainDvaMessageRecords* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class TrainDvaMessageRecords_out;
      
    private:
      TrainDvaMessageRecords* _pd_seq;
    };

    class TrainDvaMessageRecords_out {
    public:
      inline TrainDvaMessageRecords_out(TrainDvaMessageRecords*& _s) : _data(_s) { _data = 0; }
      inline TrainDvaMessageRecords_out(TrainDvaMessageRecords_var& _s)
        : _data(_s._pd_seq) { _s = (TrainDvaMessageRecords*) 0; }
      inline TrainDvaMessageRecords_out(const TrainDvaMessageRecords_out& _s) : _data(_s._data) {}
      inline TrainDvaMessageRecords_out& operator = (const TrainDvaMessageRecords_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline TrainDvaMessageRecords_out& operator = (TrainDvaMessageRecords* _s) {
        _data = _s;
        return *this;
      }
      inline operator TrainDvaMessageRecords*&()  { return _data; }
      inline TrainDvaMessageRecords*& ptr()       { return _data; }
      inline TrainDvaMessageRecords* operator->() { return _data; }

      inline TrainDvaMessageRecord& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      TrainDvaMessageRecords*& _data;

    private:
      TrainDvaMessageRecords_out();
      TrainDvaMessageRecords_out& operator=(const TrainDvaMessageRecords_var&);
    };

    struct PaSysParameter {
      typedef _CORBA_ConstrType_Variable_Var<PaSysParameter> _var_type;

      
      ::CORBA::String_member strName;

      ::CORBA::String_member strValue;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef PaSysParameter::_var_type PaSysParameter_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< PaSysParameter,PaSysParameter_var > PaSysParameter_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PaSysParameter;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PaSysParameterSeq;

    class PaSysParameterSeq_var;

    class PaSysParameterSeq : public _CORBA_Unbounded_Sequence< PaSysParameter >  {
    public:
      typedef PaSysParameterSeq_var _var_type;
      inline PaSysParameterSeq() {}
      inline PaSysParameterSeq(const PaSysParameterSeq& _s)
        : _CORBA_Unbounded_Sequence< PaSysParameter > (_s) {}

      inline PaSysParameterSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< PaSysParameter > (_max) {}
      inline PaSysParameterSeq(_CORBA_ULong _max, _CORBA_ULong _len, PaSysParameter* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< PaSysParameter > (_max, _len, _val, _rel) {}

    

      inline PaSysParameterSeq& operator = (const PaSysParameterSeq& _s) {
        _CORBA_Unbounded_Sequence< PaSysParameter > ::operator=(_s);
        return *this;
      }
    };

    class PaSysParameterSeq_out;

    class PaSysParameterSeq_var {
    public:
      inline PaSysParameterSeq_var() : _pd_seq(0) {}
      inline PaSysParameterSeq_var(PaSysParameterSeq* _s) : _pd_seq(_s) {}
      inline PaSysParameterSeq_var(const PaSysParameterSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PaSysParameterSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PaSysParameterSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PaSysParameterSeq_var& operator = (PaSysParameterSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PaSysParameterSeq_var& operator = (const PaSysParameterSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PaSysParameterSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline PaSysParameter& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PaSysParameterSeq* operator -> () { return _pd_seq; }
      inline const PaSysParameterSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PaSysParameterSeq& () const { return *_pd_seq; }
#else
      inline operator const PaSysParameterSeq& () const { return *_pd_seq; }
      inline operator PaSysParameterSeq& () { return *_pd_seq; }
#endif
        
      inline const PaSysParameterSeq& in() const { return *_pd_seq; }
      inline PaSysParameterSeq&       inout()    { return *_pd_seq; }
      inline PaSysParameterSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PaSysParameterSeq* _retn() { PaSysParameterSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PaSysParameterSeq_out;
      
    private:
      PaSysParameterSeq* _pd_seq;
    };

    class PaSysParameterSeq_out {
    public:
      inline PaSysParameterSeq_out(PaSysParameterSeq*& _s) : _data(_s) { _data = 0; }
      inline PaSysParameterSeq_out(PaSysParameterSeq_var& _s)
        : _data(_s._pd_seq) { _s = (PaSysParameterSeq*) 0; }
      inline PaSysParameterSeq_out(const PaSysParameterSeq_out& _s) : _data(_s._data) {}
      inline PaSysParameterSeq_out& operator = (const PaSysParameterSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PaSysParameterSeq_out& operator = (PaSysParameterSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator PaSysParameterSeq*&()  { return _data; }
      inline PaSysParameterSeq*& ptr()       { return _data; }
      inline PaSysParameterSeq* operator->() { return _data; }

      inline PaSysParameter& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PaSysParameterSeq*& _data;

    private:
      PaSysParameterSeq_out();
      PaSysParameterSeq_out& operator=(const PaSysParameterSeq_var&);
    };

    enum EBroadcastParameter { BROADCAST_PARAMETER_WAS_EXECUTED_SUCCESSFULLY, BROADCAST_PARAMETER_IS_CONNECTED, BROADCAST_PARAMETER_NEXT_TRAIN_TO_EXECUTE, BROADCAST_PARAMETER_TRAIN_ANNOUNCEMENT_ID, BROADCAST_PARAMETER_STATION_ANNOUNCE_ID, BROADCAST_PARAMETER_MESSAGE_SEQUENCE_ID, BROADCAST_PARAMETER_PRIORITY, BROADCAST_PARAMETER_HAS_OVERRIDE_OPTION, BROADCAST_PARAMETER_SESSION_ID, BROADCAST_PARAMETER_IS_TAGGED_FOR_REMOVAL, BROADCAST_PARAMETER_SCHEDULE_DVA_EVENT_ID, BROADCAST_PARAMETER_OPERATOR_ABORTED, BROADCAST_PARAMETER_EFFECTIVE_COVERAGE_INDICES, BROADCAST_PARAMETER_END_MARK /*, __max_EBroadcastParameter=0xffffffff */ };
    typedef EBroadcastParameter& EBroadcastParameter_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EBroadcastParameter;

    struct BroadcastParameter {
      typedef _CORBA_ConstrType_Variable_Var<BroadcastParameter> _var_type;

      
      ::CORBA::String_member broadcastId;

      EBroadcastParameter parameter;

      ::CORBA::Any data;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef BroadcastParameter::_var_type BroadcastParameter_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BroadcastParameter,BroadcastParameter_var > BroadcastParameter_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastParameter;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BroadcastParameterSeq;

    class BroadcastParameterSeq_var;

    class BroadcastParameterSeq : public _CORBA_Unbounded_Sequence< BroadcastParameter >  {
    public:
      typedef BroadcastParameterSeq_var _var_type;
      inline BroadcastParameterSeq() {}
      inline BroadcastParameterSeq(const BroadcastParameterSeq& _s)
        : _CORBA_Unbounded_Sequence< BroadcastParameter > (_s) {}

      inline BroadcastParameterSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< BroadcastParameter > (_max) {}
      inline BroadcastParameterSeq(_CORBA_ULong _max, _CORBA_ULong _len, BroadcastParameter* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< BroadcastParameter > (_max, _len, _val, _rel) {}

    

      inline BroadcastParameterSeq& operator = (const BroadcastParameterSeq& _s) {
        _CORBA_Unbounded_Sequence< BroadcastParameter > ::operator=(_s);
        return *this;
      }
    };

    class BroadcastParameterSeq_out;

    class BroadcastParameterSeq_var {
    public:
      inline BroadcastParameterSeq_var() : _pd_seq(0) {}
      inline BroadcastParameterSeq_var(BroadcastParameterSeq* _s) : _pd_seq(_s) {}
      inline BroadcastParameterSeq_var(const BroadcastParameterSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new BroadcastParameterSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~BroadcastParameterSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline BroadcastParameterSeq_var& operator = (BroadcastParameterSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline BroadcastParameterSeq_var& operator = (const BroadcastParameterSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new BroadcastParameterSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline BroadcastParameter& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline BroadcastParameterSeq* operator -> () { return _pd_seq; }
      inline const BroadcastParameterSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator BroadcastParameterSeq& () const { return *_pd_seq; }
#else
      inline operator const BroadcastParameterSeq& () const { return *_pd_seq; }
      inline operator BroadcastParameterSeq& () { return *_pd_seq; }
#endif
        
      inline const BroadcastParameterSeq& in() const { return *_pd_seq; }
      inline BroadcastParameterSeq&       inout()    { return *_pd_seq; }
      inline BroadcastParameterSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline BroadcastParameterSeq* _retn() { BroadcastParameterSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class BroadcastParameterSeq_out;
      
    private:
      BroadcastParameterSeq* _pd_seq;
    };

    class BroadcastParameterSeq_out {
    public:
      inline BroadcastParameterSeq_out(BroadcastParameterSeq*& _s) : _data(_s) { _data = 0; }
      inline BroadcastParameterSeq_out(BroadcastParameterSeq_var& _s)
        : _data(_s._pd_seq) { _s = (BroadcastParameterSeq*) 0; }
      inline BroadcastParameterSeq_out(const BroadcastParameterSeq_out& _s) : _data(_s._data) {}
      inline BroadcastParameterSeq_out& operator = (const BroadcastParameterSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline BroadcastParameterSeq_out& operator = (BroadcastParameterSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator BroadcastParameterSeq*&()  { return _data; }
      inline BroadcastParameterSeq*& ptr()       { return _data; }
      inline BroadcastParameterSeq* operator->() { return _data; }

      inline BroadcastParameter& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      BroadcastParameterSeq*& _data;

    private:
      BroadcastParameterSeq_out();
      BroadcastParameterSeq_out& operator=(const BroadcastParameterSeq_var&);
    };

    struct CompleteBroadcastState {
      typedef _CORBA_ConstrType_Variable_Var<CompleteBroadcastState> _var_type;

      
      ::CORBA::String_member broadcastId;

      BroadcastConfig theBroadcastConfig;

      ProgressReport theProgressReport;

      BroadcastParameterSeq broadcastParameters;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CompleteBroadcastState::_var_type CompleteBroadcastState_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CompleteBroadcastState,CompleteBroadcastState_var > CompleteBroadcastState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CompleteBroadcastState;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CompleteBroadcastStateSeq;

    class CompleteBroadcastStateSeq_var;

    class CompleteBroadcastStateSeq : public _CORBA_Unbounded_Sequence< CompleteBroadcastState >  {
    public:
      typedef CompleteBroadcastStateSeq_var _var_type;
      inline CompleteBroadcastStateSeq() {}
      inline CompleteBroadcastStateSeq(const CompleteBroadcastStateSeq& _s)
        : _CORBA_Unbounded_Sequence< CompleteBroadcastState > (_s) {}

      inline CompleteBroadcastStateSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< CompleteBroadcastState > (_max) {}
      inline CompleteBroadcastStateSeq(_CORBA_ULong _max, _CORBA_ULong _len, CompleteBroadcastState* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< CompleteBroadcastState > (_max, _len, _val, _rel) {}

    

      inline CompleteBroadcastStateSeq& operator = (const CompleteBroadcastStateSeq& _s) {
        _CORBA_Unbounded_Sequence< CompleteBroadcastState > ::operator=(_s);
        return *this;
      }
    };

    class CompleteBroadcastStateSeq_out;

    class CompleteBroadcastStateSeq_var {
    public:
      inline CompleteBroadcastStateSeq_var() : _pd_seq(0) {}
      inline CompleteBroadcastStateSeq_var(CompleteBroadcastStateSeq* _s) : _pd_seq(_s) {}
      inline CompleteBroadcastStateSeq_var(const CompleteBroadcastStateSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CompleteBroadcastStateSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CompleteBroadcastStateSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CompleteBroadcastStateSeq_var& operator = (CompleteBroadcastStateSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CompleteBroadcastStateSeq_var& operator = (const CompleteBroadcastStateSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CompleteBroadcastStateSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline CompleteBroadcastState& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CompleteBroadcastStateSeq* operator -> () { return _pd_seq; }
      inline const CompleteBroadcastStateSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CompleteBroadcastStateSeq& () const { return *_pd_seq; }
#else
      inline operator const CompleteBroadcastStateSeq& () const { return *_pd_seq; }
      inline operator CompleteBroadcastStateSeq& () { return *_pd_seq; }
#endif
        
      inline const CompleteBroadcastStateSeq& in() const { return *_pd_seq; }
      inline CompleteBroadcastStateSeq&       inout()    { return *_pd_seq; }
      inline CompleteBroadcastStateSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CompleteBroadcastStateSeq* _retn() { CompleteBroadcastStateSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CompleteBroadcastStateSeq_out;
      
    private:
      CompleteBroadcastStateSeq* _pd_seq;
    };

    class CompleteBroadcastStateSeq_out {
    public:
      inline CompleteBroadcastStateSeq_out(CompleteBroadcastStateSeq*& _s) : _data(_s) { _data = 0; }
      inline CompleteBroadcastStateSeq_out(CompleteBroadcastStateSeq_var& _s)
        : _data(_s._pd_seq) { _s = (CompleteBroadcastStateSeq*) 0; }
      inline CompleteBroadcastStateSeq_out(const CompleteBroadcastStateSeq_out& _s) : _data(_s._data) {}
      inline CompleteBroadcastStateSeq_out& operator = (const CompleteBroadcastStateSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CompleteBroadcastStateSeq_out& operator = (CompleteBroadcastStateSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator CompleteBroadcastStateSeq*&()  { return _data; }
      inline CompleteBroadcastStateSeq*& ptr()       { return _data; }
      inline CompleteBroadcastStateSeq* operator->() { return _data; }

      inline CompleteBroadcastState& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CompleteBroadcastStateSeq*& _data;

    private:
      CompleteBroadcastStateSeq_out();
      CompleteBroadcastStateSeq_out& operator=(const CompleteBroadcastStateSeq_var&);
    };

    struct CompleteAgentState {
      typedef _CORBA_ConstrType_Variable_Var<CompleteAgentState> _var_type;

      
      CompleteBroadcastStateSeq broadcastStates;

      ScheduleDvaIds availableIds;

      ::CORBA::Boolean bAvailableIdInitialized;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CompleteAgentState::_var_type CompleteAgentState_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CompleteAgentState,CompleteAgentState_var > CompleteAgentState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CompleteAgentState;

    struct BackupKeyStatus {
      typedef _CORBA_ConstrType_Variable_Var<BackupKeyStatus> _var_type;

      
      ::CORBA::String_member strBackupKeyName;

      EBackupKeyState eBackupMode;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef BackupKeyStatus::_var_type BackupKeyStatus_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< BackupKeyStatus,BackupKeyStatus_var > BackupKeyStatus_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_BackupKeyStatus;

  
  };

  class _objref_IPAAgentCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    

    inline _objref_IPAAgentCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_IPAAgentCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IPAAgentCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IPAAgentCorbaDef(const _objref_IPAAgentCorbaDef&);
    _objref_IPAAgentCorbaDef& operator = (const _objref_IPAAgentCorbaDef&);
    // not implemented

    friend class IPAAgentCorbaDef;
  };

  class _pof_IPAAgentCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IPAAgentCorbaDef() : _OMNI_NS(proxyObjectFactory)(IPAAgentCorbaDef::_PD_repoId) {}
    virtual ~_pof_IPAAgentCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IPAAgentCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IPAAgentCorbaDef();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IPAAgentCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class IPAAgentCorbaDef :
    public virtual TA_Base_Bus::_impl_IPAAgentCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IPAAgentCorbaDef();

    inline ::TA_Base_Bus::IPAAgentCorbaDef_ptr _this() {
      return (::TA_Base_Bus::IPAAgentCorbaDef_ptr) _do_this(::TA_Base_Bus::IPAAgentCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EPaErrorId _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EPaErrorId& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::ePaErrorIdEndMark) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EPaErrorId) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EPaErrorId _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EPaErrorId& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaErrorException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaErrorException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaErrorException*& _sp);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EBroadcastType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::ZoneMonitoring) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBroadcastType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBroadcastType& _s);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::PendingRemoval) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState& _s);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EBackupKeyState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EBackupKeyState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::BackupUnlock) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EBackupKeyState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBackupKeyState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBackupKeyState& _s);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EGlobalState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EGlobalState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::GLOBAL_STATE_END_MARK) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EGlobalState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EGlobalState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EGlobalState& _s);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::ELocalState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::ELocalState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::LOCAL_STATE_END_MARK) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::ELocalState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ELocalState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ELocalState& _s);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EMusicType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EMusicType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::OccMusic) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EMusicType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EMusicType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EMusicType& _s);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EScheduleUpdateType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EScheduleUpdateType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::ScheduleUpdate) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EScheduleUpdateType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EScheduleUpdateType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EScheduleUpdateType& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CoverageIndices& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CoverageIndices* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CoverageIndices*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CoverageIndices*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainCoverage& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainCoverage* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainCoverage*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainCoverage*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ZoneCoverage& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ZoneCoverage* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ZoneCoverage*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ZoneCoverage*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::MessageKeySeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::MessageKeySeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::MessageKeySeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::MessageKeySeq*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ScheduleDvaIds& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ScheduleDvaIds* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ScheduleDvaIds*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ScheduleDvaIds*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdType& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdType*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdTypeSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdTypeSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdTypeSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastIdTypeSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CurrentBroadcastsUpdateData& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CurrentBroadcastsUpdateData* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CurrentBroadcastsUpdateData*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CurrentBroadcastsUpdateData*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ScheduleBroadcastsUpdateData& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ScheduleBroadcastsUpdateData* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ScheduleBroadcastsUpdateData*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ScheduleBroadcastsUpdateData*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationMusicConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationMusicConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationMusicConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationMusicConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationLiveConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationLiveConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationLiveConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationLiveConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainCyclicParams& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainCyclicParams* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainCyclicParams*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainCyclicParams*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TriggeredBroadcastConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TriggeredBroadcastConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TriggeredBroadcastConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TriggeredBroadcastConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationCyclicParams& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationCyclicParams* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationCyclicParams*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationCyclicParams*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationDvaConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationDvaConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationDvaConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationDvaConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationRecordingConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationRecordingConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationRecordingConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationRecordingConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainLiveConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainLiveConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainLiveConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainLiveConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainDvaConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainDvaConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainDvaConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainDvaConfig*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfigSpecifics& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfigSpecifics* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfigSpecifics*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfigSpecifics*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastConfig*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::LocalProgress& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::LocalProgress* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::LocalProgress*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::LocalProgress*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::LocalProgressSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::LocalProgressSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::LocalProgressSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::LocalProgressSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ProgressReport& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ProgressReport* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::ProgressReport*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::ProgressReport*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecord& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecord* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecord*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecord*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecords& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecords* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecords*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::StationDvaMessageRecords*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecord& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecord* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecord*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecord*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecords& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecords* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecords*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::DvaVersionRecords*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecord& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecord* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecord*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecord*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecords& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecords* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecords*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::TrainDvaMessageRecords*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaSysParameter& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::PaSysParameter* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::PaSysParameter*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaSysParameter*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaSysParameterSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::PaSysParameterSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::PaSysParameterSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::PaSysParameterSeq*& _sp);

inline void operator >>=(TA_Base_Bus::IPAAgentCorbaDef::EBroadcastParameter _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastParameter& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IPAAgentCorbaDef::BROADCAST_PARAMETER_END_MARK) {
    _e = (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastParameter) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBroadcastParameter _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::EBroadcastParameter& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameter& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameter* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameter*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameter*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameterSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameterSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameterSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BroadcastParameterSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastState*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastStateSeq& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastStateSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastStateSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CompleteBroadcastStateSeq*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CompleteAgentState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CompleteAgentState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::CompleteAgentState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::CompleteAgentState*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BackupKeyStatus& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BackupKeyStatus* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef::BackupKeyStatus*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPAAgentCorbaDef::BackupKeyStatus*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPAAgentCorbaDef_ptr& _s);



inline void
TA_Base_Bus::IPAAgentCorbaDef::_marshalObjRef(::TA_Base_Bus::IPAAgentCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_IPAAgentCorbaDef
#endif

#endif  // __IPAAgentCorbaDef_hh__

