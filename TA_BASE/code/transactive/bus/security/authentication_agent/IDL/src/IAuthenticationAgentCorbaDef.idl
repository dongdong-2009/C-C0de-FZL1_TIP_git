//
// The source code in this file is the property of
// Ripple Systems and is not for redistribution
// in any form.
//
// Source:   $File: //depot/TA_Common_V1_TIP/transactive/bus/security/authentication_agent/IDL/src/IAuthenticationAgentCorbaDef.idl $
// @author:  Nick Jardine
// @version: $Revision: #1 $
//
// Last modification: $DateTime: 2015/01/19 17:43:23 $
// Last modified by:  $Author: CM $
//
// Authentication Agent IDL Interface
//

#ifndef IAUTHENTICATIONAGENTCORBADEF_H_INCLUDED
#define IAUTHENTICATIONAGENTCORBADEF_H_INCLUDED

#include "core/exceptions/IDL/src/CommonExceptionsCorbaDef.idl"

module TA_Base_Bus
{
    interface IAuthenticationAgentCorbaDef
    {

        // Some typedefs and structs to be used within the interface
        typedef sequence<unsigned long> OperatorSequence;
        typedef sequence<unsigned long> ProfileSequence;

        struct SessionInfoCorbaDef
        {
            string SessionId;
            unsigned long UserId; // UserId is essentially redundant now because of the OperatorId sequence,
                                  // however it is kept in place to reduce the number of modifications required
                                  // for TD11122.
            OperatorSequence OperatorId;
            ProfileSequence ProfileId;
            unsigned long LocationId;
            unsigned long WorkstationId;
			boolean isDisplayOnly;
        };

        typedef sequence<SessionInfoCorbaDef> SessionInfoSequence;


        // The exceptions that can be thrown by this interface, and the enums to be used in them

        enum ESecurityReason    // Used to specify why the authentication was denied
        {
            INVALID_USER,           // The supplied user is not known to the system
            INVALID_PASSWORD,       // The supplied password is incorrect for the user
            INVALID_PROFILE,        // The supplied profile is not known to the system
            INVALID_LOCATION,       // The supplied location is not known to the system
            INVALID_WORKSTATION,    // The supplied workstation is not known to the system
            PROFILE_NOT_PERMITTED,  // The profile is not allowed for the supplied user
            LOCATION_NOT_PERMITTED, // The location is not allowed for the supplied profile
            INVALID_SESSION,        // The session is not a current, valid, session
            INVALID_PASSWORD_LENGTH,// The new password is too long or too short
			USER_LOCKED,				// The supplied user is locked
			PASSWORD_USEDBEFORE
        };

        exception AuthenticationSecurityException
        {
            ESecurityReason reason;
            string description;
        };

        exception AuthenticationAgentException
        {
            string reason;
        };

        /**
         * requestSession
         *
         * This method checks the supplied credentials and creates sessions if they are sufficient.
         *
         * @param    userId         The key to the user id in the operation table
         * @param    profileId      The key to the profile the user is logging in under
         * @param    locationId     The key to the location the user wants to use the profile for
         * @param    workstationId  The key to the workstation from which the user is attempting to gain access
         * @param    password       The password with which the user is attempting to log in.
         *
         * @return The ID of the new session as a string
         *
         * @exception AuthenticationSecurityException Thrown if the log in attpemt fails for security reasons.
         * @exception AuthenticationAgentException Thrown if there is a general error with the
         * log in attempt.
         */
        string requestSession(in unsigned long userId, 
                              in unsigned long profileId, 
                              in unsigned long locationId, 
                              in unsigned long workstationId, 
                              in string password,
							  in boolean displayOnly) raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * changePassword
         *
         * This method updates the password for the user of the specified session, and notifies all
         * other Authentication Agents of the change.
         *
         * @param sessionId     The session ID from which the password change request is being made.
         * @param newPassword   The new password to set for the user related to the specified session.
         *
         * @return true if the password change was successful, false otherwise.
         *
         * @exception AuthenticationSecurityException Thrown if the session is not valid.
         * @exception AuthenticationAgentException Thrown if there is a problem changing the password.
         *
         * pre: The password CANNOT be the empty string.
         */
        void changePassword(in string sessionId, in string oldPassword, in string newPassword) 
		raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * beginOverride
         *
         * Associates the profile the overriding user is logging into with the session of the base user.
         *
         * @param sessionId      The session that is being overriden
         * @param userId         The key to the user id in the operation table
         * @param profileId      The key to the profile the user is logging in under
         * @param locationId     The key to the location the user wants to use the profile for
         * @param password       The password with which the user is attempting to log in.
         *
         * Note: The workstation ID is not a parameter, as it is taken from the passed in session ID.
         *
         * @return true if the override was successful
         *
         * @exception AuthenitcationSecurityException Thrown if the override is denied for seucrity reasons.
         * @exception AuthenticationAgentException Thrown if there is a probelm initaiting override.
         */
        void beginOverride(in string sessionId, 
                           in unsigned long userId, 
                           in unsigned long profileId, 
                           in unsigned long locationId, 
                           in string password) raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * endOverride
         *
         * This method removes any additional profiles associated with the specified session.
         *
         * @param sessionId     The session for which to remove overrides.
         *
         * @exception Thrown if there is a problem removing the overrides.
         */
        void endOverride(in string sessionId)
		 raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * changeProfile
         *
         * This method moves the operator logged into the specified session to a new profile, with a new session ID. This method
         * creates the new session before ending the old one, to allow the operator to continue using their current session of the
         * log in is denied.
         *
         * @param sessionId     The session the operator is currently using.
         * @param profileId     The ID of the new profile the operator wishes to change to.
         * @param locationId    The ID of the location for the new profile
         * @param password      The password for the new user.
         *
         * @return The ID of the new session as a string
         *
         * @exception AuthenitcationSecurityException Thrown if the override is denied for seucrity reasons.
         * @exception AuthentiactionAgentException Thrown if there is a problem logging the operator into the new session.
         */
        string changeProfile(in string sessionId, 
                             in unsigned long profileId, 
                             in unsigned long locationId, 
                             in string password,
							  in boolean displayOnly) raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * getProfiles
         *
         * Checks the supplied session Id to determine if it is a current session (that is, not yet expired), and if it is, 
         * will return the profiles associated with the session.
         *
         * @param    sessionId    The session Id to check for validity.
         *
         * @return A vector of profileId's representing the profiles associated with the session. If the vector is empty
         * (i.e. vector.size() == 0), the session is not currently valid.
         *
         * @exception AuthenticationAgentException Thrown if there is a problem retrieving the profile IDs.
         */
        ProfileSequence getProfiles(in string sessionId) raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * getSessionInfo
         *
         * This method retrieves information about the requested session. It should be used by applications wishing
         * to determine session information, rather than going directly to the security tables in the database.
         *
         * @param sessionId             The ID of the session for which to retrieve information
         * @param requestingSessionId   The ID of the session making the request.
         *
         * @return The information about this session in a SessionInfo struct.
         *
         * @exception AuthentiactionAgentException Thrown if there is a problem retrieving the session information.
         */
        SessionInfoCorbaDef getSessionInfo(in string sessionId, in string requestingSessionId)
		 raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * endSession
         *
         * Ends the specified session, by removing it from the session register. After this method has been called,
         * any calls to getProfiles() will return an empty vector.
         *
         * @param sessionId     The ID of the session to end.
         *
         * @exception AuthenticationSecurityExcetpion Thrown if the session is not valid.
         * @exception AuthenticationAgentExcetpion  Thrown if there is a problem ending the session.
         */
        void endSession(in string sessionId) raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


        /**
         * getActiveSessions
         *
         * Retrieves a list of all the currently active sessions in the system.
         *
         * @param sessionId     The ID of the session that is retrieving all others.
         *
         * @return the list of all currently active sessions as a vector of SessionInfo objects
         *
         * @exception AuthenticationAgentExcetpion  Thrown if there is a problem ending the session.
         */
        SessionInfoSequence getActiveSessions(in string sessionId) 
		raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);


		/**
         * keepSessionAlive
         *
         * Informs the Authentication Agent that a session is still alive at a specific time.
		 * This should be called periodically while a session is active.
         *
		 * @param timestmp		Last time known that session was still active (current time)
         * @param sessionId     The ID of the session that is retrieving all others.
         *
         * @exception AuthenticationAgentException  Thrown if session is not valid.
         */
		void keepSessionAlive(in long timestamp, in string sessionId)
		raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);
    	/**
         * beginDisplayonly
         *
         * if 'display' is true, start displayonly mode, else ,end displayonly mode
		 * 
         */
		void beginDisplayonly(in boolean display) raises ( AuthenticationSecurityException, AuthenticationAgentException ,TA_Base_Core::OperationModeException);

};
};
#endif //IAUTHENTICATIONAGENTCORBADEF_H_INCLUDED
