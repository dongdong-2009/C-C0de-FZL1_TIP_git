// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __IAuthenticationAgentCorbaDef_hh__
#define __IAuthenticationAgentCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mIAuthenticationAgentCorbaDef__
#define __TA__Base__Bus_mIAuthenticationAgentCorbaDef__

  class IAuthenticationAgentCorbaDef;
  class _objref_IAuthenticationAgentCorbaDef;
  class _impl_IAuthenticationAgentCorbaDef;
  
  typedef _objref_IAuthenticationAgentCorbaDef* IAuthenticationAgentCorbaDef_ptr;
  typedef IAuthenticationAgentCorbaDef_ptr IAuthenticationAgentCorbaDefRef;

  class IAuthenticationAgentCorbaDef_Helper {
  public:
    typedef IAuthenticationAgentCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IAuthenticationAgentCorbaDef, IAuthenticationAgentCorbaDef_Helper> IAuthenticationAgentCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IAuthenticationAgentCorbaDef,IAuthenticationAgentCorbaDef_Helper > IAuthenticationAgentCorbaDef_out;

#endif

  // interface IAuthenticationAgentCorbaDef
  class IAuthenticationAgentCorbaDef {
  public:
    // Declarations for this interface type.
    typedef IAuthenticationAgentCorbaDef_ptr _ptr_type;
    typedef IAuthenticationAgentCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_OperatorSequence;

    class OperatorSequence_var;

    class OperatorSequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef OperatorSequence_var _var_type;
      inline OperatorSequence() {}
      inline OperatorSequence(const OperatorSequence& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline OperatorSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline OperatorSequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline OperatorSequence& operator = (const OperatorSequence& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class OperatorSequence_out;

    class OperatorSequence_var {
    public:
      inline OperatorSequence_var() : _pd_seq(0) {}
      inline OperatorSequence_var(OperatorSequence* _s) : _pd_seq(_s) {}
      inline OperatorSequence_var(const OperatorSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new OperatorSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~OperatorSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline OperatorSequence_var& operator = (OperatorSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline OperatorSequence_var& operator = (const OperatorSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new OperatorSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline OperatorSequence* operator -> () { return _pd_seq; }
      inline const OperatorSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator OperatorSequence& () const { return *_pd_seq; }
#else
      inline operator const OperatorSequence& () const { return *_pd_seq; }
      inline operator OperatorSequence& () { return *_pd_seq; }
#endif
        
      inline const OperatorSequence& in() const { return *_pd_seq; }
      inline OperatorSequence&       inout()    { return *_pd_seq; }
      inline OperatorSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline OperatorSequence* _retn() { OperatorSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class OperatorSequence_out;
      
    private:
      OperatorSequence* _pd_seq;
    };

    class OperatorSequence_out {
    public:
      inline OperatorSequence_out(OperatorSequence*& _s) : _data(_s) { _data = 0; }
      inline OperatorSequence_out(OperatorSequence_var& _s)
        : _data(_s._pd_seq) { _s = (OperatorSequence*) 0; }
      inline OperatorSequence_out(const OperatorSequence_out& _s) : _data(_s._data) {}
      inline OperatorSequence_out& operator = (const OperatorSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline OperatorSequence_out& operator = (OperatorSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator OperatorSequence*&()  { return _data; }
      inline OperatorSequence*& ptr()       { return _data; }
      inline OperatorSequence* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      OperatorSequence*& _data;

    private:
      OperatorSequence_out();
      OperatorSequence_out& operator=(const OperatorSequence_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProfileSequence;

    class ProfileSequence_var;

    class ProfileSequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef ProfileSequence_var _var_type;
      inline ProfileSequence() {}
      inline ProfileSequence(const ProfileSequence& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline ProfileSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline ProfileSequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline ProfileSequence& operator = (const ProfileSequence& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class ProfileSequence_out;

    class ProfileSequence_var {
    public:
      inline ProfileSequence_var() : _pd_seq(0) {}
      inline ProfileSequence_var(ProfileSequence* _s) : _pd_seq(_s) {}
      inline ProfileSequence_var(const ProfileSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new ProfileSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~ProfileSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline ProfileSequence_var& operator = (ProfileSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ProfileSequence_var& operator = (const ProfileSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new ProfileSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ProfileSequence* operator -> () { return _pd_seq; }
      inline const ProfileSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ProfileSequence& () const { return *_pd_seq; }
#else
      inline operator const ProfileSequence& () const { return *_pd_seq; }
      inline operator ProfileSequence& () { return *_pd_seq; }
#endif
        
      inline const ProfileSequence& in() const { return *_pd_seq; }
      inline ProfileSequence&       inout()    { return *_pd_seq; }
      inline ProfileSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ProfileSequence* _retn() { ProfileSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ProfileSequence_out;
      
    private:
      ProfileSequence* _pd_seq;
    };

    class ProfileSequence_out {
    public:
      inline ProfileSequence_out(ProfileSequence*& _s) : _data(_s) { _data = 0; }
      inline ProfileSequence_out(ProfileSequence_var& _s)
        : _data(_s._pd_seq) { _s = (ProfileSequence*) 0; }
      inline ProfileSequence_out(const ProfileSequence_out& _s) : _data(_s._data) {}
      inline ProfileSequence_out& operator = (const ProfileSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ProfileSequence_out& operator = (ProfileSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator ProfileSequence*&()  { return _data; }
      inline ProfileSequence*& ptr()       { return _data; }
      inline ProfileSequence* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ProfileSequence*& _data;

    private:
      ProfileSequence_out();
      ProfileSequence_out& operator=(const ProfileSequence_var&);
    };

    struct SessionInfoCorbaDef {
      typedef _CORBA_ConstrType_Variable_Var<SessionInfoCorbaDef> _var_type;

      
      ::CORBA::String_member SessionId;

      ::CORBA::ULong UserId;

      OperatorSequence OperatorId;

      ProfileSequence ProfileId;

      ::CORBA::ULong LocationId;

      ::CORBA::ULong WorkstationId;

      ::CORBA::Boolean isDisplayOnly;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SessionInfoCorbaDef::_var_type SessionInfoCorbaDef_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SessionInfoCorbaDef,SessionInfoCorbaDef_var > SessionInfoCorbaDef_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionInfoCorbaDef;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionInfoSequence;

    class SessionInfoSequence_var;

    class SessionInfoSequence : public _CORBA_Unbounded_Sequence< SessionInfoCorbaDef >  {
    public:
      typedef SessionInfoSequence_var _var_type;
      inline SessionInfoSequence() {}
      inline SessionInfoSequence(const SessionInfoSequence& _s)
        : _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > (_s) {}

      inline SessionInfoSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > (_max) {}
      inline SessionInfoSequence(_CORBA_ULong _max, _CORBA_ULong _len, SessionInfoCorbaDef* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > (_max, _len, _val, _rel) {}

    

      inline SessionInfoSequence& operator = (const SessionInfoSequence& _s) {
        _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > ::operator=(_s);
        return *this;
      }
    };

    class SessionInfoSequence_out;

    class SessionInfoSequence_var {
    public:
      inline SessionInfoSequence_var() : _pd_seq(0) {}
      inline SessionInfoSequence_var(SessionInfoSequence* _s) : _pd_seq(_s) {}
      inline SessionInfoSequence_var(const SessionInfoSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new SessionInfoSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~SessionInfoSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline SessionInfoSequence_var& operator = (SessionInfoSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline SessionInfoSequence_var& operator = (const SessionInfoSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new SessionInfoSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline SessionInfoCorbaDef& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline SessionInfoSequence* operator -> () { return _pd_seq; }
      inline const SessionInfoSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator SessionInfoSequence& () const { return *_pd_seq; }
#else
      inline operator const SessionInfoSequence& () const { return *_pd_seq; }
      inline operator SessionInfoSequence& () { return *_pd_seq; }
#endif
        
      inline const SessionInfoSequence& in() const { return *_pd_seq; }
      inline SessionInfoSequence&       inout()    { return *_pd_seq; }
      inline SessionInfoSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline SessionInfoSequence* _retn() { SessionInfoSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class SessionInfoSequence_out;
      
    private:
      SessionInfoSequence* _pd_seq;
    };

    class SessionInfoSequence_out {
    public:
      inline SessionInfoSequence_out(SessionInfoSequence*& _s) : _data(_s) { _data = 0; }
      inline SessionInfoSequence_out(SessionInfoSequence_var& _s)
        : _data(_s._pd_seq) { _s = (SessionInfoSequence*) 0; }
      inline SessionInfoSequence_out(const SessionInfoSequence_out& _s) : _data(_s._data) {}
      inline SessionInfoSequence_out& operator = (const SessionInfoSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline SessionInfoSequence_out& operator = (SessionInfoSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator SessionInfoSequence*&()  { return _data; }
      inline SessionInfoSequence*& ptr()       { return _data; }
      inline SessionInfoSequence* operator->() { return _data; }

      inline SessionInfoCorbaDef& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      SessionInfoSequence*& _data;

    private:
      SessionInfoSequence_out();
      SessionInfoSequence_out& operator=(const SessionInfoSequence_var&);
    };

    enum ESecurityReason { INVALID_USER, INVALID_PASSWORD, INVALID_PROFILE, INVALID_LOCATION, INVALID_WORKSTATION, PROFILE_NOT_PERMITTED, LOCATION_NOT_PERMITTED, INVALID_SESSION, INVALID_PASSWORD_LENGTH, USER_LOCKED, PASSWORD_USEDBEFORE /*, __max_ESecurityReason=0xffffffff */ };
    typedef ESecurityReason& ESecurityReason_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ESecurityReason;

    class AuthenticationSecurityException : public ::CORBA::UserException {
    public:
      
      ESecurityReason reason;

      ::CORBA::String_member description;

    

      inline AuthenticationSecurityException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AuthenticationSecurityException(const AuthenticationSecurityException&);
      AuthenticationSecurityException(ESecurityReason i_reason, const char* i_description);
      AuthenticationSecurityException& operator=(const AuthenticationSecurityException&);
      virtual ~AuthenticationSecurityException();
      virtual void _raise() const;
      static AuthenticationSecurityException* _downcast(::CORBA::Exception*);
      static const AuthenticationSecurityException* _downcast(const ::CORBA::Exception*);
      static inline AuthenticationSecurityException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuthenticationSecurityException;

    class AuthenticationAgentException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member reason;

    

      inline AuthenticationAgentException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AuthenticationAgentException(const AuthenticationAgentException&);
      AuthenticationAgentException(const char* i_reason);
      AuthenticationAgentException& operator=(const AuthenticationAgentException&);
      virtual ~AuthenticationAgentException();
      virtual void _raise() const;
      static AuthenticationAgentException* _downcast(::CORBA::Exception*);
      static const AuthenticationAgentException* _downcast(const ::CORBA::Exception*);
      static inline AuthenticationAgentException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuthenticationAgentException;

  
  };

  class _objref_IAuthenticationAgentCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    char* requestSession(::CORBA::ULong userId, ::CORBA::ULong profileId, ::CORBA::ULong locationId, ::CORBA::ULong workstationId, const char* password, ::CORBA::Boolean displayOnly);
    void changePassword(const char* sessionId, const char* oldPassword, const char* newPassword);
    void beginOverride(const char* sessionId, ::CORBA::ULong userId, ::CORBA::ULong profileId, ::CORBA::ULong locationId, const char* password);
    void endOverride(const char* sessionId);
    char* changeProfile(const char* sessionId, ::CORBA::ULong profileId, ::CORBA::ULong locationId, const char* password, ::CORBA::Boolean displayOnly);
    IAuthenticationAgentCorbaDef::ProfileSequence* getProfiles(const char* sessionId);
    IAuthenticationAgentCorbaDef::SessionInfoCorbaDef* getSessionInfo(const char* sessionId, const char* requestingSessionId);
    void endSession(const char* sessionId);
    IAuthenticationAgentCorbaDef::SessionInfoSequence* getActiveSessions(const char* sessionId);
    void keepSessionAlive(::CORBA::Long timestamp, const char* sessionId);
    void beginDisplayonly(::CORBA::Boolean display);

    inline _objref_IAuthenticationAgentCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_IAuthenticationAgentCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IAuthenticationAgentCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IAuthenticationAgentCorbaDef(const _objref_IAuthenticationAgentCorbaDef&);
    _objref_IAuthenticationAgentCorbaDef& operator = (const _objref_IAuthenticationAgentCorbaDef&);
    // not implemented

    friend class IAuthenticationAgentCorbaDef;
  };

  class _pof_IAuthenticationAgentCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IAuthenticationAgentCorbaDef() : _OMNI_NS(proxyObjectFactory)(IAuthenticationAgentCorbaDef::_PD_repoId) {}
    virtual ~_pof_IAuthenticationAgentCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IAuthenticationAgentCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IAuthenticationAgentCorbaDef();

    virtual char* requestSession(::CORBA::ULong userId, ::CORBA::ULong profileId, ::CORBA::ULong locationId, ::CORBA::ULong workstationId, const char* password, ::CORBA::Boolean displayOnly) = 0;
    virtual void changePassword(const char* sessionId, const char* oldPassword, const char* newPassword) = 0;
    virtual void beginOverride(const char* sessionId, ::CORBA::ULong userId, ::CORBA::ULong profileId, ::CORBA::ULong locationId, const char* password) = 0;
    virtual void endOverride(const char* sessionId) = 0;
    virtual char* changeProfile(const char* sessionId, ::CORBA::ULong profileId, ::CORBA::ULong locationId, const char* password, ::CORBA::Boolean displayOnly) = 0;
    virtual IAuthenticationAgentCorbaDef::ProfileSequence* getProfiles(const char* sessionId) = 0;
    virtual IAuthenticationAgentCorbaDef::SessionInfoCorbaDef* getSessionInfo(const char* sessionId, const char* requestingSessionId) = 0;
    virtual void endSession(const char* sessionId) = 0;
    virtual IAuthenticationAgentCorbaDef::SessionInfoSequence* getActiveSessions(const char* sessionId) = 0;
    virtual void keepSessionAlive(::CORBA::Long timestamp, const char* sessionId) = 0;
    virtual void beginDisplayonly(::CORBA::Boolean display) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IAuthenticationAgentCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class IAuthenticationAgentCorbaDef :
    public virtual TA_Base_Bus::_impl_IAuthenticationAgentCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IAuthenticationAgentCorbaDef();

    inline ::TA_Base_Bus::IAuthenticationAgentCorbaDef_ptr _this() {
      return (::TA_Base_Bus::IAuthenticationAgentCorbaDef_ptr) _do_this(::TA_Base_Bus::IAuthenticationAgentCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::OperatorSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::OperatorSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::OperatorSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::OperatorSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::ProfileSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::ProfileSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::ProfileSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::ProfileSequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::SessionInfoSequence*& _sp);

inline void operator >>=(TA_Base_Bus::IAuthenticationAgentCorbaDef::ESecurityReason _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::IAuthenticationAgentCorbaDef::ESecurityReason& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::IAuthenticationAgentCorbaDef::PASSWORD_USEDBEFORE) {
    _e = (TA_Base_Bus::IAuthenticationAgentCorbaDef::ESecurityReason) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::ESecurityReason _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef::ESecurityReason& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::AuthenticationSecurityException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::AuthenticationSecurityException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::AuthenticationSecurityException*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::AuthenticationAgentException& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::AuthenticationAgentException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IAuthenticationAgentCorbaDef::AuthenticationAgentException*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IAuthenticationAgentCorbaDef_ptr& _s);



inline void
TA_Base_Bus::IAuthenticationAgentCorbaDef::_marshalObjRef(::TA_Base_Bus::IAuthenticationAgentCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_IAuthenticationAgentCorbaDef
#endif

#endif  // __IAuthenticationAgentCorbaDef_hh__

