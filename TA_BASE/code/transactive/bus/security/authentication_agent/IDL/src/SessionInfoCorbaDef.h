// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SessionInfoCorbaDef_hh__
#define __SessionInfoCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

  _CORBA_MODULE TA_Security

  _CORBA_MODULE_BEG

    enum EUpdateType { SessionStart, SessionEnd, ProfileUpdate, BeginOverride, EndOverride /*, __max_EUpdateType=0xffffffff */ };
    typedef EUpdateType& EUpdateType_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EUpdateType;

  _CORBA_MODULE_END

  struct SessionInfoCorbaDef {
    typedef _CORBA_ConstrType_Variable_Var<SessionInfoCorbaDef> _var_type;

    
    ::CORBA::String_member SessionId;

    ::CORBA::ULong UserId;

    ::CORBA::ULong ProfileId;

    ::CORBA::ULong LocationId;

    ::CORBA::ULong WorkstationId;

    ::CORBA::Boolean isDisplayOnly;

    TA_Security::EUpdateType updateType;

    typedef _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  _additionalOperators_seq;
    _additionalOperators_seq additionalOperators;

    typedef _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  _additionalProfiles_seq;
    _additionalProfiles_seq additionalProfiles;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef SessionInfoCorbaDef::_var_type SessionInfoCorbaDef_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< SessionInfoCorbaDef,SessionInfoCorbaDef_var > SessionInfoCorbaDef_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionInfoCorbaDef;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SessionInfoSequence;

  class SessionInfoSequence_var;

  class SessionInfoSequence : public _CORBA_Unbounded_Sequence< SessionInfoCorbaDef >  {
  public:
    typedef SessionInfoSequence_var _var_type;
    inline SessionInfoSequence() {}
    inline SessionInfoSequence(const SessionInfoSequence& _s)
      : _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > (_s) {}

    inline SessionInfoSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > (_max) {}
    inline SessionInfoSequence(_CORBA_ULong _max, _CORBA_ULong _len, SessionInfoCorbaDef* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > (_max, _len, _val, _rel) {}

  

    inline SessionInfoSequence& operator = (const SessionInfoSequence& _s) {
      _CORBA_Unbounded_Sequence< SessionInfoCorbaDef > ::operator=(_s);
      return *this;
    }
  };

  class SessionInfoSequence_out;

  class SessionInfoSequence_var {
  public:
    inline SessionInfoSequence_var() : _pd_seq(0) {}
    inline SessionInfoSequence_var(SessionInfoSequence* _s) : _pd_seq(_s) {}
    inline SessionInfoSequence_var(const SessionInfoSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new SessionInfoSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~SessionInfoSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline SessionInfoSequence_var& operator = (SessionInfoSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline SessionInfoSequence_var& operator = (const SessionInfoSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new SessionInfoSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline SessionInfoCorbaDef& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline SessionInfoSequence* operator -> () { return _pd_seq; }
    inline const SessionInfoSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator SessionInfoSequence& () const { return *_pd_seq; }
#else
    inline operator const SessionInfoSequence& () const { return *_pd_seq; }
    inline operator SessionInfoSequence& () { return *_pd_seq; }
#endif
      
    inline const SessionInfoSequence& in() const { return *_pd_seq; }
    inline SessionInfoSequence&       inout()    { return *_pd_seq; }
    inline SessionInfoSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline SessionInfoSequence* _retn() { SessionInfoSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class SessionInfoSequence_out;
    
  private:
    SessionInfoSequence* _pd_seq;
  };

  class SessionInfoSequence_out {
  public:
    inline SessionInfoSequence_out(SessionInfoSequence*& _s) : _data(_s) { _data = 0; }
    inline SessionInfoSequence_out(SessionInfoSequence_var& _s)
      : _data(_s._pd_seq) { _s = (SessionInfoSequence*) 0; }
    inline SessionInfoSequence_out(const SessionInfoSequence_out& _s) : _data(_s._data) {}
    inline SessionInfoSequence_out& operator = (const SessionInfoSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline SessionInfoSequence_out& operator = (SessionInfoSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator SessionInfoSequence*&()  { return _data; }
    inline SessionInfoSequence*& ptr()       { return _data; }
    inline SessionInfoSequence* operator->() { return _data; }

    inline SessionInfoCorbaDef& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    SessionInfoSequence*& _data;

  private:
    SessionInfoSequence_out();
    SessionInfoSequence_out& operator=(const SessionInfoSequence_var&);
  };

  struct AuthentcationBatchUpdateCorbaDef {
    typedef _CORBA_ConstrType_Variable_Var<AuthentcationBatchUpdateCorbaDef> _var_type;

    
    SessionInfoSequence DatabaseQueue;

    SessionInfoSequence SessionRegister;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AuthentcationBatchUpdateCorbaDef::_var_type AuthentcationBatchUpdateCorbaDef_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< AuthentcationBatchUpdateCorbaDef,AuthentcationBatchUpdateCorbaDef_var > AuthentcationBatchUpdateCorbaDef_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AuthentcationBatchUpdateCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  _CORBA_MODULE TA_Security
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

  _CORBA_MODULE TA_Security
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::TA_Security::EUpdateType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::TA_Security::EUpdateType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::TA_Security::EndOverride) {
    _e = (TA_Base_Bus::TA_Security::EUpdateType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::TA_Security::EUpdateType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::TA_Security::EUpdateType& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SessionInfoCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SessionInfoCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SessionInfoCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SessionInfoCorbaDef*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SessionInfoSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SessionInfoSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SessionInfoSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SessionInfoSequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::AuthentcationBatchUpdateCorbaDef& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::AuthentcationBatchUpdateCorbaDef* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::AuthentcationBatchUpdateCorbaDef*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::AuthentcationBatchUpdateCorbaDef*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SessionInfoCorbaDef
#endif

#endif  // __SessionInfoCorbaDef_hh__

