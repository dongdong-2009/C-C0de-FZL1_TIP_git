// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __IPlanAgentCorbaDef_hh__
#define __IPlanAgentCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __PlanAgentDataCorbaDef_hh_EXTERNAL_GUARD__
#define __PlanAgentDataCorbaDef_hh_EXTERNAL_GUARD__
#include <PlanAgentDataCorbaDef.h>
#endif
#ifndef __IPlanManagerCorbaDef_hh_EXTERNAL_GUARD__
#define __IPlanManagerCorbaDef_hh_EXTERNAL_GUARD__
#include <IPlanManagerCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanManager;

  typedef IPlanManagerCorbaDef PlanManager;
  typedef IPlanManagerCorbaDef_ptr PlanManager_ptr;
  typedef IPlanManagerCorbaDefRef PlanManagerRef;
  typedef _impl_IPlanManagerCorbaDef _impl_PlanManager;
  typedef IPlanManagerCorbaDef_Helper PlanManager_Helper;
  typedef _objref_IPlanManagerCorbaDef _objref_PlanManager;
  typedef IPlanManagerCorbaDef_var PlanManager_var;
  typedef IPlanManagerCorbaDef_out PlanManager_out;

#ifndef __TA__Base__Bus_mIPlanAgentCorbaDef__
#define __TA__Base__Bus_mIPlanAgentCorbaDef__

  class IPlanAgentCorbaDef;
  class _objref_IPlanAgentCorbaDef;
  class _impl_IPlanAgentCorbaDef;
  
  typedef _objref_IPlanAgentCorbaDef* IPlanAgentCorbaDef_ptr;
  typedef IPlanAgentCorbaDef_ptr IPlanAgentCorbaDefRef;

  class IPlanAgentCorbaDef_Helper {
  public:
    typedef IPlanAgentCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IPlanAgentCorbaDef, IPlanAgentCorbaDef_Helper> IPlanAgentCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IPlanAgentCorbaDef,IPlanAgentCorbaDef_Helper > IPlanAgentCorbaDef_out;

#endif

  // interface IPlanAgentCorbaDef
  class IPlanAgentCorbaDef {
  public:
    // Declarations for this interface type.
    typedef IPlanAgentCorbaDef_ptr _ptr_type;
    typedef IPlanAgentCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class PlanAgentError : public ::CORBA::UserException {
    public:
      
      TA_Base_Core::EPlanAgentError errorType;

      ::CORBA::ULong itemId;

      ::CORBA::String_member what;

    

      inline PlanAgentError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      PlanAgentError(const PlanAgentError&);
      PlanAgentError(TA_Base_Core::EPlanAgentError i_errorType, ::CORBA::ULong i_itemId, const char* i_what);
      PlanAgentError& operator=(const PlanAgentError&);
      virtual ~PlanAgentError();
      virtual void _raise() const;
      static PlanAgentError* _downcast(::CORBA::Exception*);
      static const PlanAgentError* _downcast(const ::CORBA::Exception*);
      static inline PlanAgentError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanAgentError;

    class PlanNotFoundError : public ::CORBA::UserException {
    public:
      
      TA_Base_Core::EPlanNotFoundError errorType;

      TA_Base_Core::NodeId planId;

      ::CORBA::ULong instanceId;

      ::CORBA::String_member what;

    

      inline PlanNotFoundError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      PlanNotFoundError(const PlanNotFoundError&);
      PlanNotFoundError(TA_Base_Core::EPlanNotFoundError i_errorType, TA_Base_Core::NodeId i_planId, ::CORBA::ULong i_instanceId, const char* i_what);
      PlanNotFoundError& operator=(const PlanNotFoundError&);
      virtual ~PlanNotFoundError();
      virtual void _raise() const;
      static PlanNotFoundError* _downcast(::CORBA::Exception*);
      static const PlanNotFoundError* _downcast(const ::CORBA::Exception*);
      static inline PlanNotFoundError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanNotFoundError;

    class PlanStepDetailError : public ::CORBA::UserException {
    public:
      
      TA_Base_Core::StepId stepId;

      TA_Base_Core::EPlanStepDetailType detailType;

      TA_Base_Core::EPlanStepDetailError errorType;

      ::CORBA::String_member what;

    

      inline PlanStepDetailError() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      PlanStepDetailError(const PlanStepDetailError&);
      PlanStepDetailError(TA_Base_Core::StepId i_stepId, TA_Base_Core::EPlanStepDetailType i_detailType, TA_Base_Core::EPlanStepDetailError i_errorType, const char* i_what);
      PlanStepDetailError& operator=(const PlanStepDetailError&);
      virtual ~PlanStepDetailError();
      virtual void _raise() const;
      static PlanStepDetailError* _downcast(::CORBA::Exception*);
      static const PlanStepDetailError* _downcast(const ::CORBA::Exception*);
      static inline PlanStepDetailError* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlanStepDetailError;

    class NoPermission : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member what;

    

      inline NoPermission() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      NoPermission(const NoPermission&);
      NoPermission(const char* i_what);
      NoPermission& operator=(const NoPermission&);
      virtual ~NoPermission();
      virtual void _raise() const;
      static NoPermission* _downcast(::CORBA::Exception*);
      static const NoPermission* _downcast(const ::CORBA::Exception*);
      static inline NoPermission* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_NoPermission;

  
  };

  class _objref_IPlanAgentCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean isRegisteredManager(const char* session, const char* pmId);
    void registerPlanManager(const char* session, const char* pmId, ::TA_Base_Bus::IPlanManagerCorbaDef_ptr planManagerRef);
    void deregisterPlanManager(const char* session, const char* pmId);
    ::CORBA::Boolean isOwner(const char* session, const ::TA_Base_Core::ActivePlanId& plan);
    void processDecisionStepResponse(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status);
    void processPromptStepResponse(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status);
    void processLogStepResponse(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* logMessage);
    void processRunPlanStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error);
    void processLaunchGuiAppStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error);
    void processLaunchSchematicStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error);
    void processFailureSummaryStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error);
    void processBackgroundDecisionStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status);
    void processBackgroundLaunchGuiAppStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status);
    void processBackgroundLaunchSchematicStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status);
    void processBackgroundLogStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* logMessage);
    void processBackgroundPromptStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status);
    void runPlan(const char* session, ::TA_Base_Core::ActivePlanId& plan);
    ::CORBA::ULong runPlanByName(const char* session, const char* path, const char* param);
    ::CORBA::ULong runPlanByNameWithoutActionPermittedCheck(const char* session, const char* path, const char* param);
    ::CORBA::ULong runPlanByNameWithEntityRestriction(const char* session, const char* path, ::CORBA::ULong entitykey);
    void runOperatorTriggeredPlan(const char* session, const char* pmId, ::TA_Base_Core::ActivePlanId& plan);
    void customisePlan(const char* session, const char* pmId, ::TA_Base_Core::ActivePlanId& plan);
    void pausePlan(const char* session, const ::TA_Base_Core::ActivePlanId& plan);
    void resumePlan(const char* session, const ::TA_Base_Core::ActivePlanId& plan);
    void stopPlan(const char* session, const ::TA_Base_Core::ActivePlanId& plan);
    void takeControl(const char* session, const char* pmId, const ::TA_Base_Core::ActivePlanId& plan);
    void customiseStep(const char* session, const ::TA_Base_Core::ActivePlanId& plan, const ::TA_Base_Core::StepCustomisableDetail& detail);
    void getPlanExecutionHistory(const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::ExecutionHistory_out history);
    void getPlanCustomisationHistory(const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::CustomisationHistory_out history);
    void getRootNodeChildren(::TA_Base_Core::SiblingNodes_out children);
    void getChildren(::TA_Base_Core::NodeId parent, ::TA_Base_Core::SiblingNodes_out children);
    void getNodeDetail(::TA_Base_Core::NodeId node, ::TA_Base_Core::NodeDetail_out detail);
    void getNodePath(::TA_Base_Core::NodeId node, ::TA_Base_Core::NodePath_out path);
    void getNodeSummary(::TA_Base_Core::NodeId node, ::TA_Base_Core::NodeSummary_out summary);
    void getNodeIdsInNodePath(::TA_Base_Core::NodeId plan, ::TA_Base_Core::NodeIds_out plans);
    TA_Base_Core::NodeId getNodeId(const char* path);
    void getStepNames(::TA_Base_Core::StepNames_out names);
    void getAllStepDetails(::TA_Base_Core::NodeId plan, ::TA_Base_Core::StepDetails_out details);
    void getSpecifiedStepDetails(::TA_Base_Core::NodeId plan, const ::TA_Base_Core::StepIds& steps, ::TA_Base_Core::StepDetails_out details);
    void getStepNumber(::TA_Base_Core::StepId step, ::TA_Base_Core::StepNumber& position);
    void getParameterNames(::TA_Base_Core::EStep stepType, ::TA_Base_Core::ParameterNames_out names);
    void getStepNumberParameters(::TA_Base_Core::NodeId plan, ::TA_Base_Core::StepNumber position, ::TA_Base_Core::StepParameters_out parameters);
    void getStepIdParameters(::TA_Base_Core::StepId step, ::TA_Base_Core::StepParameters_out parameters);
    void getActivePlanDetail(::TA_Base_Core::NodeId plan, ::TA_Base_Core::ActivePlanDetails_out details);
    void getAssocAlarmPlanDetail(const char* assocAlarmId, ::TA_Base_Core::ActivePlanDetail_out detail);
    void getActivePlanDetailByName(const char* path, ::TA_Base_Core::ActivePlanDetails_out details);
    void getAllActivePlanDetails(::TA_Base_Core::ActivePlanDetails_out details);
    void getEditPlanLock(const char* session, const char* pmId, ::TA_Base_Core::NodeId plan);
    void releaseEditPlanLock(const char* session, ::TA_Base_Core::NodeId plan);
    void setPlanApprovalState(const char* session, ::TA_Base_Core::NodeId plan, ::TA_Base_Core::EApprovalState state);
    void setPlanType(const char* session, ::TA_Base_Core::NodeId plan, ::TA_Base_Core::EPlanType state);
    void updateCategoryDetail(const char* session, const ::TA_Base_Core::CategoryDetail& detail);
    void insertCategory(const char* session, ::TA_Base_Core::NodeId parent);
    void deleteCategory(const char* session, ::TA_Base_Core::NodeId category);
    void updatePlanDetail(const char* session, const ::TA_Base_Core::PlanDetail& detail);
    void insertPlanIntoRoot(const char* session);
    void insertCategoryIntoRoot(const char* session);
    void insertPlan(const char* session, ::TA_Base_Core::NodeId parent);
    void updatePlan(const char* session, const ::TA_Base_Core::Plan& plan);
    void deletePlans(const char* session, const ::TA_Base_Core::NodeIds& plans);
    void movePlanToRoot(const char* session, ::TA_Base_Core::NodeId plan, ::CORBA::Boolean useForce);
    void movePlan(const char* session, ::TA_Base_Core::NodeId fromPlan, ::TA_Base_Core::NodeId toParent, ::CORBA::Boolean useForce);
    void copyPlanToRoot(const char* session, ::TA_Base_Core::NodeId plan, ::CORBA::Boolean useForce);
    void copyPlan(const char* session, ::TA_Base_Core::NodeId fromPlan, ::TA_Base_Core::NodeId toParent, ::CORBA::Boolean useForce);
    void exportPlan(const char* session, ::TA_Base_Core::AuxPlanDetail_out plan, ::TA_Base_Core::NodeId planId);
    void importPlan(const char* session, const ::TA_Base_Core::AuxPlanDetail& plan, ::TA_Base_Core::NodeId parentId);
    void getNextStepId(const char* session, ::TA_Base_Core::StepId& step);

    inline _objref_IPlanAgentCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_IPlanAgentCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IPlanAgentCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IPlanAgentCorbaDef(const _objref_IPlanAgentCorbaDef&);
    _objref_IPlanAgentCorbaDef& operator = (const _objref_IPlanAgentCorbaDef&);
    // not implemented

    friend class IPlanAgentCorbaDef;
  };

  class _pof_IPlanAgentCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IPlanAgentCorbaDef() : _OMNI_NS(proxyObjectFactory)(IPlanAgentCorbaDef::_PD_repoId) {}
    virtual ~_pof_IPlanAgentCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IPlanAgentCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IPlanAgentCorbaDef();

    virtual ::CORBA::Boolean isRegisteredManager(const char* session, const char* pmId) = 0;
    virtual void registerPlanManager(const char* session, const char* pmId, ::TA_Base_Bus::IPlanManagerCorbaDef_ptr planManagerRef) = 0;
    virtual void deregisterPlanManager(const char* session, const char* pmId) = 0;
    virtual ::CORBA::Boolean isOwner(const char* session, const ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void processDecisionStepResponse(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status) = 0;
    virtual void processPromptStepResponse(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status) = 0;
    virtual void processLogStepResponse(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* logMessage) = 0;
    virtual void processRunPlanStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error) = 0;
    virtual void processLaunchGuiAppStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error) = 0;
    virtual void processLaunchSchematicStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error) = 0;
    virtual void processFailureSummaryStepResult(const char* session, const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* error) = 0;
    virtual void processBackgroundDecisionStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status) = 0;
    virtual void processBackgroundLaunchGuiAppStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status) = 0;
    virtual void processBackgroundLaunchSchematicStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status) = 0;
    virtual void processBackgroundLogStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status, const char* logMessage) = 0;
    virtual void processBackgroundPromptStepResponse(const ::TA_Base_Core::CurrentPlanStepDetail& currentStepDetail, ::TA_Base_Core::EPlanStepCompletionStatus status) = 0;
    virtual void runPlan(const char* session, ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual ::CORBA::ULong runPlanByName(const char* session, const char* path, const char* param) = 0;
    virtual ::CORBA::ULong runPlanByNameWithoutActionPermittedCheck(const char* session, const char* path, const char* param) = 0;
    virtual ::CORBA::ULong runPlanByNameWithEntityRestriction(const char* session, const char* path, ::CORBA::ULong entitykey) = 0;
    virtual void runOperatorTriggeredPlan(const char* session, const char* pmId, ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void customisePlan(const char* session, const char* pmId, ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void pausePlan(const char* session, const ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void resumePlan(const char* session, const ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void stopPlan(const char* session, const ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void takeControl(const char* session, const char* pmId, const ::TA_Base_Core::ActivePlanId& plan) = 0;
    virtual void customiseStep(const char* session, const ::TA_Base_Core::ActivePlanId& plan, const ::TA_Base_Core::StepCustomisableDetail& detail) = 0;
    virtual void getPlanExecutionHistory(const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::ExecutionHistory_out history) = 0;
    virtual void getPlanCustomisationHistory(const ::TA_Base_Core::ActivePlanId& plan, ::TA_Base_Core::CustomisationHistory_out history) = 0;
    virtual void getRootNodeChildren(::TA_Base_Core::SiblingNodes_out children) = 0;
    virtual void getChildren(::TA_Base_Core::NodeId parent, ::TA_Base_Core::SiblingNodes_out children) = 0;
    virtual void getNodeDetail(::TA_Base_Core::NodeId node, ::TA_Base_Core::NodeDetail_out detail) = 0;
    virtual void getNodePath(::TA_Base_Core::NodeId node, ::TA_Base_Core::NodePath_out path) = 0;
    virtual void getNodeSummary(::TA_Base_Core::NodeId node, ::TA_Base_Core::NodeSummary_out summary) = 0;
    virtual void getNodeIdsInNodePath(::TA_Base_Core::NodeId plan, ::TA_Base_Core::NodeIds_out plans) = 0;
    virtual TA_Base_Core::NodeId getNodeId(const char* path) = 0;
    virtual void getStepNames(::TA_Base_Core::StepNames_out names) = 0;
    virtual void getAllStepDetails(::TA_Base_Core::NodeId plan, ::TA_Base_Core::StepDetails_out details) = 0;
    virtual void getSpecifiedStepDetails(::TA_Base_Core::NodeId plan, const ::TA_Base_Core::StepIds& steps, ::TA_Base_Core::StepDetails_out details) = 0;
    virtual void getStepNumber(::TA_Base_Core::StepId step, ::TA_Base_Core::StepNumber& position) = 0;
    virtual void getParameterNames(::TA_Base_Core::EStep stepType, ::TA_Base_Core::ParameterNames_out names) = 0;
    virtual void getStepNumberParameters(::TA_Base_Core::NodeId plan, ::TA_Base_Core::StepNumber position, ::TA_Base_Core::StepParameters_out parameters) = 0;
    virtual void getStepIdParameters(::TA_Base_Core::StepId step, ::TA_Base_Core::StepParameters_out parameters) = 0;
    virtual void getActivePlanDetail(::TA_Base_Core::NodeId plan, ::TA_Base_Core::ActivePlanDetails_out details) = 0;
    virtual void getAssocAlarmPlanDetail(const char* assocAlarmId, ::TA_Base_Core::ActivePlanDetail_out detail) = 0;
    virtual void getActivePlanDetailByName(const char* path, ::TA_Base_Core::ActivePlanDetails_out details) = 0;
    virtual void getAllActivePlanDetails(::TA_Base_Core::ActivePlanDetails_out details) = 0;
    virtual void getEditPlanLock(const char* session, const char* pmId, ::TA_Base_Core::NodeId plan) = 0;
    virtual void releaseEditPlanLock(const char* session, ::TA_Base_Core::NodeId plan) = 0;
    virtual void setPlanApprovalState(const char* session, ::TA_Base_Core::NodeId plan, ::TA_Base_Core::EApprovalState state) = 0;
    virtual void setPlanType(const char* session, ::TA_Base_Core::NodeId plan, ::TA_Base_Core::EPlanType state) = 0;
    virtual void updateCategoryDetail(const char* session, const ::TA_Base_Core::CategoryDetail& detail) = 0;
    virtual void insertCategory(const char* session, ::TA_Base_Core::NodeId parent) = 0;
    virtual void deleteCategory(const char* session, ::TA_Base_Core::NodeId category) = 0;
    virtual void updatePlanDetail(const char* session, const ::TA_Base_Core::PlanDetail& detail) = 0;
    virtual void insertPlanIntoRoot(const char* session) = 0;
    virtual void insertCategoryIntoRoot(const char* session) = 0;
    virtual void insertPlan(const char* session, ::TA_Base_Core::NodeId parent) = 0;
    virtual void updatePlan(const char* session, const ::TA_Base_Core::Plan& plan) = 0;
    virtual void deletePlans(const char* session, const ::TA_Base_Core::NodeIds& plans) = 0;
    virtual void movePlanToRoot(const char* session, ::TA_Base_Core::NodeId plan, ::CORBA::Boolean useForce) = 0;
    virtual void movePlan(const char* session, ::TA_Base_Core::NodeId fromPlan, ::TA_Base_Core::NodeId toParent, ::CORBA::Boolean useForce) = 0;
    virtual void copyPlanToRoot(const char* session, ::TA_Base_Core::NodeId plan, ::CORBA::Boolean useForce) = 0;
    virtual void copyPlan(const char* session, ::TA_Base_Core::NodeId fromPlan, ::TA_Base_Core::NodeId toParent, ::CORBA::Boolean useForce) = 0;
    virtual void exportPlan(const char* session, ::TA_Base_Core::AuxPlanDetail_out plan, ::TA_Base_Core::NodeId planId) = 0;
    virtual void importPlan(const char* session, const ::TA_Base_Core::AuxPlanDetail& plan, ::TA_Base_Core::NodeId parentId) = 0;
    virtual void getNextStepId(const char* session, ::TA_Base_Core::StepId& step) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IPlanAgentCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class IPlanAgentCorbaDef :
    public virtual TA_Base_Bus::_impl_IPlanAgentCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IPlanAgentCorbaDef();

    inline ::TA_Base_Bus::IPlanAgentCorbaDef_ptr _this() {
      return (::TA_Base_Bus::IPlanAgentCorbaDef_ptr) _do_this(::TA_Base_Bus::IPlanAgentCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanAgentError& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanAgentError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanAgentError*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanNotFoundError& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanNotFoundError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanNotFoundError*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanStepDetailError& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanStepDetailError* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::PlanStepDetailError*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::NoPermission& _s);
void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::NoPermission* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::IPlanAgentCorbaDef::NoPermission*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPlanAgentCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::IPlanAgentCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::IPlanAgentCorbaDef_ptr& _s);



inline void
TA_Base_Bus::IPlanAgentCorbaDef::_marshalObjRef(::TA_Base_Bus::IPlanAgentCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_IPlanAgentCorbaDef
#endif

#endif  // __IPlanAgentCorbaDef_hh__

