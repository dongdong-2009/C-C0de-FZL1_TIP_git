// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SequenceCorbaDef_hh__
#define __SequenceCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif
#ifndef __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoSwitchResourceCorbaDef.h>
#endif
#ifndef __VideoInputCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoInputCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoInputCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mSequenceCorbaDef__
#define __TA__Base__Bus_mSequenceCorbaDef__

  class SequenceCorbaDef;
  class _objref_SequenceCorbaDef;
  class _impl_SequenceCorbaDef;
  
  typedef _objref_SequenceCorbaDef* SequenceCorbaDef_ptr;
  typedef SequenceCorbaDef_ptr SequenceCorbaDefRef;

  class SequenceCorbaDef_Helper {
  public:
    typedef SequenceCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_SequenceCorbaDef, SequenceCorbaDef_Helper> SequenceCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_SequenceCorbaDef,SequenceCorbaDef_Helper > SequenceCorbaDef_out;

#endif

  // interface SequenceCorbaDef
  class SequenceCorbaDef {
  public:
    // Declarations for this interface type.
    typedef SequenceCorbaDef_ptr _ptr_type;
    typedef SequenceCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoInputKeySequence;

    class VideoInputKeySequence_var;

    class VideoInputKeySequence : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 >  {
    public:
      typedef VideoInputKeySequence_var _var_type;
      inline VideoInputKeySequence() {}
      inline VideoInputKeySequence(const VideoInputKeySequence& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_s) {}

      inline VideoInputKeySequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max) {}
      inline VideoInputKeySequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::ULong* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline VideoInputKeySequence& operator = (const VideoInputKeySequence& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::ULong, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class VideoInputKeySequence_out;

    class VideoInputKeySequence_var {
    public:
      inline VideoInputKeySequence_var() : _pd_seq(0) {}
      inline VideoInputKeySequence_var(VideoInputKeySequence* _s) : _pd_seq(_s) {}
      inline VideoInputKeySequence_var(const VideoInputKeySequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new VideoInputKeySequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~VideoInputKeySequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline VideoInputKeySequence_var& operator = (VideoInputKeySequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline VideoInputKeySequence_var& operator = (const VideoInputKeySequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new VideoInputKeySequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::ULong& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline VideoInputKeySequence* operator -> () { return _pd_seq; }
      inline const VideoInputKeySequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator VideoInputKeySequence& () const { return *_pd_seq; }
#else
      inline operator const VideoInputKeySequence& () const { return *_pd_seq; }
      inline operator VideoInputKeySequence& () { return *_pd_seq; }
#endif
        
      inline const VideoInputKeySequence& in() const { return *_pd_seq; }
      inline VideoInputKeySequence&       inout()    { return *_pd_seq; }
      inline VideoInputKeySequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline VideoInputKeySequence* _retn() { VideoInputKeySequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class VideoInputKeySequence_out;
      
    private:
      VideoInputKeySequence* _pd_seq;
    };

    class VideoInputKeySequence_out {
    public:
      inline VideoInputKeySequence_out(VideoInputKeySequence*& _s) : _data(_s) { _data = 0; }
      inline VideoInputKeySequence_out(VideoInputKeySequence_var& _s)
        : _data(_s._pd_seq) { _s = (VideoInputKeySequence*) 0; }
      inline VideoInputKeySequence_out(const VideoInputKeySequence_out& _s) : _data(_s._data) {}
      inline VideoInputKeySequence_out& operator = (const VideoInputKeySequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline VideoInputKeySequence_out& operator = (VideoInputKeySequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator VideoInputKeySequence*&()  { return _data; }
      inline VideoInputKeySequence*& ptr()       { return _data; }
      inline VideoInputKeySequence* operator->() { return _data; }

      inline ::CORBA::ULong& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      VideoInputKeySequence*& _data;

    private:
      VideoInputKeySequence_out();
      VideoInputKeySequence_out& operator=(const VideoInputKeySequence_var&);
    };

    struct SequenceConfig {
      typedef _CORBA_ConstrType_Variable_Var<SequenceConfig> _var_type;

      
      ::CORBA::UShort dwellTime;

      VideoInputKeySequence inputKeySequence;

      ::CORBA::String_member description;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SequenceConfig::_var_type SequenceConfig_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< SequenceConfig,SequenceConfig_var > SequenceConfig_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SequenceConfig;

    enum ESequenceState { Playing, Paused, Stopped /*, __max_ESequenceState=0xffffffff */ };
    typedef ESequenceState& ESequenceState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ESequenceState;

    struct SequenceState {
      typedef _CORBA_ConstrType_Fix_Var<SequenceState> _var_type;

      
      ::CORBA::ULong videoOutputKey;

      ::CORBA::ULong currentCameraKey;

      ESequenceState currentState;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SequenceState::_var_type SequenceState_var;

    typedef SequenceState& SequenceState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SequenceState;

  
  };

  class _objref_SequenceCorbaDef :
    public virtual _objref_VideoInputCorbaDef
  {
  public:
    ::CORBA::Boolean isReadOnly();
    char* getSequenceDescription();
    void getDwellTimeRange(::CORBA::UShort& minimumDwellTime, ::CORBA::UShort& maximumDwellTime);
    ::CORBA::UShort getMaxNumberOfInputs();
    SequenceCorbaDef::SequenceConfig* getSequenceConfig();
    void setSequenceConfig(const ::TA_Base_Bus::SequenceCorbaDef::SequenceConfig& newConfig, const char* sessionId);
    void setSequenceDescription(const char* newDescription, const char* sessionId);
    void cycleToNextVideoInput(::CORBA::ULong videoOutputEntityKey, const char* sessionId);
    void cycleToPreviousVideoInput(::CORBA::ULong videoOutputEntityKey, const char* sessionId);
    void pause(::CORBA::ULong videoOutputEntityKey, const char* sessionId);
    void play(::CORBA::ULong videoOutputEntityKey, const char* sessionId);
    void stop(::CORBA::ULong videoOutputEntityKey, const char* sessionId);
    SequenceCorbaDef::SequenceState getSequenceState(::CORBA::ULong videoOutputEntityKey);

    inline _objref_SequenceCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_SequenceCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_SequenceCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_SequenceCorbaDef(const _objref_SequenceCorbaDef&);
    _objref_SequenceCorbaDef& operator = (const _objref_SequenceCorbaDef&);
    // not implemented

    friend class SequenceCorbaDef;
  };

  class _pof_SequenceCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_SequenceCorbaDef() : _OMNI_NS(proxyObjectFactory)(SequenceCorbaDef::_PD_repoId) {}
    virtual ~_pof_SequenceCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_SequenceCorbaDef :
    public virtual _impl_VideoInputCorbaDef
  {
  public:
    virtual ~_impl_SequenceCorbaDef();

    virtual ::CORBA::Boolean isReadOnly() = 0;
    virtual char* getSequenceDescription() = 0;
    virtual void getDwellTimeRange(::CORBA::UShort& minimumDwellTime, ::CORBA::UShort& maximumDwellTime) = 0;
    virtual ::CORBA::UShort getMaxNumberOfInputs() = 0;
    virtual SequenceCorbaDef::SequenceConfig* getSequenceConfig() = 0;
    virtual void setSequenceConfig(const ::TA_Base_Bus::SequenceCorbaDef::SequenceConfig& newConfig, const char* sessionId) = 0;
    virtual void setSequenceDescription(const char* newDescription, const char* sessionId) = 0;
    virtual void cycleToNextVideoInput(::CORBA::ULong videoOutputEntityKey, const char* sessionId) = 0;
    virtual void cycleToPreviousVideoInput(::CORBA::ULong videoOutputEntityKey, const char* sessionId) = 0;
    virtual void pause(::CORBA::ULong videoOutputEntityKey, const char* sessionId) = 0;
    virtual void play(::CORBA::ULong videoOutputEntityKey, const char* sessionId) = 0;
    virtual void stop(::CORBA::ULong videoOutputEntityKey, const char* sessionId) = 0;
    virtual SequenceCorbaDef::SequenceState getSequenceState(::CORBA::ULong videoOutputEntityKey) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SequenceCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class SequenceCorbaDef :
    public virtual TA_Base_Bus::_impl_SequenceCorbaDef,
    public virtual VideoInputCorbaDef
  {
  public:
    virtual ~SequenceCorbaDef();

    inline ::TA_Base_Bus::SequenceCorbaDef_ptr _this() {
      return (::TA_Base_Bus::SequenceCorbaDef_ptr) _do_this(::TA_Base_Bus::SequenceCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SequenceCorbaDef::VideoInputKeySequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::VideoInputKeySequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::VideoInputKeySequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SequenceCorbaDef::VideoInputKeySequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SequenceCorbaDef::SequenceConfig& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::SequenceConfig* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::SequenceConfig*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SequenceCorbaDef::SequenceConfig*& _sp);

inline void operator >>=(TA_Base_Bus::SequenceCorbaDef::ESequenceState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::SequenceCorbaDef::ESequenceState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::SequenceCorbaDef::Stopped) {
    _e = (TA_Base_Bus::SequenceCorbaDef::ESequenceState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::ESequenceState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::ESequenceState& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::SequenceCorbaDef::SequenceState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::SequenceState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef::SequenceState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::SequenceCorbaDef::SequenceState*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::SequenceCorbaDef_ptr& _s);



inline void
TA_Base_Bus::SequenceCorbaDef::_marshalObjRef(::TA_Base_Bus::SequenceCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SequenceCorbaDef
#endif

#endif  // __SequenceCorbaDef_hh__

