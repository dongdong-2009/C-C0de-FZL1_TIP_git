// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __VideoOutputCorbaDef_hh__
#define __VideoOutputCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
#endif



#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif
#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoSwitchResourceCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mVideoOutputCorbaDef__
#define __TA__Base__Bus_mVideoOutputCorbaDef__

  class VideoOutputCorbaDef;
  class _objref_VideoOutputCorbaDef;
  class _impl_VideoOutputCorbaDef;
  
  typedef _objref_VideoOutputCorbaDef* VideoOutputCorbaDef_ptr;
  typedef VideoOutputCorbaDef_ptr VideoOutputCorbaDefRef;

  class VideoOutputCorbaDef_Helper {
  public:
    typedef VideoOutputCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper> VideoOutputCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_VideoOutputCorbaDef,VideoOutputCorbaDef_Helper > VideoOutputCorbaDef_out;

#endif

  // interface VideoOutputCorbaDef
  class VideoOutputCorbaDef {
  public:
    // Declarations for this interface type.
    typedef VideoOutputCorbaDef_ptr _ptr_type;
    typedef VideoOutputCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum PlayBackCtrlCmd { FAST_FORWARD_1_STEP, FAST_BACKWARD_1_STEP, RESUME_PLAYBACK, PAUSE_PLAYBACK /*, __max_PlayBackCtrlCmd=0xffffffff */ };
    typedef PlayBackCtrlCmd& PlayBackCtrlCmd_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PlayBackCtrlCmd;

    struct Time {
      typedef _CORBA_ConstrType_Fix_Var<Time> _var_type;

      
      ::CORBA::UShort year;

      ::CORBA::Octet month;

      ::CORBA::Octet day;

      ::CORBA::Octet hour;

      ::CORBA::Octet minute;

      ::CORBA::Octet second;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef Time::_var_type Time_var;

    typedef Time& Time_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_Time;

    struct MonitorAlarmState {
      typedef _CORBA_ConstrType_Fix_Var<MonitorAlarmState> _var_type;

      
      ::CORBA::ULong stationId;

      ::CORBA::ULong eventId;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef MonitorAlarmState::_var_type MonitorAlarmState_var;

    typedef MonitorAlarmState& MonitorAlarmState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MonitorAlarmState;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_MonitorAlarmStack;

    class MonitorAlarmStack_var;

    class MonitorAlarmStack : public _CORBA_Unbounded_Sequence< MonitorAlarmState >  {
    public:
      typedef MonitorAlarmStack_var _var_type;
      inline MonitorAlarmStack() {}
      inline MonitorAlarmStack(const MonitorAlarmStack& _s)
        : _CORBA_Unbounded_Sequence< MonitorAlarmState > (_s) {}

      inline MonitorAlarmStack(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< MonitorAlarmState > (_max) {}
      inline MonitorAlarmStack(_CORBA_ULong _max, _CORBA_ULong _len, MonitorAlarmState* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< MonitorAlarmState > (_max, _len, _val, _rel) {}

    

      inline MonitorAlarmStack& operator = (const MonitorAlarmStack& _s) {
        _CORBA_Unbounded_Sequence< MonitorAlarmState > ::operator=(_s);
        return *this;
      }
    };

    class MonitorAlarmStack_out;

    class MonitorAlarmStack_var {
    public:
      inline MonitorAlarmStack_var() : _pd_seq(0) {}
      inline MonitorAlarmStack_var(MonitorAlarmStack* _s) : _pd_seq(_s) {}
      inline MonitorAlarmStack_var(const MonitorAlarmStack_var& _s) {
        if( _s._pd_seq )  _pd_seq = new MonitorAlarmStack(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~MonitorAlarmStack_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline MonitorAlarmStack_var& operator = (MonitorAlarmStack* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline MonitorAlarmStack_var& operator = (const MonitorAlarmStack_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new MonitorAlarmStack;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline MonitorAlarmState& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline MonitorAlarmStack* operator -> () { return _pd_seq; }
      inline const MonitorAlarmStack* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator MonitorAlarmStack& () const { return *_pd_seq; }
#else
      inline operator const MonitorAlarmStack& () const { return *_pd_seq; }
      inline operator MonitorAlarmStack& () { return *_pd_seq; }
#endif
        
      inline const MonitorAlarmStack& in() const { return *_pd_seq; }
      inline MonitorAlarmStack&       inout()    { return *_pd_seq; }
      inline MonitorAlarmStack*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline MonitorAlarmStack* _retn() { MonitorAlarmStack* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class MonitorAlarmStack_out;
      
    private:
      MonitorAlarmStack* _pd_seq;
    };

    class MonitorAlarmStack_out {
    public:
      inline MonitorAlarmStack_out(MonitorAlarmStack*& _s) : _data(_s) { _data = 0; }
      inline MonitorAlarmStack_out(MonitorAlarmStack_var& _s)
        : _data(_s._pd_seq) { _s = (MonitorAlarmStack*) 0; }
      inline MonitorAlarmStack_out(const MonitorAlarmStack_out& _s) : _data(_s._data) {}
      inline MonitorAlarmStack_out& operator = (const MonitorAlarmStack_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline MonitorAlarmStack_out& operator = (MonitorAlarmStack* _s) {
        _data = _s;
        return *this;
      }
      inline operator MonitorAlarmStack*&()  { return _data; }
      inline MonitorAlarmStack*& ptr()       { return _data; }
      inline MonitorAlarmStack* operator->() { return _data; }

      inline MonitorAlarmState& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      MonitorAlarmStack*& _data;

    private:
      MonitorAlarmStack_out();
      MonitorAlarmStack_out& operator=(const MonitorAlarmStack_var&);
    };

    struct VideoOutputState {
      typedef _CORBA_ConstrType_Variable_Var<VideoOutputState> _var_type;

      
      ::CORBA::ULong currentVideoInputKey;

      MonitorAlarmStack alarmStack;

      ::CORBA::Boolean isInAlarmMode;

      ::CORBA::Boolean isShowingAckAlarm;

      MonitorAlarmStack removedAlarmStack;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef VideoOutputState::_var_type VideoOutputState_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< VideoOutputState,VideoOutputState_var > VideoOutputState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoOutputState;

  
  };

  class _objref_VideoOutputCorbaDef :
    public virtual _objref_VideoSwitchResourceCorbaDef
  {
  public:
    VideoOutputCorbaDef::VideoOutputState* getVideoOutputState();
    char* getVideoOutputGroupName();
    ::CORBA::ULong getCurrentVideoInputKey();
    void requestSwitchOfInput(::CORBA::ULong videoInputEntityKey, const char* sessionId, ::CORBA::Boolean isDemand);
    void assignQuad(::CORBA::ULong cameraW, ::CORBA::ULong cameraX, ::CORBA::ULong cameraY, ::CORBA::ULong cameraZ, const char* sessionId, ::CORBA::Boolean isDemand);
    ::CORBA::Boolean mappingTrainBorneMonitor(const char* sessionId, ::CORBA::Boolean isDemand);
    void cycleToNextVideoInput(const char* sessionId);
    void cycleToPreviousVideoInput(const char* sessionId);
    void pause(const char* sessionId);
    void play(const char* sessionId);
    void stop(const char* sessionId);
    void requestRecordingPlayBack(::CORBA::ULong cameraKey, const ::TA_Base_Bus::VideoOutputCorbaDef::Time& startTime, const ::TA_Base_Bus::VideoOutputCorbaDef::Time& endTime, const char* sessionId);
    void playBackCtrl(::TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd cmd, const char* sessionId);

    inline _objref_VideoOutputCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_VideoOutputCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_VideoOutputCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_VideoOutputCorbaDef(const _objref_VideoOutputCorbaDef&);
    _objref_VideoOutputCorbaDef& operator = (const _objref_VideoOutputCorbaDef&);
    // not implemented

    friend class VideoOutputCorbaDef;
  };

  class _pof_VideoOutputCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_VideoOutputCorbaDef() : _OMNI_NS(proxyObjectFactory)(VideoOutputCorbaDef::_PD_repoId) {}
    virtual ~_pof_VideoOutputCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_VideoOutputCorbaDef :
    public virtual _impl_VideoSwitchResourceCorbaDef
  {
  public:
    virtual ~_impl_VideoOutputCorbaDef();

    virtual VideoOutputCorbaDef::VideoOutputState* getVideoOutputState() = 0;
    virtual char* getVideoOutputGroupName() = 0;
    virtual ::CORBA::ULong getCurrentVideoInputKey() = 0;
    virtual void requestSwitchOfInput(::CORBA::ULong videoInputEntityKey, const char* sessionId, ::CORBA::Boolean isDemand) = 0;
    virtual void assignQuad(::CORBA::ULong cameraW, ::CORBA::ULong cameraX, ::CORBA::ULong cameraY, ::CORBA::ULong cameraZ, const char* sessionId, ::CORBA::Boolean isDemand) = 0;
    virtual ::CORBA::Boolean mappingTrainBorneMonitor(const char* sessionId, ::CORBA::Boolean isDemand) = 0;
    virtual void cycleToNextVideoInput(const char* sessionId) = 0;
    virtual void cycleToPreviousVideoInput(const char* sessionId) = 0;
    virtual void pause(const char* sessionId) = 0;
    virtual void play(const char* sessionId) = 0;
    virtual void stop(const char* sessionId) = 0;
    virtual void requestRecordingPlayBack(::CORBA::ULong cameraKey, const ::TA_Base_Bus::VideoOutputCorbaDef::Time& startTime, const ::TA_Base_Bus::VideoOutputCorbaDef::Time& endTime, const char* sessionId) = 0;
    virtual void playBackCtrl(::TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd cmd, const char* sessionId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoOutputCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class VideoOutputCorbaDef :
    public virtual TA_Base_Bus::_impl_VideoOutputCorbaDef,
    public virtual VideoSwitchResourceCorbaDef
  {
  public:
    virtual ~VideoOutputCorbaDef();

    inline ::TA_Base_Bus::VideoOutputCorbaDef_ptr _this() {
      return (::TA_Base_Bus::VideoOutputCorbaDef_ptr) _do_this(::TA_Base_Bus::VideoOutputCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::VideoOutputCorbaDef::PAUSE_PLAYBACK) {
    _e = (TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::PlayBackCtrlCmd& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::Time& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::Time* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::Time*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::Time*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmState*& _sp);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmStack& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmStack* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmStack*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::MonitorAlarmStack*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::VideoOutputState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::VideoOutputState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef::VideoOutputState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::VideoOutputCorbaDef::VideoOutputState*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputCorbaDef_ptr& _s);



inline void
TA_Base_Bus::VideoOutputCorbaDef::_marshalObjRef(::TA_Base_Bus::VideoOutputCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoOutputCorbaDef
#endif

#endif  // __VideoOutputCorbaDef_hh__

