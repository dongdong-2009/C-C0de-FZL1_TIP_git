// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __MovementControlCorbaDef_hh__
#define __MovementControlCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mMovementControlCorbaDef__
#define __TA__Base__Bus_mMovementControlCorbaDef__

  class MovementControlCorbaDef;
  class _objref_MovementControlCorbaDef;
  class _impl_MovementControlCorbaDef;
  
  typedef _objref_MovementControlCorbaDef* MovementControlCorbaDef_ptr;
  typedef MovementControlCorbaDef_ptr MovementControlCorbaDefRef;

  class MovementControlCorbaDef_Helper {
  public:
    typedef MovementControlCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MovementControlCorbaDef, MovementControlCorbaDef_Helper> MovementControlCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MovementControlCorbaDef,MovementControlCorbaDef_Helper > MovementControlCorbaDef_out;

#endif

  // interface MovementControlCorbaDef
  class MovementControlCorbaDef {
  public:
    // Declarations for this interface type.
    typedef MovementControlCorbaDef_ptr _ptr_type;
    typedef MovementControlCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct CameraPreset {
      typedef _CORBA_ConstrType_Variable_Var<CameraPreset> _var_type;

      
      ::CORBA::Short index;

      ::CORBA::String_member name;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CameraPreset::_var_type CameraPreset_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CameraPreset,CameraPreset_var > CameraPreset_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraPreset;

    enum EPanDirection { Left, Right, HaltPan /*, __max_EPanDirection=0xffffffff */ };
    typedef EPanDirection& EPanDirection_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EPanDirection;

    enum ETiltDirection { Up, Down, HaltTilt /*, __max_ETiltDirection=0xffffffff */ };
    typedef ETiltDirection& ETiltDirection_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ETiltDirection;

    static _core_attr const ::CORBA::Short NO_PRESET _init_in_cldecl_( = -1 );

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraPresetSequence;

    class CameraPresetSequence_var;

    class CameraPresetSequence : public _CORBA_Unbounded_Sequence< CameraPreset >  {
    public:
      typedef CameraPresetSequence_var _var_type;
      inline CameraPresetSequence() {}
      inline CameraPresetSequence(const CameraPresetSequence& _s)
        : _CORBA_Unbounded_Sequence< CameraPreset > (_s) {}

      inline CameraPresetSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< CameraPreset > (_max) {}
      inline CameraPresetSequence(_CORBA_ULong _max, _CORBA_ULong _len, CameraPreset* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< CameraPreset > (_max, _len, _val, _rel) {}

    

      inline CameraPresetSequence& operator = (const CameraPresetSequence& _s) {
        _CORBA_Unbounded_Sequence< CameraPreset > ::operator=(_s);
        return *this;
      }
    };

    class CameraPresetSequence_out;

    class CameraPresetSequence_var {
    public:
      inline CameraPresetSequence_var() : _pd_seq(0) {}
      inline CameraPresetSequence_var(CameraPresetSequence* _s) : _pd_seq(_s) {}
      inline CameraPresetSequence_var(const CameraPresetSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CameraPresetSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CameraPresetSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CameraPresetSequence_var& operator = (CameraPresetSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CameraPresetSequence_var& operator = (const CameraPresetSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CameraPresetSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline CameraPreset& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CameraPresetSequence* operator -> () { return _pd_seq; }
      inline const CameraPresetSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CameraPresetSequence& () const { return *_pd_seq; }
#else
      inline operator const CameraPresetSequence& () const { return *_pd_seq; }
      inline operator CameraPresetSequence& () { return *_pd_seq; }
#endif
        
      inline const CameraPresetSequence& in() const { return *_pd_seq; }
      inline CameraPresetSequence&       inout()    { return *_pd_seq; }
      inline CameraPresetSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CameraPresetSequence* _retn() { CameraPresetSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CameraPresetSequence_out;
      
    private:
      CameraPresetSequence* _pd_seq;
    };

    class CameraPresetSequence_out {
    public:
      inline CameraPresetSequence_out(CameraPresetSequence*& _s) : _data(_s) { _data = 0; }
      inline CameraPresetSequence_out(CameraPresetSequence_var& _s)
        : _data(_s._pd_seq) { _s = (CameraPresetSequence*) 0; }
      inline CameraPresetSequence_out(const CameraPresetSequence_out& _s) : _data(_s._data) {}
      inline CameraPresetSequence_out& operator = (const CameraPresetSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CameraPresetSequence_out& operator = (CameraPresetSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator CameraPresetSequence*&()  { return _data; }
      inline CameraPresetSequence*& ptr()       { return _data; }
      inline CameraPresetSequence* operator->() { return _data; }

      inline CameraPreset& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CameraPresetSequence*& _data;

    private:
      CameraPresetSequence_out();
      CameraPresetSequence_out& operator=(const CameraPresetSequence_var&);
    };

  
  };

  class _objref_MovementControlCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void panAndTilt(::TA_Base_Bus::MovementControlCorbaDef::EPanDirection panDirection, ::CORBA::UShort panSpeed, ::TA_Base_Bus::MovementControlCorbaDef::ETiltDirection tiltDirection, ::CORBA::UShort tiltSpeed, const char* sessionId);
    void panLeft(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous);
    void panRight(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous);
    void panHalt(const char* sessionId);
    void tiltUp(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous);
    void tiltDown(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous);
    void tiltHalt(const char* sessionId);
    void zoomIn(::CORBA::UShort speed, const char* sessionId);
    void zoomOut(::CORBA::UShort speed, const char* sessionId);
    void zoomHalt(const char* sessionId);
    void activatePreset(::CORBA::UShort index, const char* sessionId);
    MovementControlCorbaDef::CameraPreset* getActivePreset();
    MovementControlCorbaDef::CameraPresetSequence* getAllPresets();
    void storePreset(const ::TA_Base_Bus::MovementControlCorbaDef::CameraPreset& preset, const char* sessionId);
    void getFullPresetRange(::CORBA::UShort& minimumIndex, ::CORBA::UShort& maximumIndex);
    void getModifiablePresetRange(::CORBA::UShort& minimumIndex, ::CORBA::UShort& maximumIndex);
    void setPresetName(::CORBA::UShort index, const char* name, const char* sessionId);

    inline _objref_MovementControlCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_MovementControlCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MovementControlCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MovementControlCorbaDef(const _objref_MovementControlCorbaDef&);
    _objref_MovementControlCorbaDef& operator = (const _objref_MovementControlCorbaDef&);
    // not implemented

    friend class MovementControlCorbaDef;
  };

  class _pof_MovementControlCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MovementControlCorbaDef() : _OMNI_NS(proxyObjectFactory)(MovementControlCorbaDef::_PD_repoId) {}
    virtual ~_pof_MovementControlCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MovementControlCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_MovementControlCorbaDef();

    virtual void panAndTilt(::TA_Base_Bus::MovementControlCorbaDef::EPanDirection panDirection, ::CORBA::UShort panSpeed, ::TA_Base_Bus::MovementControlCorbaDef::ETiltDirection tiltDirection, ::CORBA::UShort tiltSpeed, const char* sessionId) = 0;
    virtual void panLeft(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous) = 0;
    virtual void panRight(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous) = 0;
    virtual void panHalt(const char* sessionId) = 0;
    virtual void tiltUp(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous) = 0;
    virtual void tiltDown(::CORBA::UShort speed, const char* sessionId, ::CORBA::Boolean isContinuous) = 0;
    virtual void tiltHalt(const char* sessionId) = 0;
    virtual void zoomIn(::CORBA::UShort speed, const char* sessionId) = 0;
    virtual void zoomOut(::CORBA::UShort speed, const char* sessionId) = 0;
    virtual void zoomHalt(const char* sessionId) = 0;
    virtual void activatePreset(::CORBA::UShort index, const char* sessionId) = 0;
    virtual MovementControlCorbaDef::CameraPreset* getActivePreset() = 0;
    virtual MovementControlCorbaDef::CameraPresetSequence* getAllPresets() = 0;
    virtual void storePreset(const ::TA_Base_Bus::MovementControlCorbaDef::CameraPreset& preset, const char* sessionId) = 0;
    virtual void getFullPresetRange(::CORBA::UShort& minimumIndex, ::CORBA::UShort& maximumIndex) = 0;
    virtual void getModifiablePresetRange(::CORBA::UShort& minimumIndex, ::CORBA::UShort& maximumIndex) = 0;
    virtual void setPresetName(::CORBA::UShort index, const char* name, const char* sessionId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MovementControlCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class MovementControlCorbaDef :
    public virtual TA_Base_Bus::_impl_MovementControlCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~MovementControlCorbaDef();

    inline ::TA_Base_Bus::MovementControlCorbaDef_ptr _this() {
      return (::TA_Base_Bus::MovementControlCorbaDef_ptr) _do_this(::TA_Base_Bus::MovementControlCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::MovementControlCorbaDef::CameraPreset& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::CameraPreset* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::CameraPreset*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::MovementControlCorbaDef::CameraPreset*& _sp);

inline void operator >>=(TA_Base_Bus::MovementControlCorbaDef::EPanDirection _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::MovementControlCorbaDef::EPanDirection& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::MovementControlCorbaDef::HaltPan) {
    _e = (TA_Base_Bus::MovementControlCorbaDef::EPanDirection) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::EPanDirection _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::EPanDirection& _s);

inline void operator >>=(TA_Base_Bus::MovementControlCorbaDef::ETiltDirection _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::MovementControlCorbaDef::ETiltDirection& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::MovementControlCorbaDef::HaltTilt) {
    _e = (TA_Base_Bus::MovementControlCorbaDef::ETiltDirection) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::ETiltDirection _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::ETiltDirection& _s);

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::MovementControlCorbaDef::CameraPresetSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::CameraPresetSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef::CameraPresetSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::MovementControlCorbaDef::CameraPresetSequence*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::MovementControlCorbaDef_ptr& _s);



inline void
TA_Base_Bus::MovementControlCorbaDef::_marshalObjRef(::TA_Base_Bus::MovementControlCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MovementControlCorbaDef
#endif

#endif  // __MovementControlCorbaDef_hh__

