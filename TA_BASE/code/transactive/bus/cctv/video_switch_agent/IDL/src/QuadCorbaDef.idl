#if !defined(QuadCorbaDef_BDE6E42B_B294_4e78_BE77_3ECED963A0C1__INCLUDED_)
#define QuadCorbaDef_BDE6E42B_B294_4e78_BE77_3ECED963A0C1__INCLUDED_

/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution in any form.
  *
  * Source:    $File: //depot/4669_TIP/TA_BASE/transactive/bus/cctv/video_switch_agent/IDL/src/QuadCorbaDef.idl $
  * @author:   Rob Young
  * @version:  $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/10/31 12:12:40 $
  * Last modified by:  $Author: grace.koh $
  *
  * The interface to an object that provides access to the 
  * Quad state and control.
  */

#include "core/exceptions/IDL/src/CommonExceptionsCorbaDef.idl"
#include "bus/cctv/video_switch_agent/IDL/src/ExceptionsCorbaDef.idl"
#include "bus/cctv/video_switch_agent/IDL/src/VideoInputCorbaDef.idl"

module TA_Base_Bus
{
	interface QuadCorbaDef : VideoInputCorbaDef
	{
		//
		// Struct used to define current state of a Quad.
		// Note: Currently this is only current inputs, but struct can be extended
		// if device health information can also be obtained.
		// 

		struct QuadState
		{
			unsigned long topLeftVideoInputKey;
			unsigned long topRightVideoInputKey;
			unsigned long bottomLeftVideoInputKey;
			unsigned long bottomRightVideoInputKey;
		};

		//
		// Enum for labelling the four segments 
		//

		enum EQuadSegment
		{
			TopLeft,      
			TopRight,   
			BottomLeft,
			BottomRight
		};

		/**
		  * getQuadState
		  *
		  * Gets the current state of this Quad.
		  *
		  * @return     QuadState
		  *				The current state of this quad
		  *
		  * @exception	VideoSwitchAgentException
		  *				Thrown if:
		  *				1. The database cannot be accessed.
		  *				2. The data cannot be retrieved.
		  *				3. The retrieved data is invalid.
		  *				4. The agent is in Monitor mode.
		  */

		QuadState getQuadState()
			raises( TA_Base_Bus::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

		/**
		  * areInputsSwitchable
		  *
		  * Indicates whether the inputs to this quad be switched.
		  *
		  * @return     boolean
		  *				True if the inputs can be switched,
		  *				False otherwise.
		  *
		  * @exception	VideoSwitchAgentException
		  *				Thrown if the agent is in Monitor mode.
		  */

		boolean areInputsSwitchable()
			raises( TA_Base_Bus::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

		/**
		  * requestSwitchOfInput
		  *
		  * Requests switch of input for one of the Quad segments.
		  *
		  * @param      enum EQuadSegment
		  *				Display segment corresponding to channel that 
		  *				is to be switched.  
		  * @param      unsigned long videoInputEntityKey
		  *				The entity key of the VideoInput to switch.
          * @param      string sessionId
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * @param      boolean isDemand = false
          *             If false => If the VideoInput is locked (hardware locking), the 
          *                         switch will not occur. Also known as a polite request.
          *             If true  => The switch will occur even if the hardware is locked.
		  *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The VideoInput or the protocol does not support this operation.
          *             2. A polite request was made and the VideoInput is switch (hardware) locked.
          *             3. The VideoInput key is not recognised.
		  *				4. The agent is in Monitor mode.
		  *				5. The user does not have sufficient privileges for this operation.
		  *				6. There is a communications failure with the hardware.
		  */

		void requestSwitchOfInput( in EQuadSegment segment, in unsigned long videoInputEntityKey, 
			in string sessionId, in boolean isDemand )
			raises( TA_Base_Bus::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

		/**
		  * requestSwitchOfInputs
		  * Requests switch of inputs for the four segments.
		  *
		  * @param      unsigned long topLeftVideoInputEntityKey
		  *				The entity key of the VideoInput to switch
		  *				to channel for top-left quad segment.
		  * @param      unsigned long topRightVideoInputEntityKey
		  *				The entity key of the VideoInput to switch
		  *				to channel for top-right quad segment.
		  * @param      unsigned long bottomLeftVideoInputEntityKey
		  *				The entity key of the VideoInput to switch
		  *				to channel for bottom-left quad segment.
		  * @param      unsigned long bottomRightVideoInputEntityKey
		  *				to channel for bottom-right quad segment.
		  * @param      string sessionId
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
		  * @param      boolean isDemand
          *             If false => If the VideoInput is locked (hardware locking), the 
          *                         switch will not occur. Also known as a polite request.
          *             If true  => The switch will occur even if the hardware is locked.
		  *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The VideoInput or the protocol does not support this operation.
          *             2. A polite request was made and the VideoInput is switch (hardware) locked.
          *             3. The VideoInput key is not recognised.
		  *				4. The agent is in Monitor mode.
		  *				5. The user does not have sufficient privileges for this operation.
		  *				6. There is a communications failure with the hardware.
		  */

		void requestSwitchOfInputs( in unsigned long topLeftVideoInputEntityKey, in unsigned long topRightVideoInputEntityKey, 
			in unsigned long bottomLeftVideoInputEntityKey, in unsigned long bottomRightVideoInputEntityKey,
			in string sessionId, in boolean isDemand )
			raises( TA_Base_Bus::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

		/**
		  * setQuadDescription
		  *
		  * Sets the current description of this Quad.
		  *
		  * Precondition: !isReadOnly()
		  *
		  * @param		string newDescription
		  *				The description to be set for this Quad.
          * @param      string sessionId
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
		  *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The switching hardware, or the protocol does not support this operation.
          *             2. A VideoInput key is not recognised.
		  *				3. The agent is in Monitor mode.
		  *				4. The user does not have sufficient privileges for this operation.
		  *				5. There is a communications failure with the hardware.
          */
		
		void setQuadDescription( in string newDescription, in string sessionId )
			raises( TA_Base_Bus::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);


		
	}; // QuadCorbaDef

}; // TA_Base_Bus

#endif // !defined(QuadCorbaDef_BDE6E42B_B294_4e78_BE77_3ECED963A0C1__INCLUDED_)
