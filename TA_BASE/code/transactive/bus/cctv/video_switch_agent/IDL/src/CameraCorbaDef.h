// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __CameraCorbaDef_hh__
#define __CameraCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif
#ifndef __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoSwitchResourceCorbaDef.h>
#endif
#ifndef __VideoInputCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoInputCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoInputCorbaDef.h>
#endif
#ifndef __MovementControlCorbaDef_hh_EXTERNAL_GUARD__
#define __MovementControlCorbaDef_hh_EXTERNAL_GUARD__
#include <MovementControlCorbaDef.h>
#endif
#ifndef __FocusIrisControlCorbaDef_hh_EXTERNAL_GUARD__
#define __FocusIrisControlCorbaDef_hh_EXTERNAL_GUARD__
#include <FocusIrisControlCorbaDef.h>
#endif
#ifndef __WashWipeControlCorbaDef_hh_EXTERNAL_GUARD__
#define __WashWipeControlCorbaDef_hh_EXTERNAL_GUARD__
#include <WashWipeControlCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mCameraCorbaDef__
#define __TA__Base__Bus_mCameraCorbaDef__

  class CameraCorbaDef;
  class _objref_CameraCorbaDef;
  class _impl_CameraCorbaDef;
  
  typedef _objref_CameraCorbaDef* CameraCorbaDef_ptr;
  typedef CameraCorbaDef_ptr CameraCorbaDefRef;

  class CameraCorbaDef_Helper {
  public:
    typedef CameraCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_CameraCorbaDef, CameraCorbaDef_Helper> CameraCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_CameraCorbaDef,CameraCorbaDef_Helper > CameraCorbaDef_out;

#endif

  // interface CameraCorbaDef
  class CameraCorbaDef {
  public:
    // Declarations for this interface type.
    typedef CameraCorbaDef_ptr _ptr_type;
    typedef CameraCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    struct SupportedCameraFeatures {
      typedef _CORBA_ConstrType_Fix_Var<SupportedCameraFeatures> _var_type;

      
      ::CORBA::Boolean isMovementSupported;

      ::CORBA::Boolean isProportionalMovementSupported;

      ::CORBA::Boolean isAutoFocusSupported;

      ::CORBA::Boolean isManualFocusSupported;

      ::CORBA::Boolean isAutoIrisSupported;

      ::CORBA::Boolean isManualIrisSupported;

      ::CORBA::Boolean isIrisPeakWhiteInversionSupported;

      ::CORBA::Boolean isWashSupported;

      ::CORBA::Boolean isWipeSupported;

      ::CORBA::Boolean arePresetsSupported;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SupportedCameraFeatures::_var_type SupportedCameraFeatures_var;

    typedef SupportedCameraFeatures& SupportedCameraFeatures_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SupportedCameraFeatures;

    enum PTZCtrlCmd { PAN_LEFT_WX, PAN_RIGHT_WX, TILT_UP_WX, TILT_DOWN_WX, ZOOM_IN_WX, ZOOM_OUT_WX, RETURN_DEFAULT_WX /*, __max_PTZCtrlCmd=0xffffffff */ };
    typedef PTZCtrlCmd& PTZCtrlCmd_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_PTZCtrlCmd;

    struct CameraState {
      typedef _CORBA_ConstrType_Fix_Var<CameraState> _var_type;

      
      ::CORBA::Boolean isAutoFocusOn;

      ::CORBA::Boolean isAutoIrisOn;

      ::CORBA::Boolean isIrisPeakWhiteInversionOn;

      ::CORBA::Short activePresetIndex;

      ::CORBA::Boolean isInAlarmState;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CameraState::_var_type CameraState_var;

    typedef CameraState& CameraState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraState;

  
  };

  class _objref_CameraCorbaDef :
    public virtual _objref_VideoInputCorbaDef
  {
  public:
    CameraCorbaDef::SupportedCameraFeatures getSupportedFeatures();
    CameraCorbaDef::CameraState getState();
    ::CORBA::Boolean isMovementControllable();
    MovementControlCorbaDef_ptr getMovementControl();
    ::CORBA::Boolean isFocusIrisControllable();
    FocusIrisControlCorbaDef_ptr getFocusIrisControl();
    ::CORBA::Boolean isWashWipeControllable();
    WashWipeControlCorbaDef_ptr getWashWipeControl();
    ::CORBA::Boolean isWiperOn(const char* sessionId);
    ::CORBA::Boolean isWasherOn(const char* sessionId);
    void ptzRequest(::TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd cmd, const char* sessionId);

    inline _objref_CameraCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_CameraCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_CameraCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_CameraCorbaDef(const _objref_CameraCorbaDef&);
    _objref_CameraCorbaDef& operator = (const _objref_CameraCorbaDef&);
    // not implemented

    friend class CameraCorbaDef;
  };

  class _pof_CameraCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_CameraCorbaDef() : _OMNI_NS(proxyObjectFactory)(CameraCorbaDef::_PD_repoId) {}
    virtual ~_pof_CameraCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_CameraCorbaDef :
    public virtual _impl_VideoInputCorbaDef
  {
  public:
    virtual ~_impl_CameraCorbaDef();

    virtual CameraCorbaDef::SupportedCameraFeatures getSupportedFeatures() = 0;
    virtual CameraCorbaDef::CameraState getState() = 0;
    virtual ::CORBA::Boolean isMovementControllable() = 0;
    virtual MovementControlCorbaDef_ptr getMovementControl() = 0;
    virtual ::CORBA::Boolean isFocusIrisControllable() = 0;
    virtual FocusIrisControlCorbaDef_ptr getFocusIrisControl() = 0;
    virtual ::CORBA::Boolean isWashWipeControllable() = 0;
    virtual WashWipeControlCorbaDef_ptr getWashWipeControl() = 0;
    virtual ::CORBA::Boolean isWiperOn(const char* sessionId) = 0;
    virtual ::CORBA::Boolean isWasherOn(const char* sessionId) = 0;
    virtual void ptzRequest(::TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd cmd, const char* sessionId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CameraCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class CameraCorbaDef :
    public virtual TA_Base_Bus::_impl_CameraCorbaDef,
    public virtual VideoInputCorbaDef
  {
  public:
    virtual ~CameraCorbaDef();

    inline ::TA_Base_Bus::CameraCorbaDef_ptr _this() {
      return (::TA_Base_Bus::CameraCorbaDef_ptr) _do_this(::TA_Base_Bus::CameraCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::CameraCorbaDef::SupportedCameraFeatures& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef::SupportedCameraFeatures* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef::SupportedCameraFeatures*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::CameraCorbaDef::SupportedCameraFeatures*& _sp);

inline void operator >>=(TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::CameraCorbaDef::RETURN_DEFAULT_WX) {
    _e = (TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef::PTZCtrlCmd& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::CameraCorbaDef::CameraState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef::CameraState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef::CameraState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::CameraCorbaDef::CameraState*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::CameraCorbaDef_ptr& _s);



inline void
TA_Base_Bus::CameraCorbaDef::_marshalObjRef(::TA_Base_Bus::CameraCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CameraCorbaDef
#endif

#endif  // __CameraCorbaDef_hh__

