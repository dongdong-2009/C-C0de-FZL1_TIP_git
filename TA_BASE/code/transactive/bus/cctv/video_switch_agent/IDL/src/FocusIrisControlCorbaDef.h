// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __FocusIrisControlCorbaDef_hh__
#define __FocusIrisControlCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mFocusIrisControlCorbaDef__
#define __TA__Base__Bus_mFocusIrisControlCorbaDef__

  class FocusIrisControlCorbaDef;
  class _objref_FocusIrisControlCorbaDef;
  class _impl_FocusIrisControlCorbaDef;
  
  typedef _objref_FocusIrisControlCorbaDef* FocusIrisControlCorbaDef_ptr;
  typedef FocusIrisControlCorbaDef_ptr FocusIrisControlCorbaDefRef;

  class FocusIrisControlCorbaDef_Helper {
  public:
    typedef FocusIrisControlCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_FocusIrisControlCorbaDef, FocusIrisControlCorbaDef_Helper> FocusIrisControlCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_FocusIrisControlCorbaDef,FocusIrisControlCorbaDef_Helper > FocusIrisControlCorbaDef_out;

#endif

  // interface FocusIrisControlCorbaDef
  class FocusIrisControlCorbaDef {
  public:
    // Declarations for this interface type.
    typedef FocusIrisControlCorbaDef_ptr _ptr_type;
    typedef FocusIrisControlCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_FocusIrisControlCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean isAutoFocusOn();
    void setAutoFocusOn(::CORBA::Boolean isAutoFocusOn, const char* sessionId);
    void focusNear(const char* sessionId);
    void focusFar(const char* sessionId);
    void focusHalt(const char* sessionId);
    ::CORBA::Boolean isAutoIrisOn();
    void setAutoIrisOn(::CORBA::Boolean isAutoIrisOn, const char* sessionId);
    void openIris(const char* sessionId);
    void closeIris(const char* sessionId);
    void irisHalt(const char* sessionId);
    ::CORBA::Boolean isIrisPeakWhiteInversionOn();
    void setIrisPeakWhiteInversionOn(::CORBA::Boolean isIrisPeakWhiteInversionOn, const char* sessionId);

    inline _objref_FocusIrisControlCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_FocusIrisControlCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_FocusIrisControlCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_FocusIrisControlCorbaDef(const _objref_FocusIrisControlCorbaDef&);
    _objref_FocusIrisControlCorbaDef& operator = (const _objref_FocusIrisControlCorbaDef&);
    // not implemented

    friend class FocusIrisControlCorbaDef;
  };

  class _pof_FocusIrisControlCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_FocusIrisControlCorbaDef() : _OMNI_NS(proxyObjectFactory)(FocusIrisControlCorbaDef::_PD_repoId) {}
    virtual ~_pof_FocusIrisControlCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_FocusIrisControlCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_FocusIrisControlCorbaDef();

    virtual ::CORBA::Boolean isAutoFocusOn() = 0;
    virtual void setAutoFocusOn(::CORBA::Boolean isAutoFocusOn, const char* sessionId) = 0;
    virtual void focusNear(const char* sessionId) = 0;
    virtual void focusFar(const char* sessionId) = 0;
    virtual void focusHalt(const char* sessionId) = 0;
    virtual ::CORBA::Boolean isAutoIrisOn() = 0;
    virtual void setAutoIrisOn(::CORBA::Boolean isAutoIrisOn, const char* sessionId) = 0;
    virtual void openIris(const char* sessionId) = 0;
    virtual void closeIris(const char* sessionId) = 0;
    virtual void irisHalt(const char* sessionId) = 0;
    virtual ::CORBA::Boolean isIrisPeakWhiteInversionOn() = 0;
    virtual void setIrisPeakWhiteInversionOn(::CORBA::Boolean isIrisPeakWhiteInversionOn, const char* sessionId) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FocusIrisControlCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class FocusIrisControlCorbaDef :
    public virtual TA_Base_Bus::_impl_FocusIrisControlCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~FocusIrisControlCorbaDef();

    inline ::TA_Base_Bus::FocusIrisControlCorbaDef_ptr _this() {
      return (::TA_Base_Bus::FocusIrisControlCorbaDef_ptr) _do_this(::TA_Base_Bus::FocusIrisControlCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::FocusIrisControlCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::FocusIrisControlCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::FocusIrisControlCorbaDef_ptr& _s);



inline void
TA_Base_Bus::FocusIrisControlCorbaDef::_marshalObjRef(::TA_Base_Bus::FocusIrisControlCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_FocusIrisControlCorbaDef
#endif

#endif  // __FocusIrisControlCorbaDef_hh__

