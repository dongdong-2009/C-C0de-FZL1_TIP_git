// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __VideoMonitorCorbaDef_hh__
#define __VideoMonitorCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif
#ifndef __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoSwitchResourceCorbaDef.h>
#endif
#ifndef __VideoOutputCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoOutputCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoOutputCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mVideoMonitorCorbaDef__
#define __TA__Base__Bus_mVideoMonitorCorbaDef__

  class VideoMonitorCorbaDef;
  class _objref_VideoMonitorCorbaDef;
  class _impl_VideoMonitorCorbaDef;
  
  typedef _objref_VideoMonitorCorbaDef* VideoMonitorCorbaDef_ptr;
  typedef VideoMonitorCorbaDef_ptr VideoMonitorCorbaDefRef;

  class VideoMonitorCorbaDef_Helper {
  public:
    typedef VideoMonitorCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_VideoMonitorCorbaDef, VideoMonitorCorbaDef_Helper> VideoMonitorCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_VideoMonitorCorbaDef,VideoMonitorCorbaDef_Helper > VideoMonitorCorbaDef_out;

#endif

  // interface VideoMonitorCorbaDef
  class VideoMonitorCorbaDef {
  public:
    // Declarations for this interface type.
    typedef VideoMonitorCorbaDef_ptr _ptr_type;
    typedef VideoMonitorCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum EVideoMonitorSize { Small, Medium, Large /*, __max_EVideoMonitorSize=0xffffffff */ };
    typedef EVideoMonitorSize& EVideoMonitorSize_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_EVideoMonitorSize;

  
  };

  class _objref_VideoMonitorCorbaDef :
    public virtual _objref_VideoOutputCorbaDef
  {
  public:
    VideoMonitorCorbaDef::EVideoMonitorSize getSize();
    ::CORBA::ULong getConsoleKey();
    ::CORBA::ULong getDisplayOrder();
    ::CORBA::Boolean isOverallMonitor();

    inline _objref_VideoMonitorCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_VideoMonitorCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_VideoMonitorCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_VideoMonitorCorbaDef(const _objref_VideoMonitorCorbaDef&);
    _objref_VideoMonitorCorbaDef& operator = (const _objref_VideoMonitorCorbaDef&);
    // not implemented

    friend class VideoMonitorCorbaDef;
  };

  class _pof_VideoMonitorCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_VideoMonitorCorbaDef() : _OMNI_NS(proxyObjectFactory)(VideoMonitorCorbaDef::_PD_repoId) {}
    virtual ~_pof_VideoMonitorCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_VideoMonitorCorbaDef :
    public virtual _impl_VideoOutputCorbaDef
  {
  public:
    virtual ~_impl_VideoMonitorCorbaDef();

    virtual VideoMonitorCorbaDef::EVideoMonitorSize getSize() = 0;
    virtual ::CORBA::ULong getConsoleKey() = 0;
    virtual ::CORBA::ULong getDisplayOrder() = 0;
    virtual ::CORBA::Boolean isOverallMonitor() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoMonitorCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class VideoMonitorCorbaDef :
    public virtual TA_Base_Bus::_impl_VideoMonitorCorbaDef,
    public virtual VideoOutputCorbaDef
  {
  public:
    virtual ~VideoMonitorCorbaDef();

    inline ::TA_Base_Bus::VideoMonitorCorbaDef_ptr _this() {
      return (::TA_Base_Bus::VideoMonitorCorbaDef_ptr) _do_this(::TA_Base_Bus::VideoMonitorCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(TA_Base_Bus::VideoMonitorCorbaDef::EVideoMonitorSize _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::VideoMonitorCorbaDef::EVideoMonitorSize& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::VideoMonitorCorbaDef::Large) {
    _e = (TA_Base_Bus::VideoMonitorCorbaDef::EVideoMonitorSize) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoMonitorCorbaDef::EVideoMonitorSize _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoMonitorCorbaDef::EVideoMonitorSize& _s);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoMonitorCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoMonitorCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoMonitorCorbaDef_ptr& _s);



inline void
TA_Base_Bus::VideoMonitorCorbaDef::_marshalObjRef(::TA_Base_Bus::VideoMonitorCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoMonitorCorbaDef
#endif

#endif  // __VideoMonitorCorbaDef_hh__

