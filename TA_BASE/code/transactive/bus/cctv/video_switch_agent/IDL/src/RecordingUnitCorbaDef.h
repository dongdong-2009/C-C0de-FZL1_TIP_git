// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __RecordingUnitCorbaDef_hh__
#define __RecordingUnitCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif
#ifndef __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoSwitchResourceCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mRecordingUnitCorbaDef__
#define __TA__Base__Bus_mRecordingUnitCorbaDef__

  class RecordingUnitCorbaDef;
  class _objref_RecordingUnitCorbaDef;
  class _impl_RecordingUnitCorbaDef;
  
  typedef _objref_RecordingUnitCorbaDef* RecordingUnitCorbaDef_ptr;
  typedef RecordingUnitCorbaDef_ptr RecordingUnitCorbaDefRef;

  class RecordingUnitCorbaDef_Helper {
  public:
    typedef RecordingUnitCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RecordingUnitCorbaDef, RecordingUnitCorbaDef_Helper> RecordingUnitCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RecordingUnitCorbaDef,RecordingUnitCorbaDef_Helper > RecordingUnitCorbaDef_out;

#endif

  // interface RecordingUnitCorbaDef
  class RecordingUnitCorbaDef {
  public:
    // Declarations for this interface type.
    typedef RecordingUnitCorbaDef_ptr _ptr_type;
    typedef RecordingUnitCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_recordingSpeed;

    typedef char* recordingSpeed;
    typedef ::CORBA::String_var recordingSpeed_var;
    typedef ::CORBA::String_out recordingSpeed_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_recordingSpeedSequence;

    class recordingSpeedSequence_var;

    class recordingSpeedSequence : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef recordingSpeedSequence_var _var_type;
      inline recordingSpeedSequence() {}
      inline recordingSpeedSequence(const recordingSpeedSequence& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline recordingSpeedSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline recordingSpeedSequence(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline recordingSpeedSequence& operator = (const recordingSpeedSequence& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class recordingSpeedSequence_out;

    class recordingSpeedSequence_var {
    public:
      inline recordingSpeedSequence_var() : _pd_seq(0) {}
      inline recordingSpeedSequence_var(recordingSpeedSequence* _s) : _pd_seq(_s) {}
      inline recordingSpeedSequence_var(const recordingSpeedSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new recordingSpeedSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~recordingSpeedSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline recordingSpeedSequence_var& operator = (recordingSpeedSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline recordingSpeedSequence_var& operator = (const recordingSpeedSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new recordingSpeedSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline recordingSpeedSequence* operator -> () { return _pd_seq; }
      inline const recordingSpeedSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator recordingSpeedSequence& () const { return *_pd_seq; }
#else
      inline operator const recordingSpeedSequence& () const { return *_pd_seq; }
      inline operator recordingSpeedSequence& () { return *_pd_seq; }
#endif
        
      inline const recordingSpeedSequence& in() const { return *_pd_seq; }
      inline recordingSpeedSequence&       inout()    { return *_pd_seq; }
      inline recordingSpeedSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline recordingSpeedSequence* _retn() { recordingSpeedSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class recordingSpeedSequence_out;
      
    private:
      recordingSpeedSequence* _pd_seq;
    };

    class recordingSpeedSequence_out {
    public:
      inline recordingSpeedSequence_out(recordingSpeedSequence*& _s) : _data(_s) { _data = 0; }
      inline recordingSpeedSequence_out(recordingSpeedSequence_var& _s)
        : _data(_s._pd_seq) { _s = (recordingSpeedSequence*) 0; }
      inline recordingSpeedSequence_out(const recordingSpeedSequence_out& _s) : _data(_s._data) {}
      inline recordingSpeedSequence_out& operator = (const recordingSpeedSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline recordingSpeedSequence_out& operator = (recordingSpeedSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator recordingSpeedSequence*&()  { return _data; }
      inline recordingSpeedSequence*& ptr()       { return _data; }
      inline recordingSpeedSequence* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      recordingSpeedSequence*& _data;

    private:
      recordingSpeedSequence_out();
      recordingSpeedSequence_out& operator=(const recordingSpeedSequence_var&);
    };

    enum ERecordingUnitType { VCR, DVD /*, __max_ERecordingUnitType=0xffffffff */ };
    typedef ERecordingUnitType& ERecordingUnitType_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ERecordingUnitType;

    struct RecordingUnitState {
      typedef _CORBA_ConstrType_Fix_Var<RecordingUnitState> _var_type;

      
      ::CORBA::UShort currentRecordingSpeedIndex;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef RecordingUnitState::_var_type RecordingUnitState_var;

    typedef RecordingUnitState& RecordingUnitState_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_RecordingUnitState;

    struct SupportedRecordingUnitFeatures {
      typedef _CORBA_ConstrType_Fix_Var<SupportedRecordingUnitFeatures> _var_type;

      
      ::CORBA::Boolean isPlaybackControllable;

      ::CORBA::Boolean isRecordingControllable;

      ::CORBA::Boolean isRecordingSpeedControllable;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef SupportedRecordingUnitFeatures::_var_type SupportedRecordingUnitFeatures_var;

    typedef SupportedRecordingUnitFeatures& SupportedRecordingUnitFeatures_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_SupportedRecordingUnitFeatures;

  
  };

  class _objref_RecordingUnitCorbaDef :
    public virtual _objref_VideoSwitchResourceCorbaDef
  {
  public:
    RecordingUnitCorbaDef::SupportedRecordingUnitFeatures getSupportedFeatures();
    RecordingUnitCorbaDef::RecordingUnitState getRecordingUnitState();
    RecordingUnitCorbaDef::recordingSpeedSequence* getRecordingSpeeds();
    void play(const char* sessionId);
    void fastForward(const char* sessionId);
    void rewind(const char* sessionId);
    void pause(const char* sessionId);
    void stopPlayback(const char* sessionId);
    void skipToNextChapter(const char* sessionId);
    void skipToPreviousChapter(const char* sessionId);
    void record(const char* sessionId);
    void stopRecording(const char* sessionId);
    void setRecordingSpeed(::CORBA::UShort recordingSpeedIndex, const char* sessionId);
    ::CORBA::ULong getConsoleKey();

    inline _objref_RecordingUnitCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_RecordingUnitCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RecordingUnitCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RecordingUnitCorbaDef(const _objref_RecordingUnitCorbaDef&);
    _objref_RecordingUnitCorbaDef& operator = (const _objref_RecordingUnitCorbaDef&);
    // not implemented

    friend class RecordingUnitCorbaDef;
  };

  class _pof_RecordingUnitCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RecordingUnitCorbaDef() : _OMNI_NS(proxyObjectFactory)(RecordingUnitCorbaDef::_PD_repoId) {}
    virtual ~_pof_RecordingUnitCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RecordingUnitCorbaDef :
    public virtual _impl_VideoSwitchResourceCorbaDef
  {
  public:
    virtual ~_impl_RecordingUnitCorbaDef();

    virtual RecordingUnitCorbaDef::SupportedRecordingUnitFeatures getSupportedFeatures() = 0;
    virtual RecordingUnitCorbaDef::RecordingUnitState getRecordingUnitState() = 0;
    virtual RecordingUnitCorbaDef::recordingSpeedSequence* getRecordingSpeeds() = 0;
    virtual void play(const char* sessionId) = 0;
    virtual void fastForward(const char* sessionId) = 0;
    virtual void rewind(const char* sessionId) = 0;
    virtual void pause(const char* sessionId) = 0;
    virtual void stopPlayback(const char* sessionId) = 0;
    virtual void skipToNextChapter(const char* sessionId) = 0;
    virtual void skipToPreviousChapter(const char* sessionId) = 0;
    virtual void record(const char* sessionId) = 0;
    virtual void stopRecording(const char* sessionId) = 0;
    virtual void setRecordingSpeed(::CORBA::UShort recordingSpeedIndex, const char* sessionId) = 0;
    virtual ::CORBA::ULong getConsoleKey() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RecordingUnitCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class RecordingUnitCorbaDef :
    public virtual TA_Base_Bus::_impl_RecordingUnitCorbaDef,
    public virtual VideoSwitchResourceCorbaDef
  {
  public:
    virtual ~RecordingUnitCorbaDef();

    inline ::TA_Base_Bus::RecordingUnitCorbaDef_ptr _this() {
      return (::TA_Base_Bus::RecordingUnitCorbaDef_ptr) _do_this(::TA_Base_Bus::RecordingUnitCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::RecordingUnitCorbaDef::recordingSpeedSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::recordingSpeedSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::recordingSpeedSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::RecordingUnitCorbaDef::recordingSpeedSequence*& _sp);

inline void operator >>=(TA_Base_Bus::RecordingUnitCorbaDef::ERecordingUnitType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (TA_Base_Bus::RecordingUnitCorbaDef::ERecordingUnitType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TA_Base_Bus::RecordingUnitCorbaDef::DVD) {
    _e = (TA_Base_Bus::RecordingUnitCorbaDef::ERecordingUnitType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::ERecordingUnitType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::ERecordingUnitType& _s);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::RecordingUnitCorbaDef::RecordingUnitState& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::RecordingUnitState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::RecordingUnitState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::RecordingUnitCorbaDef::RecordingUnitState*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::RecordingUnitCorbaDef::SupportedRecordingUnitFeatures& _s);
extern void operator<<=(::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::SupportedRecordingUnitFeatures* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef::SupportedRecordingUnitFeatures*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::RecordingUnitCorbaDef::SupportedRecordingUnitFeatures*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::RecordingUnitCorbaDef_ptr& _s);



inline void
TA_Base_Bus::RecordingUnitCorbaDef::_marshalObjRef(::TA_Base_Bus::RecordingUnitCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_RecordingUnitCorbaDef
#endif

#endif  // __RecordingUnitCorbaDef_hh__

