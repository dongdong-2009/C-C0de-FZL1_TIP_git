// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __VideoOutputGroupCorbaDef_hh__
#define __VideoOutputGroupCorbaDef_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
#endif



#ifndef __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __CommonExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <CommonExceptionsCorbaDef.h>
#endif
#ifndef __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#define __ExceptionsCorbaDef_hh_EXTERNAL_GUARD__
#include <ExceptionsCorbaDef.h>
#endif
#ifndef __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoSwitchResourceCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoSwitchResourceCorbaDef.h>
#endif
#ifndef __VideoOutputCorbaDef_hh_EXTERNAL_GUARD__
#define __VideoOutputCorbaDef_hh_EXTERNAL_GUARD__
#include <VideoOutputCorbaDef.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TA_Base_Bus

_CORBA_MODULE_BEG

#ifndef __TA__Base__Bus_mVideoOutputGroupCorbaDef__
#define __TA__Base__Bus_mVideoOutputGroupCorbaDef__

  class VideoOutputGroupCorbaDef;
  class _objref_VideoOutputGroupCorbaDef;
  class _impl_VideoOutputGroupCorbaDef;
  
  typedef _objref_VideoOutputGroupCorbaDef* VideoOutputGroupCorbaDef_ptr;
  typedef VideoOutputGroupCorbaDef_ptr VideoOutputGroupCorbaDefRef;

  class VideoOutputGroupCorbaDef_Helper {
  public:
    typedef VideoOutputGroupCorbaDef_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_VideoOutputGroupCorbaDef, VideoOutputGroupCorbaDef_Helper> VideoOutputGroupCorbaDef_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_VideoOutputGroupCorbaDef,VideoOutputGroupCorbaDef_Helper > VideoOutputGroupCorbaDef_out;

#endif

  // interface VideoOutputGroupCorbaDef
  class VideoOutputGroupCorbaDef {
  public:
    // Declarations for this interface type.
    typedef VideoOutputGroupCorbaDef_ptr _ptr_type;
    typedef VideoOutputGroupCorbaDef_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoOutputSequence;

    class VideoOutputSequence_var;

    class VideoOutputSequence : public _CORBA_Unbounded_Sequence_ObjRef< _objref_VideoOutputCorbaDef, _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper> , VideoOutputCorbaDef_Helper >  {
    public:
      typedef VideoOutputSequence_var _var_type;
      inline VideoOutputSequence() {}
      inline VideoOutputSequence(const VideoOutputSequence& _s)
        : _CORBA_Unbounded_Sequence_ObjRef< _objref_VideoOutputCorbaDef, _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper> , VideoOutputCorbaDef_Helper > (_s) {}

      inline VideoOutputSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_ObjRef< _objref_VideoOutputCorbaDef, _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper> , VideoOutputCorbaDef_Helper > (_max) {}
      inline VideoOutputSequence(_CORBA_ULong _max, _CORBA_ULong _len, VideoOutputCorbaDef_ptr* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_ObjRef< _objref_VideoOutputCorbaDef, _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper> , VideoOutputCorbaDef_Helper > (_max, _len, _val, _rel) {}

    

      inline VideoOutputSequence& operator = (const VideoOutputSequence& _s) {
        _CORBA_Unbounded_Sequence_ObjRef< _objref_VideoOutputCorbaDef, _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper> , VideoOutputCorbaDef_Helper > ::operator=(_s);
        return *this;
      }
    };

    class VideoOutputSequence_out;

    class VideoOutputSequence_var {
    public:
      inline VideoOutputSequence_var() : _pd_seq(0) {}
      inline VideoOutputSequence_var(VideoOutputSequence* _s) : _pd_seq(_s) {}
      inline VideoOutputSequence_var(const VideoOutputSequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new VideoOutputSequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~VideoOutputSequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline VideoOutputSequence_var& operator = (VideoOutputSequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline VideoOutputSequence_var& operator = (const VideoOutputSequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new VideoOutputSequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper>  operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline VideoOutputSequence* operator -> () { return _pd_seq; }
      inline const VideoOutputSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator VideoOutputSequence& () const { return *_pd_seq; }
#else
      inline operator const VideoOutputSequence& () const { return *_pd_seq; }
      inline operator VideoOutputSequence& () { return *_pd_seq; }
#endif
        
      inline const VideoOutputSequence& in() const { return *_pd_seq; }
      inline VideoOutputSequence&       inout()    { return *_pd_seq; }
      inline VideoOutputSequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline VideoOutputSequence* _retn() { VideoOutputSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class VideoOutputSequence_out;
      
    private:
      VideoOutputSequence* _pd_seq;
    };

    class VideoOutputSequence_out {
    public:
      inline VideoOutputSequence_out(VideoOutputSequence*& _s) : _data(_s) { _data = 0; }
      inline VideoOutputSequence_out(VideoOutputSequence_var& _s)
        : _data(_s._pd_seq) { _s = (VideoOutputSequence*) 0; }
      inline VideoOutputSequence_out(const VideoOutputSequence_out& _s) : _data(_s._data) {}
      inline VideoOutputSequence_out& operator = (const VideoOutputSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline VideoOutputSequence_out& operator = (VideoOutputSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator VideoOutputSequence*&()  { return _data; }
      inline VideoOutputSequence*& ptr()       { return _data; }
      inline VideoOutputSequence* operator->() { return _data; }

      inline _CORBA_ObjRef_Element< _objref_VideoOutputCorbaDef, VideoOutputCorbaDef_Helper>  operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      VideoOutputSequence*& _data;

    private:
      VideoOutputSequence_out();
      VideoOutputSequence_out& operator=(const VideoOutputSequence_var&);
    };

  
  };

  class _objref_VideoOutputGroupCorbaDef :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::ULong getKey();
    char* getName();
    char* getGroupType();
    char* getTypeSize();
    ::CORBA::UShort getPosition();
    ::CORBA::UShort getGroupDimensionX();
    ::CORBA::UShort getGroupDimensionY();
    VideoOutputGroupCorbaDef::VideoOutputSequence* getVideoOutputList();
    ::CORBA::Boolean isCapableOfLayouts();
    char* getVideoWallboardAgentName();

    inline _objref_VideoOutputGroupCorbaDef()  { _PR_setobj(0); }  // nil
    _objref_VideoOutputGroupCorbaDef(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_VideoOutputGroupCorbaDef();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_VideoOutputGroupCorbaDef(const _objref_VideoOutputGroupCorbaDef&);
    _objref_VideoOutputGroupCorbaDef& operator = (const _objref_VideoOutputGroupCorbaDef&);
    // not implemented

    friend class VideoOutputGroupCorbaDef;
  };

  class _pof_VideoOutputGroupCorbaDef : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_VideoOutputGroupCorbaDef() : _OMNI_NS(proxyObjectFactory)(VideoOutputGroupCorbaDef::_PD_repoId) {}
    virtual ~_pof_VideoOutputGroupCorbaDef();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_VideoOutputGroupCorbaDef :
    public virtual omniServant
  {
  public:
    virtual ~_impl_VideoOutputGroupCorbaDef();

    virtual ::CORBA::ULong getKey() = 0;
    virtual char* getName() = 0;
    virtual char* getGroupType() = 0;
    virtual char* getTypeSize() = 0;
    virtual ::CORBA::UShort getPosition() = 0;
    virtual ::CORBA::UShort getGroupDimensionX() = 0;
    virtual ::CORBA::UShort getGroupDimensionY() = 0;
    virtual VideoOutputGroupCorbaDef::VideoOutputSequence* getVideoOutputList() = 0;
    virtual ::CORBA::Boolean isCapableOfLayouts() = 0;
    virtual char* getVideoWallboardAgentName() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_VideoOutputGroupCorbaDef;

_CORBA_MODULE_END



_CORBA_MODULE POA_TA_Base_Bus
_CORBA_MODULE_BEG

  class VideoOutputGroupCorbaDef :
    public virtual TA_Base_Bus::_impl_VideoOutputGroupCorbaDef,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~VideoOutputGroupCorbaDef();

    inline ::TA_Base_Bus::VideoOutputGroupCorbaDef_ptr _this() {
      return (::TA_Base_Bus::VideoOutputGroupCorbaDef_ptr) _do_this(::TA_Base_Bus::VideoOutputGroupCorbaDef::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TA_Base_Bus
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const TA_Base_Bus::VideoOutputGroupCorbaDef::VideoOutputSequence& _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputGroupCorbaDef::VideoOutputSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputGroupCorbaDef::VideoOutputSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TA_Base_Bus::VideoOutputGroupCorbaDef::VideoOutputSequence*& _sp);

void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputGroupCorbaDef_ptr _s);
void operator<<=(::CORBA::Any& _a, TA_Base_Bus::VideoOutputGroupCorbaDef_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TA_Base_Bus::VideoOutputGroupCorbaDef_ptr& _s);



inline void
TA_Base_Bus::VideoOutputGroupCorbaDef::_marshalObjRef(::TA_Base_Bus::VideoOutputGroupCorbaDef_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VideoOutputGroupCorbaDef
#endif

#endif  // __VideoOutputGroupCorbaDef_hh__

