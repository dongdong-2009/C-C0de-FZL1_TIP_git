#if !defined(MovementControlCorbaDef_A5A991A4_216B_4ce0_B9CE_BF2D06785816__INCLUDED_)
#define MovementControlCorbaDef_A5A991A4_216B_4ce0_B9CE_BF2D06785816__INCLUDED_

/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution in any form.
  *
  * Source:    $File: //depot/4669_TIP/TA_BASE/transactive/bus/cctv_gzl9/video_switch_agent/IDL/src/MovementControlCorbaDef.idl $
  * @author:   Katherine Thomson
  * @version:  $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/10/31 12:12:40 $
  * Last modified by:  $Author: grace.koh $
  *
  * The interface to an object that controls pan, tilt, zoom and presets for a Camera.
  */

#include "core/exceptions/IDL/src/CommonExceptionsCorbaDef.idl"
#include "bus/cctv_gzl9/video_switch_agent/IDL/src/ExceptionsCorbaDef.idl"

module TA_Base_Bus_GZL9
{
    interface MovementControlCorbaDef
    {
        //
        // Struct used to define Camera preset information.
        //

        struct CameraPreset
        {
            short index;       // The number identifying the preset.
            string name;       // The unique name of the preset.
        };

        enum EPanDirection
        {
            Left,
            Right,
            HaltPan
        };

        enum ETiltDirection
        {
            Up,
            Down,
            HaltTilt
        };

		const short NO_PRESET = -1;

		typedef sequence< CameraPreset > CameraPresetSequence;     


        ///////////////////////////////////////////////////////////////////////
        //
        // Movement Controls
        //
        ///////////////////////////////////////////////////////////////////////

        /**
          * panAndTilt
          *
          * Pans and tilts the Camera in the given directions at the given speeds.
          * If proportional gain is not supported, the speed value will be ignored
          * and the Camera will pan and tilt at either its default speed or its 
          * slowest speed depending on the Camera type.
          *
          * @param      EPanDirection panDirection
          *             The direction to Pan (left, right or halt).
          * @param      unsigned short panSpeed
          *             The speed to pan the Camera.
          * @param      ETiltDirection tiltDirection
          *             The direction to Tilt (up, down or halt).
          * @param      unsigned short tiltSpeed
          *             The speed to tilt the Camera.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. One or more speed or direction values are invalid.
          *             5. The agent is in Monitor mode.
          *             6. The user does not have sufficient privileges for this operation.
          *             7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void panAndTilt( in EPanDirection panDirection,
                         in unsigned short panSpeed,
                         in ETiltDirection tiltDirection,
                         in unsigned short tiltSpeed,
                         in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);


        ///////////////////////////////////////////////////////////////////////
        //
        // Pan Controls
        //
        ///////////////////////////////////////////////////////////////////////

        /**
          * panLeft
          *
          * Pans the Camera left at the given speed.  If proportional gain
          * is not supported, the speed value will be ignored and the Camera
          * will pan at either its default speed or its slowest speed 
          * depending on the Camera type.
          *
          * @param      unsigned short speed    
          *             The speed to pan the Camera left at.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * @param      boolean isContinuous
          *             If true =>  Starts the camera panning left and continues
          *                         panning until panHalt() is called.
          *             If false => Pans the camera left one position then stops.
          *             NB: This parameter may be ignored if the protocol or 
          *             Camera does not support this functionality.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The speed value is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void panLeft( in unsigned short speed, in string sessionId, in boolean isContinuous )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /**
          * panRight
          *
          * Pans the Camera right at the given speed.  If proportional gain
          * is not supported, the speed value will be ignored and the Camera
          * will pan at either its default speed or its slowest speed 
          * depending on the Camera type.
          *
          * @param      unsigned short speed
          *             The speed to pan the Camera right at.
          * @param      string sessionId
          *             Used to determine if the user has sufficient
          *             privileges for this operation.
          * @param      boolean isContinuous
          *             If true =>  Starts the camera panning right and continues
          *                         panning until panHalt() is called.
          *             If false => Pans the camera left one position then stops.
          *             NB: This parameter may be ignored if the protocol or 
          *             Camera does not support this functionality.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The speed value is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void panRight( in unsigned short speed, in string sessionId, in boolean isContinuous )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /**
          * panHalt
          *
          * Stops panning the Camera.
          *
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
		  *				4. The agent is in Monitor mode.
		  *				5. The user does not have sufficient privileges for this operation.
		  *				6. There is a communications failure with the hardware.
          *             7. The Camera address cannot be retrieved from the database.
          */

        void panHalt( in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        ///////////////////////////////////////////////////////////////////////
        //
        // Tilt Controls
        //
        ///////////////////////////////////////////////////////////////////////

        /**
          * tiltUp
          *
          * Tilts the Camera up at the given speed.  If proportional gain
          * is not supported, the speed value will be ignored and the Camera
          * will tilt at either its default speed or its slowest speed 
          * depending on the Camera type.
          *
          * @param      unsigned short speed    
          *             The speed to tilt the Camera up at.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * @param      boolean isContinuous
          *             If true =>  Starts the camera tilting up and continues
          *                         tilting until tiltHalt() is called.
          *             If false => Tilts the camera up one position then stops.
          *             NB: This parameter may be ignored if the protocol or 
          *             Camera does not support this functionality.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The speed value is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void tiltUp( in unsigned short speed, in string sessionId, in boolean isContinuous )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /**
          * tiltDown
          *
          * Tilts the Camera down at the given speed.  If proportional gain
          * is not supported, the speed value will be ignored and the Camera
          * will tilt at either its default speed or its slowest speed 
          * depending on the Camera type.
          *
          * @param      unsigned short speed    
          *             The speed to tilt the Camera down at.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * @param      boolean isContinuous
          *             If true =>  Starts the camera tilting down and continues
          *                         tilting until tiltHalt() is called.
          *             If false => Tilts the camera down one position then stops.
          *             NB: This parameter may be ignored if the protocol or 
          *             Camera does not support this functionality.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The speed value is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void tiltDown( in unsigned short speed, in string sessionId, in boolean isContinuous )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /**
          * tiltHalt
          *
          * Stops tilting the Camera.
          *
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
		  *				4. The agent is in Monitor mode.
		  *				5. The user does not have sufficient privileges for this operation.
		  *				6. There is a communications failure with the hardware.
          *             7. The Camera address cannot be retrieved from the database.
          */

        void tiltHalt( in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        ///////////////////////////////////////////////////////////////////////
        //
        // Zoom Controls
        //
        ///////////////////////////////////////////////////////////////////////

        /**
          * zoomIn
          *
          * Zooms the Camera in at the given speed.  If proportional gain
          * is not supported, the speed value will be ignored and the Camera
          * will zoom at either its default speed or its slowest speed 
          * depending on the Camera type.
          *
          * @param      unsigned short speed    
          *             The speed to zoom the Camera in at.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The speed value is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void zoomIn( in unsigned short speed, in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /**
          * zoomOut
          *
          * Zooms the Camera out at the given speed.  If proportional gain
          * is not supported, the speed value will be ignored and the Camera
          * will zoom at either its default speed or its slowest speed 
          * depending on the Camera type.
          *
          * @param      unsigned short speed    
          *             The speed to zoom the Camera out at.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The speed value is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          *             8. The Camera address cannot be retrieved from the database.
          */

        void zoomOut( in unsigned short speed, in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /**
          * zoomHalt
          *
          * Stops zooming the Camera.
          *
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          * 
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
		  *				4. The agent is in Monitor mode.
		  *				5. The user does not have sufficient privileges for this operation.
		  *				6. There is a communications failure with the hardware.
          *             7. The Camera address cannot be retrieved from the database.
          */

        void zoomHalt( in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        ///////////////////////////////////////////////////////////////////////
        //
        // Preset Controls
        //
        ///////////////////////////////////////////////////////////////////////

        /** 
          * activatePreset
          *
          * Activates the given preset => moves the Camera to the given preset.
          *
          * @param      unsigned short index  
          *             The index of the preset to activate.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The preset index is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          */
        
        void activatePreset( in unsigned short index, in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /** 
          * getActivePreset
          *
          * Returns the currently activated preset.
          *
          * @return     CameraPreset
          *             The active preset.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
		  *				1. The Camera or the protocol does not support presets.
		  *				2. The agent is in Monitor mode.
		  *				3. There is a communications failure with the hardware.
          */

        CameraPreset getActivePreset()
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /** 
          * getAllPresets
          *
          * Returns all the stored presets.
          *
          * @return     sequence< CameraPreset >    
          *             A vector of all stored presets or 
          *             an empty vector if there are none.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
		  *				1. The Camera or the protocol does not support presets.
		  *				2. The agent is in Monitor mode.
		  *				3. There is a communications failure with the hardware.
          */

        CameraPresetSequence getAllPresets()
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /** 
          * storePreset
          *
          * Stores the current position (pan/tilt/zoom/focus/iris... 
          * depending on hardware) of the Camera along with the given name and index.
          *
          * @param      CameraPreset preset
          *             The preset details.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The preset index is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          */
        
        void storePreset( in CameraPreset preset, in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /** 
          * getFullPresetRange
          *
          * Returns the range of presets that can be activated.
          *
          * @param		unsigned short minimumIndex
		  *				Will contain the minimum preset index that can be activated.
		  *	@param		unsigned short maximumIndex
          *             Will contain the maximum preset index that can be activated.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
		  *				1. The Camera or the protocol does not support presets.
		  *				2. The agent is in Monitor mode.
		  *				3. There is a communications failure with the hardware.
          */

        void getFullPresetRange( out unsigned short minimumIndex, out unsigned short maximumIndex )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /** 
          * getModifiablePresetRange
          *
          * Returns the range of presets that can be modified.
          *
          * @param		unsigned short minimumIndex
		  *				Will contain the minimum preset index that can be modified.
		  *	@param		unsigned short maximumIndex
          *             Will contain the maximum preset index that can be modified.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
		  *				1. The Camera or the protocol does not support presets.
		  *				2. The agent is in Monitor mode.
		  *				3. There is a communications failure with the hardware.
          */

        void getModifiablePresetRange( out unsigned short minimumIndex, out unsigned short maximumIndex )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

        /** 
          * setPresetName
          *
          * Sets the name of the preset with the given index.
          * The name can be cleared by passing in "" as the name.
          *
          * @param      unsigned short index
          *             The index of the preset to be altered.
          * @param      string name   
          *             The new name for the preset.
          * @param      string sessionId   
          *             Used to determine if the user has sufficient 
          *             privileges for this operation.
          *
          * @exception  VideoSwitchAgentException
          *             Thrown if:
          *             1. The user does not own the lock for this Camera.
          *             2. The Camera or the protocol does not support this operation.
          *             3. The Camera is out of service.
          *             4. The preset index is invalid.
		  *				5. The agent is in Monitor mode.
		  *				6. The user does not have sufficient privileges for this operation.
		  *				7. There is a communications failure with the hardware.
          */

        void setPresetName( in unsigned short index, in string name, in string sessionId )
            raises( TA_Base_Bus_GZL9::VideoSwitchAgentException ,TA_Base_Core::OperationModeException);

    }; // MovementControlCorbaDef

}; // TA_Base_Bus

#endif // !defined(MovementControlCorbaDef_A5A991A4_216B_4ce0_B9CE_BF2D06785816__INCLUDED_)
